[
    {
        "name": "AGLToASL",
        "description": "Converts position from [[PositionAGL]] to [[PositionASL]]",
        "introduced_version": null,
        "syntax": "[[AGLToASL]] posAGL",
        "parameters": [
            {
                "name": "posAGL",
                "description": "position to convert",
                "sqf_type": "PositionAGL"
            }
        ],
        "returns": {
            "description": "[[PositionASL]]",
            "sqf_type": "PositionASL"
        }
    },
    {
        "name": "AISFinishHeal",
        "description": "Alternative Injury Simulation (AIS) end state. Used to tell engine that script side healing is done when using \"HandleHeal\" event handler.",
        "introduced_version": null,
        "syntax": "'''AISFinishHeal''' [unit, healer, healercanheal]",
        "parameters": [
            {
                "name": "unit",
                "description": "wounded",
                "sqf_type": "Object"
            },
            {
                "name": "healer",
                "description": "medic",
                "sqf_type": "Object"
            },
            {
                "name": "healercanheal",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ASLToAGL",
        "description": "Converts position from [[PositionASL]] to [[PositionAGL]]",
        "introduced_version": null,
        "syntax": "'''ASLToAGL''' posASL",
        "parameters": [
            {
                "name": "posASL",
                "description": "position to convert",
                "sqf_type": "PositionASL"
            }
        ],
        "returns": {
            "description": "[[PositionAGL]]",
            "sqf_type": "PositionAGL"
        }
    },
    {
        "name": "ASLToATL",
        "description": "Converts a position from [[PositionASL]] to [[PositionATL]]",
        "introduced_version": null,
        "syntax": "'''ASLToATL''' pos",
        "parameters": [
            {
                "name": "pos",
                "description": "position to convert",
                "sqf_type": "PositionASL"
            }
        ],
        "returns": {
            "description": "[[PositionATL]]",
            "sqf_type": "PositionATL"
        }
    },
    {
        "name": "ATLToASL",
        "description": "Converts a position from [[PositionATL]] to [[PositionASL]]",
        "introduced_version": null,
        "syntax": "[[ATLToASL]] pos",
        "parameters": [
            {
                "name": "pos",
                "description": "position to convert",
                "sqf_type": "PositionATL"
            }
        ],
        "returns": {
            "description": "[[PositionASL]]",
            "sqf_type": "PositionASL"
        }
    },
    {
        "name": "HUDMovementLevels",
        "description": "Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]",
        "introduced_version": null,
        "syntax": "'''HUDMovementLevels'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "abs",
        "description": "Absolute value of a real number",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "n",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "accTime",
        "description": "Returns the current time acceleration factor",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "acos",
        "description": "ArcCosine of a number, result in [[Number#Degrees|Degrees]]",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "action",
        "description": "Make a unit perform an action. See [[:Category:Actions]] for action names and syntaxes.",
        "introduced_version": null,
        "syntax": "unit [[action]] actionArray",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "actionArray",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "actionIDs",
        "description": "Returns [[Array]] of [[Number]]s, where numbers are IDs of all user actions added to given entity with [[addAction]] command.",
        "introduced_version": null,
        "syntax": "[[actionIDs]] entity",
        "parameters": [
            {
                "name": "entity",
                "description": "entity with added user actions",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - Array with user action IDs",
            "sqf_type": "Array"
        }
    },
    {
        "name": "actionKeys",
        "description": "Returns [[Array]] containing [[DIK_KeyCodes|dikCodes]] of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or [[:Category:Key Actions|user action names]] or user profile, for example:",
        "introduced_version": null,
        "syntax": "'''actionKeys''' userAction",
        "parameters": [
            {
                "name": "userAction",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Number]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "actionKeysImages",
        "description": "Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes or [[:Category:Key Actions|user action names]].",
        "introduced_version": null,
        "syntax": "[[Structured Text]]",
        "parameters": [
            {
                "name": "userAction",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "userAction",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "maxKeys",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "actionKeysNames",
        "description": "Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or [[:Category:Key Actions|user action names]].",
        "introduced_version": null,
        "syntax": "'''actionKeysNames''' userAction",
        "parameters": [
            {
                "name": "userAction",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "UserAction",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "maxKeys",
                "description": "Maximum number of keys to return",
                "sqf_type": "Number"
            },
            {
                "name": "UserAction",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "maxKeys",
                "description": "Maximum number of keys to return",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "actionKeysNamesArray",
        "description": "Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or [[:Category:Key_Actions|user action names]].",
        "introduced_version": null,
        "syntax": "'''actionKeysNamesArray''' userAction",
        "parameters": [
            {
                "name": "userAction",
                "description": "Name of the action",
                "sqf_type": "String"
            },
            {
                "name": "userAction",
                "description": "Name of the action",
                "sqf_type": "String"
            },
            {
                "name": "maxKeys",
                "description": "Maximum number of keys to return",
                "sqf_type": "Number"
            },
            {
                "name": "UserAction",
                "description": "Name of the action",
                "sqf_type": "String"
            },
            {
                "name": "maxKeys",
                "description": "Maximum number of keys to return",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String|Strings]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "actionName",
        "description": "Returns localized name of action.",
        "introduced_version": null,
        "syntax": "[[actionName]] action",
        "parameters": [
            {
                "name": "action",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "actionParams",
        "description": "Returns [[Array]] with params for given user action id (similar to [[addAction]] param array). The output array is of the following format: \n<tt>[title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, radius, unconscious, textWindowBackground, textWindowForeground, selection, memoryPoint]</tt>,  where:\n* title: [[String]] - action title text\n* script: [[String]] - script file or script expression assigned to the action\n* arguments: [[Anything]] or [[nil]] - arguments passed to the action\n* priority: [[Number]] - action priority on the action menu\n* showWindow: [[Boolean]] - whether the action is shown in the center of the screen too\n* hideOnUse: [[Boolean]] - whether the action menu should close after selecting the action \n* shortcut: [[String]] - action bindings to some existing engine action if any\n* condition: [[String]] - expression returning [[true]] or [[nil]] for action to appear on the action menu\n* radius: [[Number]] - max distance to entity at which action becomes available. -1 means it is engine default (~15m)\n* unconscious: [[Boolean]] - whether the action is available to [[setUnconscious|unconscious]] person\n* textWindowBackground: [[String]] - same as textWindowBackground in [[setUserActionText]]\n* textWindowForeground: [[String]] - same as textWindowForeground in [[setUserActionText]]\n* selection: [[String]] - named selection in Geometry LOD to which the action is attached\n* memoryPoint: [[String]] - memory point on the object to which the action is attached\n\nSince Arma 3 v1.93.145625 if object is null or the action doesn't exist, default array of params is returned:<br>\n<tt>[\"\",\"\",<null>,1.5,true,true,\"\",\"\",50,false,\"\",\"\",\"\",\"\"]</tt>",
        "introduced_version": null,
        "syntax": "entity [[actionParams]] id",
        "parameters": [
            {
                "name": "entity",
                "description": "entity with added user actions",
                "sqf_type": "Object"
            },
            {
                "name": "id",
                "description": "id of existing user action (returned by [[addAction]] or [[actionIDs]])",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] (or, prior to Arma 3 v1.93.145625, [[Nothing]] if action doesn't exist)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "activateAddons",
        "description": "Activates the listed addons. The list of active addons is initialized during this function.",
        "introduced_version": null,
        "syntax": "'''activateAddons''' [addon1, ...]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "activateKey",
        "description": "Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns.\n\nSee keys, keysLimit and doneKeys in the [[Description.ext#keys|description.ext]] file of the missions.",
        "introduced_version": null,
        "syntax": "'''activateKey''' keyname",
        "parameters": [
            {
                "name": "keyname",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "activatedAddons",
        "description": "Returns a list of all activated addons.",
        "introduced_version": null,
        "syntax": "'''activatedAddons'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "add3DENConnection",
        "description": "[[Eden Editor: Connecting|Connect]] entities together.",
        "introduced_version": null,
        "syntax": "'''add3DENConnection''' [type, from, to]",
        "parameters": [
            {
                "name": "type",
                "description": "connection class from ''Cfg3DEN >> Connections''",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "of [[Eden Entity|Eden Entities]] - entities which are being connected",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the connection was made",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "add3DENEventHandler",
        "description": "Add code to be run when a [[Eden Editor]] event is triggered.\n<br><br>\nSee the list of all [[Arma_3:_Event_Handlers:_Eden_Editor|Eden Editor Event Handlers]].",
        "introduced_version": null,
        "syntax": "'''add3DENEventHandler''' [type,code]",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "code",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "add3DENLayer",
        "description": "Add an editing layer in [[Eden Editor]].",
        "introduced_version": null,
        "syntax": "parentLayerID '''add3DENLayer''' name",
        "parameters": [
            {
                "name": "name",
                "description": "layer display name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - layer ID",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addAction",
        "description": "Adds an entry to the action menu of an object (scroll wheel menu). The action can only be activated when in proximity to the object (default 50m) '''and''' look at it. Adding an action to the player makes that action available to the player at all times.&lt;br&gt;\nThe appearance of onscreen text can be further tweaked with [[setUserActionText]]. For event handling of user interaction see [[inGameUISetEventHandler]].",
        "introduced_version": null,
        "syntax": "object [[addAction]] [title, script, arguments, priority, showWindow, hideOnUse, shortcut, condition, radius, unconscious, selection, memoryPoint]",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - The added action's ID. Action can be removed with [[removeAction]] (see also [[removeAllActions]]). IDs are incrementing, the first given action to each unit has the ID 0, the second the ID 1, etc. IDs are also passed to the called script (see [[#Syntax|''script'' parameter]])",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addBackpack",
        "description": "Adds a backpack for a unit. If a unit already has a backpack, the old backpack will be placed on the ground under the unit.",
        "introduced_version": null,
        "syntax": "unit [[addBackpack]] backpackClassName",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "packClassName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addBackpackCargo",
        "description": "Add backpack(s) to the cargo space of vehicle. Classname list of available backpacks is [[ArmA 2 OA: Backpacks|here]].",
        "introduced_version": null,
        "syntax": "vehicle [[addBackpackCargo]] [backpackClassName, count]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle to add the backpack to",
                "sqf_type": "Object"
            },
            {
                "name": "backpackClassName",
                "description": "backpack classname",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "number of backpacks to add.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addBackpackCargoGlobal",
        "description": "Add backpack(s) to the cargo space of vehicle. MP synchronized. Classname list of available backpacks is [[ArmA 2 OA: Backpacks|here]]",
        "introduced_version": null,
        "syntax": "vehicle [[addBackpackCargoGlobal]] [packClassName, count]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "to add the Backpack to",
                "sqf_type": "Object"
            },
            {
                "name": "packClassName",
                "description": ",  See the topic [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addBackpackGlobal",
        "description": "Adds a backpack to a unit (even non-local).<br><br>",
        "introduced_version": null,
        "syntax": "unit '''addBackpackGlobal''' backpack",
        "parameters": [
            {
                "name": "unit",
                "description": "soldier",
                "sqf_type": "Object"
            },
            {
                "name": "backpack",
                "description": "backpack class name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addCamShake",
        "description": "Creates the camera shaking effect, like when you are near an explosion",
        "introduced_version": null,
        "syntax": "'''addCamShake''' [power, duration, frequency]",
        "parameters": [
            {
                "name": "power",
                "description": "Strength of shake, practical range is 0 to 20 (how strong the camera movement will be).",
                "sqf_type": "Number"
            },
            {
                "name": "duration",
                "description": "Duration in seconds (how long the effect will last)",
                "sqf_type": "Number"
            },
            {
                "name": "frequency",
                "description": "Frequency of shake, practical range is 0 to 100 (how will be the rhythm).",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addCuratorAddons",
        "description": "Allow curator use of given addon.",
        "introduced_version": null,
        "syntax": "curatorObj '''addCuratorAddons''' addons",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "addons",
                "description": "of CfgPatches classes",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addCuratorCameraArea",
        "description": "Adds or changes curator camera area (depends on if ID is already used).",
        "introduced_version": null,
        "syntax": "curatorObj '''addCuratorCameraArea''' [cameraAreaID,position,radius]",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "cameraAreaID",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "Position"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addCuratorEditableObjects",
        "description": "Register objects which can be edited by a curator.",
        "introduced_version": null,
        "syntax": "curatorObj '''addCuratorEditableObjects''' [objects,addCrew]",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "objects",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "addCrew",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addCuratorEditingArea",
        "description": "Adds or changes curator edit area (depends on if ID is already used).",
        "introduced_version": null,
        "syntax": "curatorObj '''addCuratorEditingArea''' [editAreaID,position,radius]",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "editAreaID",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "Position"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addCuratorPoints",
        "description": "Adds or removes curator points. Points can be only in range from 0 to 1.",
        "introduced_version": null,
        "syntax": "curatorObj '''addCuratorPoints''' points",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "points",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addEditorObject",
        "description": "Add an object to the editor and assign arguments. Create script is,called with _new equal to true. Returns the ID of the new EditorObject.,Subtype class is optional.",
        "introduced_version": null,
        "syntax": "map '''addEditorObject''' [type,[name1,value1,...],subtype class]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "addEventHandler",
        "description": "Adds event handler (EH) to the given object and returns EH handle. If EH has some data to return upon event (e.g. the \"killed\" EH will return an array with 2 elements: the killed unit, and the killer), it is passed in <tt>_this</tt> variable. Since Arma 3 v.1.63.137807 the EH handle is also stored in <tt>_thisEventHandler</tt> variable and is available during EH code execution.<br><br>For more information about event handlers and their types check the scripting topic [[:Category:Event Handlers|Event handlers]] in this reference. You may add as many event handlers of any type as you like to every unit. For instance, if you add an event handler of type \"killed\" and one already exists, the old one doesn't get overwritten. Use [[removeEventHandler]] to delete event handlers.",
        "introduced_version": null,
        "syntax": "object '''addEventHandler''' [type, command]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "[[:Category:Event Handlers|Event Handler]] type",
                "sqf_type": "String"
            },
            {
                "name": "command",
                "description": "or [[String]] - code that should be executed once the event occurs, by default executed in [[missionNamespace]]",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Number]] - The index of the currently added event handler is returned. Indices start at 0 for each unit and increment with each added event handler.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addForce",
        "description": "Applies force to given object at given position. Force is defined as vector [x, y, z] in world space, position is vector [x, y, z] in model space. If you need to define force in model space, use [[vectorModelToWorld]] or [[vectorModelToWorldVisual]] commands first. The force applied as impulse. For more information see [http://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/apireference/files/classPxRigidBody.html#a22b0a1ef0b6c5656a6063c5c38f5679c NVIDIA docs]",
        "introduced_version": null,
        "syntax": "object '''addForce''' [force, position]",
        "parameters": [
            {
                "name": "object",
                "description": "PhysX object",
                "sqf_type": "Object"
            },
            {
                "name": "force",
                "description": "force vector (in world space) in format [x,y,z]",
                "sqf_type": "Array"
            },
            {
                "name": "position",
                "description": "model [[PositionRelative]] to which force is applied in format [x,y,z]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addForceGeneratorRTD",
        "description": "Adds force generator to world.",
        "introduced_version": null,
        "syntax": "[[addForceGeneratorRTD]] parameters",
        "parameters": [
            {
                "name": "parameters",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "addGoggles",
        "description": "Create a new item and try to link it into goggles slot. This command doesn't add NVGoggles. Use [[addItem]] and [[assignItem]] or just [[linkItem]] for latter.",
        "introduced_version": null,
        "syntax": "unit '''addGoggles''' type",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addGroupIcon",
        "description": "Adds icon to a group leader. Returns icon ID, Control icons visibility with [[setGroupIconsVisible]].",
        "introduced_version": null,
        "syntax": "group '''addGroupIcon''' [iconClass, offset]",
        "parameters": [
            {
                "name": "group",
                "description": "group to add icon to",
                "sqf_type": "Group"
            },
            {
                "name": "iconClass",
                "description": "class name of an icon from <tt>CfgGroupIcons</tt>",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - Icon ID",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addHandgunItem",
        "description": "Adds weapon item, including magazine, directly to the [[handgunWeapon]]. This is used for infantry weapons.",
        "introduced_version": null,
        "syntax": "unit '''addHandgunItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addHeadgear",
        "description": "Creates a headgear item and tries to link it to headgear slot. If slot is occupied with another item, the item in the slot will be replaced.",
        "introduced_version": null,
        "syntax": "unit '''addHeadgear''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addItem",
        "description": "Creates new item and tries to add it into inventory. Inventory must have enough space to accomodate new item or command will fail.The item can also be a weapon or a magazine.",
        "introduced_version": null,
        "syntax": "unit '''addItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addItemCargo",
        "description": "Creates new items and stores them in given container. Works with items, weapons and magazines. For global variant see [[addItemCargoGlobal]]",
        "introduced_version": null,
        "syntax": "box '''addItemCargo''' [item, count]",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addItemCargoGlobal",
        "description": "Creates new items and stores them in the given container. Works with items, weapons and magazines.",
        "introduced_version": null,
        "syntax": "box '''addItemCargoGlobal''' [item, count]",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addItemPool",
        "description": "Adds count items of type name into the weapon pool (used in the campaign to transfer items to the next mission)",
        "introduced_version": null,
        "syntax": "'''addItemPool''' [itemName, count]",
        "parameters": [
            {
                "name": "itemName",
                "description": "Item name",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "Number of items to add",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addItemToBackpack",
        "description": "Create new item and store it to soldier's backpack. The item can also be a weapon or a magazine.",
        "introduced_version": null,
        "syntax": "unit [[addItemToBackpack]] item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addItemToUniform",
        "description": "Create new item and store it to soldier's uniform. The item can also be a weapon or a magazine.",
        "introduced_version": null,
        "syntax": "unit '''addItemToUniform''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addItemToVest",
        "description": "Create new item and store it to soldier's vest. The item can also be a weapon or a magazine.",
        "introduced_version": null,
        "syntax": "unit '''addItemToVest''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addLiveStats",
        "description": "Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle). (Also available in OFPE & VBS2)",
        "introduced_version": null,
        "syntax": "unit '''addLiveStats''' score",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "score",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMPEventHandler",
        "description": "Adds MP event handler (EH) to the given object and returns EH handle.<br>\nMP event handlers are added globally to every client on network in multiplayer and will fire on every client too upon event.\nIf EH has some data to return upon event (e.g. the \"MPKilled\" EH will return an array with 2 elements: the killed unit, and the killer), it is passed in <tt>_this</tt> variable.<br>\n<br>\nSince Arma 3 v.1.63.137807 the EH handle is also stored in <tt>_thisEventHandler</tt> variable and is available during EH code execution.<br><br>",
        "introduced_version": null,
        "syntax": "object [[addMPEventHandler]] [type, expression]",
        "parameters": [
            {
                "name": "object",
                "description": "object to monitor",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "event handler name",
                "sqf_type": "String"
            },
            {
                "name": "expression",
                "description": "or [[Code]] - expression to execute",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addMagazine",
        "description": "Adds a magazine to a person. Infantry units can only carry a specific number of magazines, once the magazine slots are filled (or uniform/vest/bagpack are full in",
        "introduced_version": null,
        "syntax": "unitName [[addMagazine]] magazineName",
        "parameters": [
            {
                "name": "unitName",
                "description": "person to add the magazines to",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "magazine name. See the topic [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "unitName",
                "description": "person to add the magazines to",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "magazine name. See the topic [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "ammoCount",
                "description": "Ammo quantity to be added to magazine. If it goes beyond maximum magazine capacity, the magazine will be given full and not overloaded.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMagazineAmmoCargo",
        "description": "Adds magazines with specified ammo count to the cargo space of a vehicle or a container.",
        "introduced_version": null,
        "syntax": "cargospace [[addMagazineAmmoCargo]] [magazine, quantity, ammocount]",
        "parameters": [
            {
                "name": "cargospace",
                "description": "vehicle or container or weaponholder",
                "sqf_type": "Object"
            },
            {
                "name": "magazine",
                "description": "magazine class name",
                "sqf_type": "String"
            },
            {
                "name": "quantity",
                "description": "number of magazines to add",
                "sqf_type": "Number"
            },
            {
                "name": "ammocount",
                "description": "ammo count in each magazine",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMagazineCargo",
        "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored.",
        "introduced_version": null,
        "syntax": "vehicleName [[addMagazineCargo]] [magazineName, count]",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "vehicle to add the magazines to",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "magazine name. See [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "number of magazines to add",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMagazineCargoGlobal",
        "description": "Add magazines to the cargo space of vehicles, which can be taken out by infantry units.\n\nMP Synchronized",
        "introduced_version": null,
        "syntax": "vehicleName [[addMagazineCargoGlobal]] [magazineName, count]",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "vehicle to add the magazines to",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "magazine name. See [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "number of magazines to add",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMagazineGlobal",
        "description": "Adds magazine to a unit regardless of locality. This command can also be used to add magazine to a vehicle, like a static gun, for example.",
        "introduced_version": null,
        "syntax": "unit [[addMagazineGlobal]] magazineName",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMagazinePool",
        "description": "Add magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.",
        "introduced_version": null,
        "syntax": "'''addMagazinePool''' [magazineName, count]",
        "parameters": [
            {
                "name": "magazineName",
                "description": "magazine name. See the topic [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "number of magazines to add",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMagazineTurret",
        "description": "Adds a magazine to the turret. Use turret path [-1] for driver's turret.\n\nNote: you may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined. Since Arma 3  v1.55.133817 it is possible to set custom ammo count in added magazine.",
        "introduced_version": null,
        "syntax": "vehicle '''addMagazineTurret''' [magazineName, turretPath, ammoCount]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMagazines",
        "description": "Adds multiple magazines to the unit. For cargo containers use [[addMagazineCargoGlobal]] command.",
        "introduced_version": null,
        "syntax": "unit '''addMagazines''' [magazineName, count]",
        "parameters": [
            {
                "name": "unit",
                "description": "a soldier",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "Number of magazines.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addMenu",
        "description": "Adds a new menu button. Priority is optional.",
        "introduced_version": null,
        "syntax": "map '''addMenu''' [text,priority]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addMenuItem",
        "description": "Creates a new menu item. Menu can be \"file\" or \"view\",index is index,as returned from addMenu command. priority is optional and determines,where in the menu the item will reside (higher priority items first).",
        "introduced_version": null,
        "syntax": "map '''addMenuItem''' [menu or index,text,command,priority]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addMissionEventHandler",
        "description": "Adds event handler (EH) attached to the current mission and returns EH handle. If EH has some data to return upon event, it is passed in <tt>_this</tt> variable. Since Arma 3 v.1.63.137807 the EH handle is also stored in <tt>_thisEventHandler</tt> variable and is available during EH code execution.<br><br>For the list of available mission event handlers see: [[Arma_3:_Event_Handlers/addMissionEventHandler]]",
        "introduced_version": null,
        "syntax": "'''addMissionEventHandler''' [type, command]",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "command",
                "description": "or [[String]] - By default executed in [[missionNamespace]]",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Number]] - The index of the currently added mission event handler is returned.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addMusicEventHandler",
        "description": "Adds [[playMusic]] event handler. Returns id of the handler or -1 when failed. Just like [[addMissionEventHandler]], music EH is also attached to the mission.",
        "introduced_version": null,
        "syntax": "'''addMusicEventHandler''' [type, function]",
        "parameters": [
            {
                "name": "type",
                "description": "\"MusicStart\" or \"MusicStop\"",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - event handler id",
            "sqf_type": "Number"
        }
    },
    {
        "name": "addOwnedMine",
        "description": "Sets ownership over a remotely detonatable mine to the unit.",
        "introduced_version": null,
        "syntax": "unit [[addOwnedMine]] mine",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mine",
                "description": "the mine object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addPlayerScores",
        "description": "MP server only: Adds player score.",
        "introduced_version": null,
        "syntax": "unit [[addPlayerScores]] values",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "values",
                "description": "killsInfantry , killsSoft, killsArmor, killsAir, killed",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addPrimaryWeaponItem",
        "description": "Adds weapon item, including magazine, directly to the [[primaryWeapon]]. This is used for infantry weapons.",
        "introduced_version": null,
        "syntax": "unit '''addPrimaryWeaponItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]] or [[Boolean]] - '''false''' is returned if '''item''' can not be added",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addRating",
        "description": "Add a number to the [[rating]] of a unit - negative values can be used to reduce the rating.\n<br>This command is usually used to reward for completed mission objectives. The rating is given at the end of the mission and is automatically adjusted when killing enemies or friendlies. \n\n<br>When the rating gets below -2000, the unit's side switches to \"ENEMY\" ([[sideEnemy]]) and the unit is attacked by everyone.(see [[ArmA:_Rating Values|Rating Values]])\n\n<br><br>See also: [[Arma_3:_Event_Handlers#HandleRating]]",
        "introduced_version": null,
        "syntax": "unitName '''addRating''' rating",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "rating",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addResources",
        "description": "Adds resources to a team member.",
        "introduced_version": null,
        "syntax": "teamMember '''addResources''' [resource1, resource2, ...]",
        "parameters": [
            {
                "name": "resource1",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "resource2",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addScore",
        "description": "Add a number to the score of a unit. This score is shown in multiplayer in the \"I\" (\"P\" in Arma 3) screen. Negative values will remove from the score. Server execution only. <br><br>\nSee also: [[Arma_3:_Event_Handlers#HandleScore]]",
        "introduced_version": null,
        "syntax": "unit '''addScore''' score",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "score",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addScoreSide",
        "description": "Adds side score. This is shown in the MP score tab as the total score. MP Only. Server execution only.",
        "introduced_version": null,
        "syntax": "side '''addScoreSide''' value",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addSecondaryWeaponItem",
        "description": "Adds weapon item, including magazine, directly to the [[secondaryWeapon]]. This is used for infantry weapons.",
        "introduced_version": null,
        "syntax": "unit '''addSecondaryWeaponItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addSwitchableUnit",
        "description": "Adds a unit into the list of units available for [[Team_Switch|Team Switch]]. Units marked as [[playableUnits|playable]] in editor are automatically switchable.\nThis command allows to add non-playable unit into array of [[switchableUnits]] and make them available for [[teamSwitch]]. SP only.",
        "introduced_version": null,
        "syntax": "[[addSwitchableUnit]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addTeamMember",
        "description": "Add given member to given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.\n\n<br><br> The same [[Team Member]] can be member of several different [[teams]] at the same time.",
        "introduced_version": null,
        "syntax": "team '''addTeamMember''' member",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addToRemainsCollector",
        "description": "Adds an array of vehicles/units to disposal manager for automatic wreck/body removal. The disposal manager follows wreck/body removal values set in [[description.ext]]",
        "introduced_version": null,
        "syntax": "'''addToRemainsCollector''' remains",
        "parameters": [
            {
                "name": "remains",
                "description": "of [[Object]]s - array of vehicles/units",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addTorque",
        "description": "Applies torque (rotation momentum) to the [[getCenterOfMass | center of mass]] of the given object. Torque force is defined as vector [x, y, z] applied in world space. If you need to define torque in model space, convert the torque vector first by [[vectorModelToWorld]] or [[vectorModelToWorldVisual]] command. The torque applied as impulse. Diagram below explain which way the object would rotate.  For more information see [http://docs.nvidia.com/gameworks/content/gameworkslibrary/physx/apireference/files/classPxRigidBody.html#acb04ffc816d45afff2d04e93d7446e79 NVIDIA docs] <br>\n[[Image:addTorque_correct.jpg|400px]]",
        "introduced_version": null,
        "syntax": "object '''addTorque''' torque",
        "parameters": [
            {
                "name": "object",
                "description": "PhysX object",
                "sqf_type": "Object"
            },
            {
                "name": "torque",
                "description": "world vector in format [x,y,z]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addUniform",
        "description": "Create a new uniform and try to link it into uniform slot (given uniform has to be supported by allowedUniforms list of target soldier). To check if uniform is allowed use [[isUniformAllowed]] and to force add incompatible uniform use [[forceAddUniform]]",
        "introduced_version": null,
        "syntax": "unit '''addUniform''' type",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addVehicle",
        "description": "Adds a specified vehicle for use by a specified AI led group.\n<br><br>\nNotes:\n* The vehicle will be considered as available for use by this group. \n* It creates a/adds to the vehicle pool for the given group to use. So more than one vehicle can be added to a group, and more than one group can be added to a vehicle.\n* This is relevant for some waypoints like getIn and guard - potentially more.\n* The AI choosing what vehicle to use based on the vehicle's [[CfgVehicles_Config_Reference#cost|cost]] value. Probably also distance to the available vehicles plays a role.\n* When deciding whether to board a vehicle, AI leaders seem to only consider the transport benefit of a vehicle, ignoring any combat benefits the vehicle may provide.\n* This happens also implicitly when using assignAsXXX or moveInXXX commands, or player GL orders units to enter a vehicle, as well editor or Zeus placed vehicles with units assigned to it.\n* One can make an AI GL order his group to board the specified vehicle with [[orderGetIn]] [[true]]. Setting to [[false]] will cancel the order, but the AI will first enter to get out again immediately thereafter. To immediately (potentially temporarily) halt the AI moving to the vehicle one can use  [[allowGetIn]] [[false]].\n* When vehicle is added in this way, it can appear as a target for the enemy - even if the vehicle currently has no crew.\n* If used on a vehicle already driven by a member of another group, the driver will continue under his own group's orders, which may not benefit the addVehicle group.\n* Seems to have no affect on AI under player command - at least as long as the player remains the GL.\n* To remove vehicle from a group, use [[leaveVehicle]].",
        "introduced_version": null,
        "syntax": "groupName '''addVehicle''' vehicleName",
        "parameters": [
            {
                "name": "groupName",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addVest",
        "description": "Create a new vest and try to link it into vest slot.",
        "introduced_version": null,
        "syntax": "unit [[addVest]] type",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWaypoint",
        "description": "Adds (or inserts when index is given) a new waypoint to a group.\n\nThe waypoint is placed randomly within a circle with the given center and radius.\n\nThe function returns a waypoint with format [group, index].<br><br>",
        "introduced_version": null,
        "syntax": "groupName '''addWaypoint''' [center, radius, index, name]",
        "parameters": [
            {
                "name": "groupName",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "center",
                "description": "([[PositionASL]] if ''radius'' is negative!) or [[Object]]",
                "sqf_type": "PositionAGL"
            },
            {
                "name": "radius",
                "description": "random waypoint placement within ''radius'' from ''center''",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Waypoint]] - [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "addWeapon",
        "description": "Add a weapon to a unit. For a global version of this command see [[addWeaponGlobal]].\n\nInfantry units can only carry a specific number of weapons, once the weapon slots are filled, any further [[addWeapon]] commands are ignored.",
        "introduced_version": null,
        "syntax": "object [[addWeapon]] weapon",
        "parameters": [
            {
                "name": "object",
                "description": "unit or vehicle to add the weapon to",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "weapon class name. See the topic [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWeaponCargo",
        "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Ignores available cargo space.",
        "introduced_version": null,
        "syntax": "vehicleName [[addWeaponCargo]] [weaponName, count]",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "vehicle to add the weapons to",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "weapon name. See [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "number of weapons to add.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWeaponCargoGlobal",
        "description": "Add weapons to the cargo space of vehicles, which can be taken out by infantry units. \n\nMP Synchronized",
        "introduced_version": null,
        "syntax": "vehicleName [[addWeaponCargoGlobal]] [weaponName, count]",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "vehicle to add the weapons to",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "weapon name. See the topic [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "number of weapons to add.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWeaponGlobal",
        "description": "Add a weapon to a unit. Infantry units can only carry weapons in their respective slots (primary, secondary and handgun), the [[addWeaponGlobal]] command will replace the weapon currently in a slot with the added weapon if it shares the same slot. This command can link items to respective slots as well, in which case the functionality is identical to [[linkItem]].\n\nTo make sure the added weapon is loaded and ready, add the magazine first.",
        "introduced_version": null,
        "syntax": "object '''addWeaponGlobal''' weapon",
        "parameters": [
            {
                "name": "weapon",
                "description": "Weapon class name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWeaponItem",
        "description": "Adds a weapon item to the specified weapon. The item can be weapon magazine, in which case the amount of ammo and target muzzle could also be specified.\n* Since Arma 3 v1.95 it is possible to add item instantly skipping the animation by providing optional boolean",
        "introduced_version": null,
        "syntax": "unit '''addWeaponItem''' [weaponName, itemName, instant]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "name of the weapon to add magazine to",
                "sqf_type": "String"
            },
            {
                "name": "itemName",
                "description": "class name of the item to add (if magazine, muzzle will be autodetected)",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "name of the weapon to add magazine to",
                "sqf_type": "String"
            },
            {
                "name": "itemName",
                "description": "class name of the item to add (if magazine, muzzle will be autodetected unless specified)",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWeaponPool",
        "description": "Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.",
        "introduced_version": null,
        "syntax": "'''addWeaponPool''' [weaponName, count]",
        "parameters": [
            {
                "name": "weaponName",
                "description": "weapon name. See the topic [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "number of weapons to add",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWeaponTurret",
        "description": "Adds a weapon to the turret. Use turret path [-1] for driver's turret.",
        "introduced_version": null,
        "syntax": "vehicle [[addWeaponTurret]] [weaponName, turretPath]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWeaponWithAttachmentsCargo",
        "description": "Adds a weapon into cargo space of a vehicle / box with given attachments / magazines. Ignores available cargo space. If the weapon class has any pre-attached items (LinkedItems), they are removed and new items, supplied via command arguments, are added.",
        "introduced_version": null,
        "syntax": "container [[addWeaponWithAttachmentsCargo]] [",
        "parameters": [
            {
                "name": "container",
                "description": "Container to add the weapon to, might be backpack, ammobox or vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "Weapon class name. See the topic [[:Category:Weapons]] for reference about possible values",
                "sqf_type": "String"
            },
            {
                "name": "muzzle",
                "description": "Muzzle attachment class name or \"\" if not needed",
                "sqf_type": "String"
            },
            {
                "name": "flashlight",
                "description": "Side rail attachment class name or \"\" if not needed",
                "sqf_type": "String"
            },
            {
                "name": "optics",
                "description": "Top rail attachment class name or \"\" if not needed",
                "sqf_type": "String"
            },
            {
                "name": "primaryMuzzleMagazine",
                "description": "Magazine class name",
                "sqf_type": "String"
            },
            {
                "name": "ammoCount",
                "description": "Ammo count in magazine (will be clipped in 0 and max mag capacity range)",
                "sqf_type": "Number"
            },
            {
                "name": "secondaryMuzzleMagazine",
                "description": "Magazine class name",
                "sqf_type": "String"
            },
            {
                "name": "ammoCount",
                "description": "Ammo count in magazine (will be clipped in 0 and max mag capacity range)",
                "sqf_type": "Number"
            },
            {
                "name": "bipod",
                "description": "Underbarrel rail attachment class name or \"\" if not needed",
                "sqf_type": "String"
            },
            {
                "name": "weaponsCount",
                "description": "Number of weapons to add",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addWeaponWithAttachmentsCargoGlobal",
        "description": "Adds a weapon into cargo space of a vehicle / box with given attachments / magazines. Ignores available cargo space. If the weapon class has any pre-attached items (LinkedItems), they are removed and new items, supplied via command arguments, are added. This command has a global effect.",
        "introduced_version": null,
        "syntax": "container [[addWeaponWithAttachmentsCargoGlobal]] [",
        "parameters": [
            {
                "name": "container",
                "description": "Container to add the weapon to, might be backpack, ammobox or vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "Weapon class name. See the topic [[:Category:Weapons]] for reference about possible values",
                "sqf_type": "String"
            },
            {
                "name": "muzzle",
                "description": "Muzzle attachment class name or \"\" if not needed",
                "sqf_type": "String"
            },
            {
                "name": "flashlight",
                "description": "Side rail attachment class name or \"\" if not needed",
                "sqf_type": "String"
            },
            {
                "name": "optics",
                "description": "Top rail attachment class name or \"\" if not needed",
                "sqf_type": "String"
            },
            {
                "name": "primaryMuzzleMagazine",
                "description": "Magazine class name",
                "sqf_type": "String"
            },
            {
                "name": "ammoCount",
                "description": "Ammo count in magazine (will be clipped in 0 and max mag capacity range)",
                "sqf_type": "Number"
            },
            {
                "name": "secondaryMuzzleMagazine",
                "description": "Magazine class name",
                "sqf_type": "String"
            },
            {
                "name": "ammoCount",
                "description": "Ammo count in magazine (will be clipped in 0 and max mag capacity range)",
                "sqf_type": "Number"
            },
            {
                "name": "bipod",
                "description": "Underbarrel rail attachment class name or \"\" if not needed",
                "sqf_type": "String"
            },
            {
                "name": "weaponsCount",
                "description": "Number of weapons to add",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "addonFiles",
        "description": "Returns a list of files present in the addon.<br>",
        "introduced_version": null,
        "syntax": "[[addonFiles]] [pboPrefix, fileExtension]",
        "parameters": [
            {
                "name": "pboPrefix",
                "description": "addon prefix available from [[allAddonsInfo]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "admin",
        "description": "This is dedicated server command, which queries the admin state of any client on the network by their client ([[owner]]) id. Possible results are:\n* <tt>1</tt> - client is admin that is [[server.cfg#Voted_In_Admin|voted in]]\n* <tt>2</tt> - client is admin that is [[server.cfg#Logged_In_Admin|logged in]]\nIn all other cases it returns 0. To self check the admin state of a local client, use [[BIS_fnc_admin]].",
        "introduced_version": null,
        "syntax": "'''admin''' ownerID",
        "parameters": [
            {
                "name": "ownerID",
                "description": "[[clientOwner]] id",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] - admin state of given client:\n* 0 - client is not an admin\n* 1 - client is admin that is voted in\n* 2 - client is admin that is logged in",
            "sqf_type": "Number"
        }
    },
    {
        "name": "agent",
        "description": "Return a person for a given agent.",
        "introduced_version": null,
        "syntax": "'''agent''' teamMember",
        "parameters": [],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "agents",
        "description": "Return a list of agents in the current mission.",
        "introduced_version": null,
        "syntax": "'''agents'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] of [[Team Member|Team Members]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "aimPos",
        "description": "Returns the position of the object other units can aim to.",
        "introduced_version": null,
        "syntax": "'''aimPos''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "aimedAtTarget",
        "description": "Returns how good the weapon of the vehicle is aimed at the target.",
        "introduced_version": null,
        "syntax": "vehicle '''aimedAtTarget''' [target, weapon]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "(optional)",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - 0...1",
            "sqf_type": "Number"
        }
    },
    {
        "name": "airDensityCurveRTD",
        "description": "Returns array with air density data.",
        "introduced_version": null,
        "syntax": "'''airDensityCurveRTD'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] with [[Array|arrays]]: Returns air density graph<br> \nEach array consists of:\n*0: Altitude (-60000 metres to 10^7 metres)\n*1: Air density",
            "sqf_type": "Array"
        }
    },
    {
        "name": "airDensityRTD",
        "description": "Returns air density in given altitude.",
        "introduced_version": null,
        "syntax": "[[airDensityRTD]] altitude",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "airplaneThrottle",
        "description": "Returns throttle position. Works only on player's vehicle.",
        "introduced_version": null,
        "syntax": "'''airplaneThrottle''' airplane",
        "parameters": [
            {
                "name": "airplane",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "airportSide",
        "description": "Gets the side of an airport, set by [[setAirportSide]]. Default side is [[sideUnknown]].",
        "introduced_version": null,
        "syntax": "[[airportSide]] id",
        "parameters": [
            {
                "name": "id",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "alive",
        "description": "Check if given vehicle/person/building is alive (i.e. not dead or destroyed).",
        "introduced_version": null,
        "syntax": "[[alive]] object",
        "parameters": [
            {
                "name": "object",
                "description": "to test",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if alive, [[false]] if dead/completely destroyed",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "all3DENEntities",
        "description": "Returns an array of all currently placed [[Eden Entity|Eden Editor entities]], including groups, waypoints, and markers in following format:",
        "introduced_version": null,
        "syntax": "'''all3DENEntities'''",
        "parameters": [],
        "returns": {
            "description": "[[Array of Eden Entities]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allActiveTitleEffects",
        "description": "Returns a list of all layers that have currently active title effect. Numbers equal to or greater than 0 represent cut layers, where as -1 represents title layer (see [[Title Effect Type]]). Named layers are represented by their respective index.<br><br>",
        "introduced_version": null,
        "syntax": "[[allActiveTitleEffects]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] of [[Number]]s, where each number represents index of currently active effect layer.",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allAirports",
        "description": "Returns all map airports, both static and dynamic",
        "introduced_version": null,
        "syntax": "'''allAirports'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - in format [staticAirports, dynamicAirports], where:\n* staticAirports [[Array]] of [[Number]]s - static airports IDs\n* dynamicAirports [[Array]] of [[Object]]s - dynamic airports objects (such as \"DynamicAirport_01_F\" found on aircraft carrier)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allControls",
        "description": "Returns a list of all controls for desired existing display. Returned controls also include controls from control groups",
        "introduced_version": null,
        "syntax": "'''allControls''' display",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Control]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allCurators",
        "description": "Returns list of all curator logic units, not the units assigned to the logic.",
        "introduced_version": null,
        "syntax": "'''allCurators'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allCutLayers",
        "description": "Returns all named layers used by [[cutRsc]], [[cutText]], [[cutObj]] or [[cutFadeOut]]. The layer normally would be added on the first use of any of the aforementioned commands, however if a layer needs to be reserved it could be done like so: <br><tt>_layerNum",
        "introduced_version": null,
        "syntax": "'''allCutLayers'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - array of [[Strings]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allDead",
        "description": "Return a list of all dead units including agents and destroyed vehicles. Dead units may be in vehicles.",
        "introduced_version": null,
        "syntax": "[[allDead]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allDeadMen",
        "description": "Return a list of dead units including agents. Dead unit might be inside vehicle.",
        "introduced_version": null,
        "syntax": "'''allDeadMen'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allDisplays",
        "description": "Returns a list of all opened GUI displays. Other displays, such as IGUI displays could be accessed via [[uiNamespace]] variable, which is updated every time display is opened or closed. For example, to access IGUI displays:\n<code>[[uiNamespace]] [[getVariable]] [\"IGUI_displays\", []];</code>. Other display variables:\n* <tt>3DENDisplays_displays</tt>\n* <tt>3DENDisplaysTemp_displays</tt>\n* <tt>GUI_displays</tt>\n* <tt>IGUI_displays</tt>\n* <tt>Loading_displays</tt>\n* <tt>CuratorDisplays_displays</tt>\n* <tt>BootcampDisplays_displays</tt>\n* <tt>CuratorTitles_displays</tt>\n* <tt>BootcampTitles_displays</tt>\n* <tt>KartDisplays_displays</tt>",
        "introduced_version": null,
        "syntax": "'''allDisplays'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] of GUI [[Display]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allGroups",
        "description": "Return a list of all groups created on the following sides [[east]], [[west]], [[resistance]]/[[independent]] and [[civilian]] only. Does not contain groups of [[sideLogic]].",
        "introduced_version": null,
        "syntax": "'''allGroups'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allMapMarkers",
        "description": "Returns all markers in map including user placed markers (_USER_DEFINED #). <br><br>\nSince Arma 3 v1.57.134377 User defined markers have the following name format: <br><tt>_USER_DEFINED #<PlayerID>/<MarkerID>/<ChannelID></tt> where:\n* <PlayerID> - unique network id of the player in [[String]] format, also available as [[String]] in the 6th param in [[Arma_3:_Event_Handlers/addMissionEventHandler#PlayerConnected | \"PlayerConnected\"]] and [[Arma_3:_Event_Handlers/addMissionEventHandler#PlayerDisconnected|\"PlayerDisconnected\"]] EHs \n* <MarkerID> - a marker counter id\n* <ChannelID> - id of the chat channel on which marker was placed (see [[currentChannel]])\nFor custom waypoint position (LShift+LMB) see [[customWaypointPosition]]",
        "introduced_version": null,
        "syntax": "'''allMapMarkers'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] of [[String]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allMines",
        "description": "Returns an array of all mines in the mission",
        "introduced_version": null,
        "syntax": "'''allMines'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allMissionObjects",
        "description": "Returns all mission objects (created by or during a mission) with given type (or its subtype). In some cases [[allMissionObjects]] could be substituted with [[entities]], which would be much much faster alternative. Some of the unusual mission objects that can be detected with this command (as well as with [[nearestObject]]):\n* <tt>\"#slop\"</tt> - blood drop\n* <tt>\"#mark\"</tt> - unit footprints\n* <tt>\"#track\"</tt> - vehicle tracks\n* <tt>\"#crater\"</tt> - explosion crater on the ground\n* <tt>\"#crateronvehicle\"</tt> - bullet marks on vehicle\n* <tt>\"#explosion\"</tt> - an explosion\n* <tt>\"#objectdestructed\"</tt> - building, tree or bush destruction\n* <tt>\"#soundonvehicle\"</tt> - sound created with [[say3D]] for example\n* <tt>\"#dynamicsound\"</tt> - sound source created using [[createSoundSource]]",
        "introduced_version": null,
        "syntax": "'''allMissionObjects''' type",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object|Objects]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allPlayers",
        "description": "Returns a list of all units controlled by ''connected clients'' - human players including dead players, but also [[Arma 3 Headless Client|Headless Clients]].<br>\nUse [[BIS_fnc_listPlayers]] or see '''[[#Examples|Example 1]]''' to get human players only.",
        "introduced_version": null,
        "syntax": "[[allPlayers]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] of [[Object]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allSimpleObjects",
        "description": "Returns array of all simple objects that belong to the listed class names. If the array of types is empty [], all simple objects are returned including those without class name.<br><br>",
        "introduced_version": null,
        "syntax": "[[allSimpleObjects]] classes",
        "parameters": [
            {
                "name": "classes",
                "description": "of [[String]]s - classnames array. Use <tt>[]</tt> to return all simple objects",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of [[createSimpleObject|simple objects]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allSites",
        "description": "Return all sites in map.",
        "introduced_version": null,
        "syntax": "'''allSites'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allTurrets",
        "description": "Returns array of available turret paths from vehicle object.",
        "introduced_version": null,
        "syntax": "[[allTurrets]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "includeFFV",
                "description": "[[true]] to include FFV (Firing From Vehicle) positions, [[false]] to exclude them",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allUnits",
        "description": "Return a list of all units (all persons except agents) outside and inside vehicles, created on the following sides [[east]], [[west]], [[resistance]]/[[independent]] and [[civilian]] only. Does not contain units of [[sideLogic]]. Dead units and units awaiting for respawn are also excluded.",
        "introduced_version": null,
        "syntax": "'''allUnits'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allUnitsUAV",
        "description": "Return a list of all UAV vehicles.",
        "introduced_version": null,
        "syntax": "[[allUnitsUAV]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] of [[Object]]s - Array of UAV vehicles",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allVariables",
        "description": "Returns a list of all variables from desired namespace. Namespaces supported:<br>\n*[[Control]] - ''Since",
        "introduced_version": null,
        "syntax": "'''allVariables''' namespace",
        "parameters": [
            {
                "name": "namespace",
                "description": "(''Since",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s - array of variable names. All names are in lower case (see [[toLower]])",
            "sqf_type": "Array"
        }
    },
    {
        "name": "allow3DMode",
        "description": "Allow/dissallow 3D mode.,",
        "introduced_version": null,
        "syntax": "map '''allow3DMode''' bool",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "bool",
                "description": "-",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "allowCrewInImmobile",
        "description": "If true, units can be in a vehicle with broken tracks/wheels.",
        "introduced_version": null,
        "syntax": "vehicle '''allowCrewInImmobile''' bool",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "allowCuratorLogicIgnoreAreas",
        "description": "Allows curator placing and working with modules outside of edit areas.",
        "introduced_version": null,
        "syntax": "curatorObj '''allowCuratorLogicIgnoreAreas''' allow",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "allow",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "allowDamage",
        "description": "Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as [[setHit]], [[setHitIndex]], [[setHitPointDamage]] or [[setDamage]]. To check if damage is allowed at current locality, see [[isDamageAllowed]].<br>",
        "introduced_version": null,
        "syntax": "object [[allowDamage]] allow",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "allow",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "allowDammage",
        "description": "Allow or prevent an object being damaged (or injured, or killed). Alias of [[allowDamage]].<br>\nThe command does not prevent object from taking scripted damage such as [[setDamage]] or [[setHit]].<br>",
        "introduced_version": null,
        "syntax": "object [[allowDammage]] allow",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "allow",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "allowFileOperations",
        "description": "Allow/dissallow file ops (load/save etc).",
        "introduced_version": null,
        "syntax": "map '''allowFileOperations''' bool",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "bool",
                "description": "-",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "allowFleeing",
        "description": "Sets the cowardice level (the lack of courage or bravery) of a group or unit.\n<br><br>\nNotes:\n* The more cowardice a [[Group]] or [[Object]] has, the sooner it will start fleeing.\n* 0 means maximum courage, while 1 means always fleeing.\n* More details in [[fleeing]]",
        "introduced_version": null,
        "syntax": "name '''allowFleeing''' cowardice",
        "parameters": [
            {
                "name": "name",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "cowardice",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "allowGetIn",
        "description": "Set if the units given in the list are allowed to enter vehicles.",
        "introduced_version": null,
        "syntax": "unitArray '''allowGetIn''' allow",
        "parameters": [
            {
                "name": "unitArray",
                "description": "of [[units]]",
                "sqf_type": "Array"
            },
            {
                "name": "allow",
                "description": "true allows the [[units]] to enter, false denies them",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "allowSprint",
        "description": "Force player to run/jog if set to false.",
        "introduced_version": null,
        "syntax": "unit '''allowSprint''' state",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "state",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ammo",
        "description": "Check how many rounds are left in the currently loaded magazine in the given muzzle. Since Arma v1.55.133505 the command also returns ammo for units in vehicles.",
        "introduced_version": null,
        "syntax": "unit '''ammo''' muzzle",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "muzzle",
                "description": "muzzle of a weapon. See the topic [[:Category:Weapons]] for reference about possible values.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ammoOnPylon",
        "description": "Returns ammo count on given pylon.\nReturns false ([[Boolean]]) on failure.",
        "introduced_version": null,
        "syntax": "vehicle '''ammoOnPylon''' pylon",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pylon",
                "description": "or [[Number]] - The name or the index of the pylon",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] or [[Boolean]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "and",
        "description": "Returns [[true]] only if both conditions are [[true]]. In case of the alternative syntax, [http://en.wikipedia.org/wiki/Lazy_evaluation#Control_structures lazy evaluation] is used (if left operand is [[false]], evaluation of the right side is skipped completely).",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "a",
                "description": "Test condition or variable that returns [[Boolean]].",
                "sqf_type": "Boolean"
            },
            {
                "name": "b",
                "description": "Test condition or variable that returns [[Boolean]].",
                "sqf_type": "Boolean"
            },
            {
                "name": "a",
                "description": "Test condition or variable that returns [[Boolean]].",
                "sqf_type": "Boolean"
            },
            {
                "name": "b",
                "description": "Code that returns [[Boolean]]. It is not evaluated if '''a''' returns as [[false]].",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "animate",
        "description": "Activates given object animation. Animation is defined in CfgModels [[Model Config#Animations|animations]] class.<br>\nSince",
        "introduced_version": null,
        "syntax": "objectName [[animate]] [animationName, phase, speed]",
        "parameters": [
            {
                "name": "objectName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "animationName",
                "description": "name of the animation. This is the class-name of the animation defined in the config.",
                "sqf_type": "String"
            },
            {
                "name": "phase",
                "description": "range 0 (start point of the animation) to 1 (end point of the animation). The speed, in which the animation is processed, is defined in the addon's config.cpp and cannot be changed during running missions.",
                "sqf_type": "Number"
            },
            {
                "name": "speed",
                "description": "or [[Number]] - When [[true]] animation is instant. Since",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "animateBay",
        "description": "Force animation of bay to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when bay state",
        "introduced_version": null,
        "syntax": "vehicle '''animateBay''' [bay, animphase, instant]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bay",
                "description": "bay index (index starts from 1 and different from pylon index)",
                "sqf_type": "Number"
            },
            {
                "name": "animphase",
                "description": "animation phase (0...1)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "animateDoor",
        "description": "Animates a door on a vehicle. Animation is defined in config file in [[CfgVehicles]] -> [[Model_Config#AnimationSources| AnimationSources]]. Wanted animation phase is set with phase param. This command works only on animation sources with \"door\" controller. Door_L in the example below can be animated with [[animateDoor]] but not CargoRamp_Open: <tt>heli [[animateDoor]] [\"Door_L\", 1];</tt><br><br>",
        "introduced_version": null,
        "syntax": "object '''animateDoor''' [doorname, phase, instant]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "doorname",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "phase",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "instant",
                "description": "(When [[true]] and phase is either 0 or 1, door will change phase instantaneously)",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "animatePylon",
        "description": "Force animation of pylon to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released  when pylon state",
        "introduced_version": null,
        "syntax": "vehicle '''animatePylon''' [pylon, animphase, instant]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pylon",
                "description": "or [[String]] - pylon index (index starts from 1) or pylon name (see [[getCompatiblePylonMagazines]] Example 4)",
                "sqf_type": "Number"
            },
            {
                "name": "animphase",
                "description": "animation phase (0...1)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "animateSource",
        "description": "Process an animation of the object. If [[animate]] uses class name from [[CfgModels]] ''Animations'', [[animateSource]] uses name defined by ''source'' property. This allows to use just one command on a bunch of animations related to the same source simultaneously. Since Arma 3 v1.65.138459 speed of animation can be altered with coefficient.\n<br><br>\nA class with the same source name should also be present in main config in [[CfgVehicles]] ''AnimationSources'' and have to be bound to the \"user\" controller for the command to work. If in order to animate door in example below using [[animate]] command it would require 2 calls:\n<br><br>\n<tt>house [[animate]] [\"Door_1_rot\", 1];</tt>\n<br>\n<tt>house [[animate]] [\"Door_Handle_1_rot\", 1];</tt>\n<br><br>\nWith [[animateSource]] this would require only 1 (provided everything is configured correctly):\n<br><br>\n<tt>house [[animateSource]] [\"Door_1_sound_source\", 1];</tt>\n<br><br>",
        "introduced_version": null,
        "syntax": "object '''animateSource''' [source, phase, speed]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "source",
                "description": "common source",
                "sqf_type": "String"
            },
            {
                "name": "phase",
                "description": "wanted animation phase",
                "sqf_type": "Number"
            },
            {
                "name": "speed",
                "description": "or [[Number]] - When [[true]] animation is instant. Since Arma 3 v1.65.138459 [[Number]] > 0 is treated as config speed value multiplier",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "animationNames",
        "description": "Returns [[Array]] of [[Strings]] where elements are the names of model animations, which should theoretically be available for use with [[animate]] command. However in practice this depends on whether animation is also made available for use in scripts via config.",
        "introduced_version": null,
        "syntax": "'''animationNames''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Strings]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "animationPhase",
        "description": "Returns the phase of the given animation on the given object. Animation can be scripted ([[animate]], [[animateSource]], [[animateDoor]]) or engine driven. Animation names for an object could be found out with [[animationNames]] command. When animation is rotation, like with \"MainTurret\" for example, the output is in radians, to convert to degrees use [[deg]] command.",
        "introduced_version": null,
        "syntax": "object '''animationPhase''' animationName",
        "parameters": [
            {
                "name": "object",
                "description": "building eg",
                "sqf_type": "Object"
            },
            {
                "name": "animationName",
                "description": "name of the animation. This is the class-name of the animation defined in the addon's config.cpp.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - range 0 (start point of the animation) to 1 (end point of the animation).",
            "sqf_type": "Number"
        }
    },
    {
        "name": "animationSourcePhase",
        "description": "Returns current animation phase of given source. Similar to [[animationPhase]] or [[doorPhase]] but designed to complement [[animateSource]]. This command could be used to obtain relative turret direction and gun elevation on a vehicle (see Example 2)",
        "introduced_version": null,
        "syntax": "object '''animationSourcePhase''' source",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "source",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "animationState",
        "description": "Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3.<br>",
        "introduced_version": null,
        "syntax": "'''animationState''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "append",
        "description": "Appends array2 to the back of array1 modifying array1. <br>",
        "introduced_version": null,
        "syntax": "array1 '''append''' array2",
        "parameters": [
            {
                "name": "array1",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "array2",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "apply",
        "description": "Applies given code to each element of the array and returns resulting array. The value of the current array element, to which the code will be applied, is stored in variable [[_x]].",
        "introduced_version": null,
        "syntax": "array '''apply''' code",
        "parameters": [
            {
                "name": "array",
                "description": "array of [[Anything]]",
                "sqf_type": "Array"
            },
            {
                "name": "code",
                "description": "code to be executed on each element of the array. Current element value is stored in variable [[_x]]",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Array]] - resulting array",
            "sqf_type": "Array"
        }
    },
    {
        "name": "armoryPoints",
        "description": "Returns, stored in [USERNAME].ArmaXProfile, value of ''armoryPoints'' entry. If the entry doesn't exist, it returns 0.",
        "introduced_version": null,
        "syntax": "'''armoryPoints'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "arrayIntersect",
        "description": "Intersects array1 with array2 returning array of unique common elements. Additionally, using the same array for array1 and array2 will simply return array of unique elements. Intersects only 1st dimension of an array.",
        "introduced_version": null,
        "syntax": "array1 '''arrayIntersect''' array2",
        "parameters": [
            {
                "name": "array1",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "array2",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "asin",
        "description": "Arcsine of a number, result in [[Number#Degrees|Degrees]].",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "assert",
        "description": "Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .rpt file. It does not interrupt the script execution.\n\nIf script was pre-processed with [[preprocessFileLineNumbers]], it will also show/log the error line number and the file name.",
        "introduced_version": null,
        "syntax": "'''assert''' condition",
        "parameters": [
            {
                "name": "condition",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - mirrors condition",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "assignAsCargo",
        "description": "Assign a unit as cargo of a vehicle. Used together with [[orderGetIn]] to order a unit to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the cargo space of the vehicle.",
        "introduced_version": null,
        "syntax": "unitName [[assignAsCargo]] vehicleName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "assignAsCargoIndex",
        "description": "Assigns the character to a specific cargo / passenger index of the given vehicle.",
        "introduced_version": null,
        "syntax": "character '''assignAsCargoIndex''' [vehicle, index]",
        "parameters": [
            {
                "name": "character",
                "description": "character to assign",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "vehicle to assign to",
                "sqf_type": "Object"
            },
            {
                "name": "index",
                "description": "cargo / passenger index",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "assignAsCommander",
        "description": "Assign a unit as commander of a vehicle. Used together with [[orderGetIn]] to order subordinate units to get in as commander of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the commander place of the vehicle.",
        "introduced_version": null,
        "syntax": "unitName '''assignAsCommander''' vehicleName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "assignAsDriver",
        "description": "Assign a unit as driver of a vehicle. Used together with [[orderGetIn]] to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the driver place of the vehicle.",
        "introduced_version": null,
        "syntax": "unitName '''assignAsDriver''' vehicleName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "assignAsGunner",
        "description": "Assign a unit as gunner of a vehicle. Used together with [[orderGetIn]] to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit hasn't got the option to get into the gunner place of the vehicle.",
        "introduced_version": null,
        "syntax": "unitName '''assignAsGunner''' vehicleName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "assignAsTurret",
        "description": "Assigns the soldier to turret.",
        "introduced_version": null,
        "syntax": "unit '''assignAsTurret''' [vehicle, [turretPath]]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "assignCurator",
        "description": "Assign player as curator. Two players cannot act as one curator.",
        "introduced_version": null,
        "syntax": "player '''assignCurator''' curatorObj",
        "parameters": [
            {
                "name": "player",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "assignItem",
        "description": "Assigns existing item from inventory (uniform, vest, backpack) to a correct slot. If the slot is occupied by another item, it gets replaced.",
        "introduced_version": null,
        "syntax": "unit '''assignItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "assignTeam",
        "description": "Assigns the unit (in case of a vehicle, its commander) to the given team. Team is an option in group control (unit management) menu that allows to split player group in teams and then give bulk order to separate teams. In order to operate properly, the command requires specific conditions:\n* The command requires [[player]] to be fully initialised\n* The unit getting assigned must be either player himself or a unit in player's group\n* Units in player's group as well as player himself can all have different teams assigned\n* The colour of the assigned team for a unit is seen on the group management UI as well as squad radar\nThe possible team values (colours) are: \n* \"MAIN\" - (white)\n* \"RED\" - (red)\n* \"GREEN\" - (green)\n* \"BLUE\" - (blue)\n* \"YELLOW\"  - (yellow)\n'''NOTE''': In older version of the game the effect of this command is local",
        "introduced_version": null,
        "syntax": "unit '''assignTeam''' team",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "team",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "assignedCargo",
        "description": "Returns the list of soldiers assigned to the given vehicle as a cargo.",
        "introduced_version": null,
        "syntax": "'''assignedCargo''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "assignedCommander",
        "description": "Returns the soldier assigned to the given vehicle as a commander.",
        "introduced_version": null,
        "syntax": "'''assignedCommander''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "assignedDriver",
        "description": "Returns the soldier assigned to the given vehicle as a driver.",
        "introduced_version": null,
        "syntax": "'''assignedDriver''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "assignedGunner",
        "description": "Returns the soldier assigned to the given vehicle as a gunner.",
        "introduced_version": null,
        "syntax": "'''assignedGunner''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "assignedItems",
        "description": "Get array with all assigned items. The resulting Array is sorted like: [<Map>, <Compass>, <Watch>, <Radio>, <GPS>, <NVG>, <Binoculars>]. But if something is missing it get's omitted so you can not be sure that some element is at a constant index. To return stored items see [[items]] and [[itemsWithMagazines]].",
        "introduced_version": null,
        "syntax": "'''assignedItems''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "assignedTarget",
        "description": "Returns the target assigned to an unit or the vehicle's [[effectiveCommander]]. The target can be assigned by the group/vehicle/formation leader (as player via [[Arma 3 Field Manual - Commanding#Target_Assignment|quick command menu]] or [[Operation Flashpoint: Commander Guide#TARGET .282.29|\"target\" complex command menu]]).<br>\nTo unassign the target use [[doWatch]] [[objNull]] or [[commandWatch]] [[objNull]] or as player and group leader order \"no target\" in the [[Operation Flashpoint: Commander Guide#TARGET .282.29|\"target\" complex command menu]].",
        "introduced_version": null,
        "syntax": "'''assignedTarget''' vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "assignedTeam",
        "description": "Returns the team the unit belongs to. Possible values:\n\n* <tt>\"MAIN\"</tt> (default and white)\n* <tt>\"RED\"</tt>\n* <tt>\"GREEN\"</tt>\n* <tt>\"BLUE\"</tt>\n* <tt>\"YELLOW\"</tt>\n* <tt>\"\"</tt> if given unit is [[objNull]] or [[remoteControl]]ing another unit(Since Arma 3 v1.93.145625)",
        "introduced_version": null,
        "syntax": "'''assignedTeam''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] (or, prior to Arma 3 v1.93.145625, [[Nothing]] if given unit is [[objNull]] or [[remoteControl]]ing another unit)",
            "sqf_type": "String"
        }
    },
    {
        "name": "assignedVehicle",
        "description": "Returns the vehicle an unit is assigned to. If no vehicle is assigned [[objNull]] is returned.\n<br><br>\nNotes:\n* The assignment happens via the various assignAsXXX/moveInXXX commands, or player/AI GL getIn radio commands, getIn waypoint, or when units start in vehicles or get moved in to a vehicle by Zeus/via Eden.\n* [[addVehicle]] indirectly may also add the vehicle, however only if an AI GL assigns [[assignedVehicleRole|vehicle roles]] (which depends on various things).\n* [[vehicle]] returns the current vehicles an AI is in, while with [[assignedVehicle]] the AI may not (yet) be in the said vehicle (still in transit or held of by waypoints or other SQF commands).\n* To make AI under AI GL enter a vehicle, use [[orderGetIn]] [[true]].\n* While [[unassignVehicle]] works, if the group is under AI command, the AI GL may re-assign the vehicle immediately. To stop the AI from re-entering at least, use [[orderGetIn]] or [[allowGetIn]] [[false]], or permanently remove the assignment vi a [[leaveVehicle]].\n* For player GL lead AI [[assignedVehicle]] seems not to be really reliable/behaves strange. Disembark radio command seems to [[unassignVehicle|unassign]] though.",
        "introduced_version": null,
        "syntax": "[[assignedVehicle]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "assignedVehicleRole",
        "description": "Returns the role a unit is assigned to within its assigned vehicle.\n\n<br><br>\n'''Notes:'''\n* When an unit enters a vehicle crew position, it gets assigned the vehicle role automatically for the given crew position.\n* The unit does not have to be in the vehicle when getting the role assignment (ie via assignAsXXX or human/AI GL getIn radio commands).\n* GL getIn radio commands result in instant assignment - the unit does not yet have to occupy the crew position.\n* Dying units will let go of the assigned role after a few seconds - seems the delay is independent of being in the vehicle or not.\n* An unit will hold on to its assigned role after exiting the vehicle.\n* One has to use [[unassignVehicle]] (and stop an AI GL to assign vehicle positions again) or [[leaveVehicle]] to remove the assignment - or assigned to another vehicle.\n* A vehicle position/role can only be assigned to one unit at a time. So even when not (visually) occupied, the \"seat\" may be blocked/reserved by another unit. \n* A player can still get into the vehicle position already assigned if not already taken, or switch seats with AI (if [[leader]] or [[effectiveCommander]] for those AI).",
        "introduced_version": null,
        "syntax": "'''assignedVehicleRole''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - The array which is returned contains:<br>\n* [] - Not assigned to any vehicle\n* [\"driver\"] - Assigned as driver\n* [\"cargo\"] (or [\"cargo\", [turret path]] since Arma 3 1.31.127272) - Assigned as cargo\n* [\"turret\", [turret path]] - Assigned to a turret",
            "sqf_type": "Array"
        }
    },
    {
        "name": "atan",
        "description": "ArcTangent of a number, result in [[Number#Degrees|Degrees]].",
        "introduced_version": null,
        "syntax": "'''atan''' x",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]\n\n<br><br>[[Image:atan.jpg|200px]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "atan2",
        "description": "ArcTangent of ''x/y''. Used to determine the angle of a vector ''[x,y]''. Result in [[Number#Degrees|Degrees]] between -180 and 180.\n<br><br>",
        "introduced_version": null,
        "syntax": "x '''atan2''' y",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "y",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] \n\n<br><br>[[Image:atan.jpg|200px]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "atg",
        "description": "Equivalent to [[atan]].<br><br>[[Image:atan.jpg|200px]]",
        "introduced_version": null,
        "syntax": "[[atg]] x",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "attachObject",
        "description": "Attaches a location to the specified object. To detach a location, attach it to [[objNull]].",
        "introduced_version": null,
        "syntax": "location '''attachObject''' object",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "attachTo",
        "description": "Attaches an object to another object.\n* The offset is applied to the object center unless a memory point is provided, in which case the offset will be applied to the memory point position.\n* If no offset is specified, the current offset between the two objects will be used.",
        "introduced_version": null,
        "syntax": "object1 [[attachTo]] [object2, offset, memPoint, followBoneRotation]",
        "parameters": [
            {
                "name": "object1",
                "description": "object to attach",
                "sqf_type": "Object"
            },
            {
                "name": "object2",
                "description": "object to attach to",
                "sqf_type": "Object"
            },
            {
                "name": "offset",
                "description": "(Optional) format [[PositionRelative]]",
                "sqf_type": "Array"
            },
            {
                "name": "memPoint",
                "description": "(Optional) see [[ArmA: Selection Translations]] for czech selections names",
                "sqf_type": "String"
            },
            {
                "name": "followBoneRotation",
                "description": "(Optional) Follows the memory point's rotation if the object is attached to an memory point",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "attachedObject",
        "description": "Returns the object a location is attached to. If the location is unattached, then [[objNull]] is returned.",
        "introduced_version": null,
        "syntax": "'''attachedObject''' location",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "attachedObjects",
        "description": "Returns a list of objects attached to the given object.",
        "introduced_version": null,
        "syntax": "'''attachedObjects''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "given object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object]]s attached to the given object",
            "sqf_type": "Array"
        }
    },
    {
        "name": "attachedTo",
        "description": "Returns object the given object is attached to or [[objNull]] if the given object is not attached to anything.",
        "introduced_version": null,
        "syntax": "'''attachedTo''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "given object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - object the given object is attached to",
            "sqf_type": "Object"
        }
    },
    {
        "name": "attackEnabled",
        "description": "Return whether a group's leader can issue attack commands to soldiers under his command.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "name",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "backpack",
        "description": "Returns a class of a backpack.",
        "introduced_version": null,
        "syntax": "[[backpack]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "backpackCargo",
        "description": "Get array with backpacks from ammo box (or any general weapon holder container).",
        "introduced_version": null,
        "syntax": "[[backpackCargo]] box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - Format: [\"BackpackType1\", \"BackpackType1\", \"BackpackType2\", ...]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "backpackContainer",
        "description": "Returns a cargo container of a unit's backpack.",
        "introduced_version": null,
        "syntax": "[[backpackContainer]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "a soldier",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - cargo container or [[objNull]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "backpackItems",
        "description": "Get array with all items (of any kind, even weapons) in backpack of the given unit.",
        "introduced_version": null,
        "syntax": "[[backpackItems]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "backpackMagazines",
        "description": "Get array with all magazines from backpack of the given unit.",
        "introduced_version": null,
        "syntax": "'''backpackMagazines''' unit",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "backpackSpaceFor",
        "description": "Returns how much space is in backpack for given weapon or magazine",
        "introduced_version": null,
        "syntax": "backpack [[backpackSpaceFor]] weaponName",
        "parameters": [
            {
                "name": "backpack",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "behaviour",
        "description": "Returns the behaviour of the unit's [[group]]. For Arma 3 behaviour explanation see [[Arma_3_AI_Behavior]]",
        "introduced_version": null,
        "syntax": "'''behaviour''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] -  \nOne of:\n*\"CARELESS\"\n*\"SAFE\"\n*\"AWARE\"\n*\"COMBAT\"\n*\"STEALTH\"\n*\"ERROR\" (Since",
            "sqf_type": "String"
        }
    },
    {
        "name": "benchmark",
        "description": "Returns the value of \"3D Performance\" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "bezierInterpolation",
        "description": "Gets interpolated value based on [https://en.wikipedia.org/wiki/B\u00e9zier_curve B\u00e9zier curve] with given control points (progress value is 0...1 for a curve that starts at pos0 and finishes at posN) <br>\n[[Image:bezierInterpolation2.jpg|400px]]",
        "introduced_version": null,
        "syntax": "progress [[bezierInterpolation]]",
        "parameters": [
            {
                "name": "progress",
                "description": "interpolation value",
                "sqf_type": "Number"
            },
            {
                "name": "pos",
                "description": "in format [[Position3D]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - a single point position in format [[Position3D]] based on progress value",
            "sqf_type": "Array"
        }
    },
    {
        "name": "binocular",
        "description": "Returns class name of currently used binocular weapon.",
        "introduced_version": null,
        "syntax": "'''binocular''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "blufor",
        "description": "Pre-defined variable for the blufor [[Side|side]].\n<br>Alias for [[west]].",
        "introduced_version": null,
        "syntax": "'''blufor'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "boundingBox",
        "description": "[[Image:Boundingbox.jpg|right|200px]] Returns a bounding box of given object in model coordinate space, adjusted according to destruction/animation of an object. This command is rather generous on the size estimation, for more precise coordinates use [[boundingBoxReal]].",
        "introduced_version": null,
        "syntax": "[[boundingBox]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - An array with the extreme points of the model in format [[PositionRelative]], as well as bounding box sphere diameter.<br>Format [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "boundingBoxReal",
        "description": "[[Image:Boundingbox.jpg|right|200px]] Returns a raw bounding box of given object in model coordinates space. This command is similar to [[boundingBox]] but gives more precise measurements.<br>\nAn alternative syntax was introduced with",
        "introduced_version": null,
        "syntax": "[[boundingBoxReal]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - the extreme points of the model in format [[PositionRelative]], as well as bounding box sphere diameter, to format [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "boundingCenter",
        "description": "Returns the position of original (loaded) center of object in model coordinates.",
        "introduced_version": null,
        "syntax": "'''boundingCenter''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [[PositionRelative]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "breakOut",
        "description": "Breaks the code execution out of scope {} named ''name''. [[nil]] is returned. Scope name can be assigned using [[scopeName]] command.",
        "introduced_version": null,
        "syntax": "'''breakOut''' name",
        "parameters": [
            {
                "name": "name",
                "description": "name of the scope (previously set with [[scopeName]])",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "a value to return",
                "sqf_type": "Anything"
            },
            {
                "name": "name",
                "description": "name of the scope (previously set with [[scopeName]])",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "breakTo",
        "description": "Breaks block to scope named '''name'''. Nil is returned.\n\nScope name can be assigned using [[scopeName]] command.",
        "introduced_version": null,
        "syntax": "'''breakTo''' name",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "briefingName",
        "description": "Returns the name of the current briefing/scenario name.",
        "introduced_version": null,
        "syntax": "'''briefingName'''",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "buildingExit",
        "description": "Returns the given indexed exit in a building. The returned value is in format Position.",
        "introduced_version": null,
        "syntax": "building '''buildingExit''' index",
        "parameters": [
            {
                "name": "building",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Position]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "buildingPos",
        "description": "Returns [[PositionAGL]] of a given indexed position in a [[Object#Building|building]]. The index is 0-based (i.e. the first possible position would be 0. So if a building has 5 positions listed in the editor, 4 would be the highest position index usable with this command). Command will return [0,0,0] if buildingPos with given index is non-existent. <br><br>\nSince Arma 3 v.155.133934 if index -1 is supplied, the command will return array with all available positions.",
        "introduced_version": null,
        "syntax": "building '''buildingPos''' index",
        "parameters": [
            {
                "name": "building",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "index",
                "description": "index of a specific position or -1 to return available all positions",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - a single building position in format [[PositionAGL]] or (''since Arma 3 v.155.133934'') [[Array]] of all building positions in format [[PositionAGL]] if index is -1",
            "sqf_type": "Array"
        }
    },
    {
        "name": "buttonAction",
        "description": "Return the action assigned to a control of the currently active user dialog. Can be used for buttons and active texts. Read [[Arma: GUI Configuration]] for more information about user dialogs and controls.",
        "introduced_version": null,
        "syntax": "'''buttonAction''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": ". index of button",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "buttonSetAction",
        "description": "Set the action of a control of the currently active user dialog. The script statement is executed on button release and <tt>_this</tt> is available, but contains \"\"; See [[Arma: GUI Configuration]] for more information about user dialogs. Works with:\n* CT_BUTTON\n* CT_XBUTTON\n* CT_ACTIVETEXT\n* CT_SHORTCUTBUTTON",
        "introduced_version": null,
        "syntax": "'''buttonSetAction''' [idc, action]",
        "parameters": [
            {
                "name": "idc",
                "description": "control ID",
                "sqf_type": "Number"
            },
            {
                "name": "action",
                "description": "[[SQS]] code body that should be executed when the button/active text is clicked",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "button control",
                "sqf_type": "Control"
            },
            {
                "name": "action",
                "description": "[[SQS]] code body that should be executed when the button/active text is clicked",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "cadetMode",
        "description": "Returns if the player is currently playing in cadet or veteran mode. <br><br>",
        "introduced_version": null,
        "syntax": "'''cadetMode'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] - true when playing in cadet mode, false when playing in veteran mode",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "calculatePath",
        "description": "Spawns an agent that will execute an AI path calculation and fire the <tt>\"PathCalculated\"</tt> [[Arma_3:_Event_Handlers#PathCalculated | event handler]]. The vehicle type to simulate could be one of the following presets:\n* <tt>\"man\"</tt> (will use \"C_man_1\")\n* <tt>\"car\"</tt> (will use \"C_Offroad_01_F\")\n* <tt>\"tank\"</tt> (will use \"B_MBT_01_cannon_F\")\n* <tt>\"wheeled_APC\"</tt> (will use \"B_APC_Tracked_01_rcws_F\")\n* <tt>\"boat\"</tt> (will use \"C_Rubberboat\")\n* <tt>\"plane\"</tt> (will use \"B_Plane_CAS_01_dynamicLoadout_F\")\n* <tt>\"helicopter\"</tt> (will use \"B_Heli_Light_01_F\")\nIf the given vehicle type is not one of the above presets, the exact given type is used.",
        "introduced_version": null,
        "syntax": "[[calculatePath]] [type, behaviour, from, to]",
        "parameters": [
            {
                "name": "type",
                "description": "Vehicle type to simulate (see description)",
                "sqf_type": "String"
            },
            {
                "name": "behaviour",
                "description": "AI [[behaviour]], one of \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" or \"STEALTH\"",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "Start position in format [x,y,z]",
                "sqf_type": "Array"
            },
            {
                "name": "to",
                "description": "End position in format [x,y,z]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Object]] - The agent to [[addEventHandler|add]] the [[Arma 3: Event Handlers#PathCalculated|<tt>\"PathCalculated\"</tt> Event Handler]] to.",
            "sqf_type": "Object"
        }
    },
    {
        "name": "calculatePlayerVisibilityByFriendly",
        "description": "Friendly units will / will not calculate visibility of player. Default [[false]].",
        "introduced_version": null,
        "syntax": "[[calculatePlayerVisibilityByFriendly]] calculate",
        "parameters": [
            {
                "name": "calculate",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "call",
        "description": "Adds given set of compiled instructions to the current stack and waits for it to finish and return, provides an option to pass arguments to the executed [[Code]].<br><br>",
        "introduced_version": null,
        "syntax": "[[call]] code",
        "parameters": [
            {
                "name": "code",
                "description": "[[compile]]d instructions",
                "sqf_type": "Code"
            },
            {
                "name": "args",
                "description": " Arguments that are passed to the function in the [[_this]] variable",
                "sqf_type": "Anything"
            },
            {
                "name": "code",
                "description": "[[compile|compiled]] instructions",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Anything]] - The last value given in the function is returned. See the topic [[Function#Return_Values|Function]] for more information.",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "callExtension",
        "description": "Calls custom .dll also known as [[Extensions|Extension]]. The name of the extension is the name of the extension .dll without \".dll\" part (or without \"_x64.dll\" part on 64-bit Arma). For example if the file is 'myExtension.dll' the name of the extension will be \"myExtension\". For 64-bit extensions, the name of the extension doesn't need to change and is still \"myExtension\". The game will automatically look for 'myExtension_x64.dll' when you use 64-bit Arma exe.\n<br><br>\nThis command is blocking, meaning that the game will wait for the extension to return before continuing. This may cause FPS drop if extension is not optimised. If extension takes too long, consider making asynchronous extension, where the result of the work of the extension is collected in a separate call.\n<br><br>\nCurrently there is no limit how much data you can send to the extension. However there is a limit on how much data you can return from extension in one call. The limit is known to the extension and is passed in <tt> int outputSize</tt>. The limit may or may not change in the future and is currently 10240 bytes. It is up to extension designer to handle multipart results if returned data exceeds output limit.\n<br><br>\nSince Arma 3 v1.67 it is possible to pass array of arguments to extensions. The array of arguments could be anything and all elements will be converted to strings, however you might want to only send simple types like [[Boolean]]s, [[String]]s, [[Number]]s and [[Array]]s of all of the above. There is currently a limit on how many arguments can be sent and it is 2048 (since Arma 3 v1.92; previous limit: 1024). However an argument could be an [[Array]] itself, in this case extension maker will have to provide additional methods for parsing such arguments.\n<br><br>\nPossible error codes:\n* 101: SYNTAX_ERROR_WRONG_PARAMS_SIZE\n* 102: SYNTAX_ERROR_WRONG_PARAMS_TYPE\n* 201: PARAMS_ERROR_TOO_MANY_ARGS\n* 301: EXECUTION_WARNING_TAKES_TOO_LONG\nEach error will have entry in .rpt file with more details.<br><br>\n\nThe extension execution timeout, after which <tt>301: EXECUTION_WARNING_TAKES_TOO_LONG</tt> warning is issued, is hardcoded on clients and is 1000.0 milliseconds (1 second). On the server the default limit is also 1 second, however it is possible to set custom limit with <tt>callExtReportLimit</tt> param (see [[server.cfg#Server_Options | Server Options]]).\n<br><br>\nIf an extension with the given name can't be found (or it is found but doesn't implement the required interface properly / at all) the following error will be written into the RPT (In this example the given dll-name was \"MyExtension\"):\n<code>14:27:07 CallExtension 'MyExtension' could not be found</code>\n<br>\nIf an extension is not whitelisted with BattlEye (see [[Extensions]] for more info) it will be blocked on clients running with enabled BattlEye protection. RPT message outputted however is a little obscure:\n<code>21:35:04 Call extension 'MyExtension' could not be loaded: Insufficient system resources exist to complete the requested service</code>\n<br>\nSince Arma 3 v1.69, <tt>RVExtensionVersion</tt> interface (see source code example below) has been added, which is called by the engine on extension load and expects extension version. This interface is designed to work with both, Linux and Windows. The max buffer size is 32 bytes. The version information will then appear in .[[rpt]] file like so:\n<code>19:06:36 CallExtension loaded: test_extension (.\\test_extension.dll) [1.0.0.1]</code>\n<br>\nFor more information see [[Extensions]].\n<br><br>\n<u>Linux specific</u><br>\nWhile on Windows the extension name is case-insensitive, on Linux the extension name is case-sensitive and should match the name of the .so file exactly (minus \".so\" part). Currently only 32-bit extensions are supported on Linux.<br><br>",
        "introduced_version": null,
        "syntax": "extension '''callExtension''' function",
        "parameters": [
            {
                "name": "extension",
                "description": "extension name",
                "sqf_type": "String"
            },
            {
                "name": "function",
                "description": "data sent to the extension",
                "sqf_type": "String"
            },
            {
                "name": "extension",
                "description": "extension name",
                "sqf_type": "String"
            },
            {
                "name": "function",
                "description": "extension function identifier",
                "sqf_type": "String"
            },
            {
                "name": "arguments",
                "description": "function arguments. Could be array of [[Anything]], each element will be converted to [[String]] automatically. Current allowed max length of this array is 2048 (since Arma 3 v1.92; previous limit: 1024)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]] - data sent back from extension; If the extensiion wasn't found an empty String will be returned",
            "sqf_type": "String"
        }
    },
    {
        "name": "camCommand",
        "description": "Executes a command on the given ''camera / actor'' object. Known commands for:\n\n{",
        "introduced_version": null,
        "syntax": "camera [[camCommand]] command",
        "parameters": [
            {
                "name": "camera",
                "description": "see [[camCreate]]",
                "sqf_type": "Object"
            },
            {
                "name": "command",
                "description": "see description",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camCommit",
        "description": "Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. For <tt>camPrepareXXX</tt> commands use [[camCommitPrepared]].",
        "introduced_version": null,
        "syntax": "camera '''camCommit''' time",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "time",
                "description": "time in seconds during which the changes shall be done",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camCommitPrepared",
        "description": "Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. This command is for use with <tt>camPrepareXXX</tt> commands. For the normal cam command use [[camCommit]].",
        "introduced_version": null,
        "syntax": "camera [[camCommitPrepared]] time",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "time",
                "description": "time in seconds during which the changes shall be done",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camCommitted",
        "description": "Checks if the conduction of the last camCommit call already finished.",
        "introduced_version": null,
        "syntax": "'''camCommitted''' camera",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] -  \ntrue if the last camCommit already finished, false if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "camConstuctionSetParams",
        "description": "Sets construction camera parameters. To work with \"camconstruct\" object.",
        "introduced_version": null,
        "syntax": "camera '''camConstuctionSetParams'''",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "maxAboveLand",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camCreate",
        "description": "Create a camera or a seagull object on the given position. The creation happens immediately and doesn't wait for [[camCommit]].<br>\nAmong other commands, [[cameraEffect]] must be used to enter the camera's view and [[camDestroy]] to delete the created camera. See also [[:Category:Command Group: Camera Control|Camera Control]].<br><br>",
        "introduced_version": null,
        "syntax": "type [[camCreate]] position",
        "parameters": [
            {
                "name": "position",
                "description": "format [[PositionAGL]] - position to create the object at",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Object]] - the created camera",
            "sqf_type": "Object"
        }
    },
    {
        "name": "camDestroy",
        "description": "Destroys camera object created with [[camCreate]]. This command doesn't need [[camCommit]]. \n<br><br>",
        "introduced_version": null,
        "syntax": "[[camDestroy]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPreload",
        "description": "Preloads the scene for the prepared camera with given timeout after which preloading is aborted. Max timeout is 30 seconds. Timeout of 0 means max timeout of 30 seconds as well. <br><br>",
        "introduced_version": null,
        "syntax": "camera '''camPreload''' timeout",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "timeout",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPreloaded",
        "description": "Checks whether the camera has finished preloading.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "camPrepareBank",
        "description": "Prepares the camera bank angle.\n<br><br>",
        "introduced_version": null,
        "syntax": "camera '''camPrepareBank''' bank",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bank",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPrepareDir",
        "description": "Prepares the camera heading. \n<br><br>",
        "introduced_version": null,
        "syntax": "camera '''camPrepareDir''' direction",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "direction",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPrepareDive",
        "description": "Prepares the camera dive angle. \n<br><br>",
        "introduced_version": null,
        "syntax": "camera '''camPrepareDive''' dive",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "dive",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPrepareFocus",
        "description": "focusRange is in format [distance,blur]. Prepares the camera focus blur.\n\n'''[-1,1]''' will reset default values (auto focusing), '''[-1,-1]''' will disable postprocessing (all is focused). Needs the call of [[camCommitPrepared]] to be conducted.",
        "introduced_version": null,
        "syntax": "camera '''camPrepareFocus''' focusRange",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "focusRange",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPrepareFov",
        "description": "Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is ''atan(FOV)*2'' radians when in 4:3 aspect ratio. Needs the call of [[camCommitPrepared]] to be conducted.",
        "introduced_version": null,
        "syntax": "camera '''camPrepareFov''' fieldOfView",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "fieldOfView",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPrepareFovRange",
        "description": "Prepares the camera field of view range for auto zooming. \n<br><br>",
        "introduced_version": null,
        "syntax": "camera '''camPrepareFovRange''' fovRange",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "fovRange",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPreparePos",
        "description": "Prepares the camera position (format [[Position]]). Needs the call of [[camCommitPrepared]] to be conducted.",
        "introduced_version": null,
        "syntax": "camera '''camPreparePos''' position",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPrepareRelPos",
        "description": "Prepares the camera position relative to the current position of the currect target (see [[camPrepareTarget]]). Needs the call of [[camCommitPrepared]] to be conducted.",
        "introduced_version": null,
        "syntax": "camera '''camPrepareRelPos''' position",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "format ([[PositionRelative]])",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camPrepareTarget",
        "description": "Prepares the camera target to a position or to a target. Needs the call of [[camCommitPrepared]] to be conducted.",
        "introduced_version": null,
        "syntax": "camera [[camPrepareTarget]] position",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "target location",
                "sqf_type": "Position"
            },
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetBank",
        "description": "Sets camera bank angle. Does not commit changes.\n<br><br>",
        "introduced_version": null,
        "syntax": "camera '''camSetBank''' bank",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bank",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetDir",
        "description": "Sets the orientation of the given camera in the direction of the given vector. Needs [[camCommit]].",
        "introduced_version": null,
        "syntax": "camera '''camSetDir''' direction",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "direction",
                "description": "in format [x,y,z] - direction of camera. Must be a valid vector.",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetDive",
        "description": "Sets camera dive angle. Does not commit changes. \n<br><br>",
        "introduced_version": null,
        "syntax": "camera '''camSetDive''' dive",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "dive",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetFocus",
        "description": "Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see [[camCommit]]). Use [-1, -1] to disable focus completely.",
        "introduced_version": null,
        "syntax": "camera '''camSetFocus''' focusRange",
        "parameters": [
            {
                "name": "camera",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "focusRange",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetFov",
        "description": "Set the zoom level ('''F'''ield '''O'''f '''V'''iew) of the given camera.\n<br>\nThe zoom level is from ''<tt>0.01</tt>'' for the nearest and ''<tt>8.5</tt>'' for the furthest zoom value, with a default zoom level of ''<tt>0.75</tt>''\n<br>\nThe angle of the field of view is ''<tt>atan(FOV)*2</tt>'' radians when in 4:3 aspect ratio. Needs the call of [[camCommit]] to be conducted.",
        "introduced_version": null,
        "syntax": "camera '''camSetFov''' level",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "level",
                "description": "zoom level, range 0.01 to 8.5 (see description above)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetFovRange",
        "description": "Set the zoom level ('''F'''ield '''O'''f '''V'''iew) start and end values for automatical zooming.",
        "introduced_version": null,
        "syntax": "camera '''camSetFovRange''' fovRange",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "fovRange",
                "description": "zoom level, range 0 to 1 (see description above)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetPos",
        "description": "Sets the position of the given camera or seagull (see [[camCreate]]). It is worth mentioning that camera position can also be set with [[setPos]], in which case it would be instant. With [[camSetPos]] it is possible to make smooth position transition in time, defined with [[camCommit]], which is required in this case.",
        "introduced_version": null,
        "syntax": "camera '''camSetPos''' position",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\" or \"seagull\"",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "[[Position]] to set the object to",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetRelPos",
        "description": "Sets the position of the given camera relative to its target, set with [[camSetTarget]]. Needs a call to [[camCommit]] to be conducted.<br><br>",
        "introduced_version": null,
        "syntax": "camera '''camSetRelPos''' position",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "format [[PositionRelative]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camSetTarget",
        "description": "Set the target object or position where the given camera should point at. Needs the call of [[camCommit]] to be conducted. To reset the target use [[objNull]].",
        "introduced_version": null,
        "syntax": "camera [[camSetTarget]] target",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "target location",
                "sqf_type": "Object"
            },
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "target location - [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "camTarget",
        "description": "Returns camera's target.",
        "introduced_version": null,
        "syntax": "'''camTarget''' camera",
        "parameters": [
            {
                "name": "camera",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "camUseNVG",
        "description": "Set / clear using of night vision during cutscenes. This command only works with [[camCreate]] created camera that is currently the main camera for the player (see example).",
        "introduced_version": null,
        "syntax": "'''camUseNVG''' set",
        "parameters": [
            {
                "name": "set",
                "description": "enable/disable night vision",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "cameraEffect",
        "description": "Sets the given effect on the given camera. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use [[switchCamera]] instead. The effect type \"Terminate\" is used to exit the current camera view and switch back to the player's view. Does not need [[camCommit]].\n<br><br>\nSince Arma 3 v1.73.142217, it is possible to terminate individual r2t source. For example: <code>cam [[cameraEffect]] [\"terminate\", \"back\", \"rtt1\"]; // would terminate \"rtt1\" r2t source\ncam [[cameraEffect]] [\"terminate\", \"back\"]; // would terminate all r2t sources</code><br>",
        "introduced_version": null,
        "syntax": "camera '''cameraEffect''' [effectName, effectPosition, r2tName]",
        "parameters": [
            {
                "name": "camera",
                "description": "object of type \"camera\"",
                "sqf_type": "Object"
            },
            {
                "name": "effectName",
                "description": "the effect type (defined in main config or [[Description.ext#CfgCameraEffects|CfgCameraEffects]] >> Array). Defaults are: <tt>\"Internal\"</tt>, <tt>\"External\"</tt>, <tt>\"Fixed\"</tt>, <tt>\"FixedWithZoom\"</tt>, <tt>\"Terminate\"</tt>",
                "sqf_type": "String"
            },
            {
                "name": "effectPosition",
                "description": "position of the effect. One of: <tt>\"TOP\"</tt>, <tt>\"LEFT\"</tt>, <tt>\"RIGHT\"</tt>, <tt>\"FRONT\"</tt>, <tt>\"BACK\"</tt>, <tt>\"LEFT FRONT\"</tt>, <tt>\"RIGHT FRONT\"</tt>, <tt>\"LEFT BACK\"</tt>, <tt>\"RIGHT BACK\"</tt>, <tt>\"LEFT TOP\"</tt>, <tt>\"RIGHT TOP\"</tt>, <tt>\"FRONT TOP\"</tt>, <tt>\"BACK TOP\"</tt>, <tt>\"BOTTOM\"</tt>. These are usually used with \"Fixed\" and \"FixedWithZoom\" effect types. If not sure which position to use, set it to \"BACK\";",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "cameraEffectEnableHUD",
        "description": "Enable / disable showing of in-game UI during currently active camera effect. By default the HUD is off, which will make results of [[drawIcon3D]] invisible, for example.",
        "introduced_version": null,
        "syntax": "'''cameraEffectEnableHUD''' enable",
        "parameters": [
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "cameraInterest",
        "description": "Return camera interest for given entity, as set by [[setCameraInterest]], or as autodetected.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "entity",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "cameraOn",
        "description": "Returns the vehicle to which the camera is attached.",
        "introduced_version": null,
        "syntax": "[[cameraOn]]",
        "parameters": [],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "cameraView",
        "description": "Returns mode of active camera view. Mode is one of: \n* \"INTERNAL\" (1st person)\n* \"EXTERNAL\" (3rd person)\n* \"GUNNER\" (optics / sights)\n* \"GROUP\" (commander view)",
        "introduced_version": null,
        "syntax": "'''cameraView'''",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "campaignConfigFile",
        "description": "Return root of campaign description.ext entries hierarchy.",
        "introduced_version": null,
        "syntax": "[[Config]]",
        "parameters": [],
        "returns": {
            "description": "[[Config]]",
            "sqf_type": "Config"
        }
    },
    {
        "name": "canAdd",
        "description": "Checks if given object can be stored in inventory of given object or any inventory container ([[uniform]], [[vest]], [[backpack]]) of given unit.",
        "introduced_version": null,
        "syntax": "object [[canAdd]] item",
        "parameters": [
            {
                "name": "object",
                "description": "unit or container",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "Config class",
                "sqf_type": "String"
            },
            {
                "name": "object",
                "description": "unit or container",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "Config class",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "desired quantity",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canAddItemToBackpack",
        "description": "Checks if given object can be stored into soldier's backpack.",
        "introduced_version": null,
        "syntax": "unit [[canAddItemToBackpack]] item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canAddItemToUniform",
        "description": "Checks if given object can be stored into soldier's uniform.",
        "introduced_version": null,
        "syntax": "unit [[canAddItemToUniform]] item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canAddItemToVest",
        "description": "Checks if given object can be stored into soldier's vest.",
        "introduced_version": null,
        "syntax": "unit [[canAddItemToVest]] item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canFire",
        "description": "Returns [[true]] if the given vehicle is still able to fire. For the command to return [[true]], vehicle must be alive, have weapon operator and the weapon cannot be damaged &ge; 0.9 but can be empty due to running out of ammo. If mission starts with vehicle having no ammo or [[setVehicleAmmo]] 0 command is executed on the vehicle, then [[canFire]] will always report [[false]] for it.",
        "introduced_version": null,
        "syntax": "[[canFire]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if able to fire",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canMove",
        "description": "Returns if the given vehicle is still able to move.",
        "introduced_version": null,
        "syntax": "[[canMove]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the vehicle is able to move, [[false]] if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canSlingLoad",
        "description": "Returns [[true]] if [[setSlingLoad]] is possible.",
        "introduced_version": null,
        "syntax": "heli [[canSlingLoad]] cargo",
        "parameters": [
            {
                "name": "heli",
                "description": "a helicopter",
                "sqf_type": "Object"
            },
            {
                "name": "cargo",
                "description": "an entity",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if [[setSlingLoad]] is possible",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canStand",
        "description": "Returns if the given soldier is able to stand up.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] -  \n[[true]] if he's still able to stand up, [[false]] if not. Automatically return [[false]] if unit is vehicle.",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canSuspend",
        "description": "Returns [[true]] if [[sleep]], [[uiSleep]] or [[waitUntil]] commands can be used in current scope. Usually when suspension is not allowed but used, for example when code is executed in [[Scheduler#Unscheduled_Environment|unscheduled environment]], the script engine would ignore any suspension command and throw error: \"Suspending not allowed in this context\". Using [[canSuspend]] command allows to detect the correct environment for the code.\n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''canSuspend'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canTriggerDynamicSimulation",
        "description": "A getter for [[triggerDynamicSimulation]]",
        "introduced_version": null,
        "syntax": "'''canTriggerDynamicSimulation''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canUnloadInCombat",
        "description": "Check if cargo of this vehicle want to get out when in combat.",
        "introduced_version": null,
        "syntax": "'''canUnloadInCombat''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "canVehicleCargo",
        "description": "Returns bool array if it is possible to load cargo inside vehicle and if possible to load cargo into empty vehicle",
        "introduced_version": null,
        "syntax": "vehicle [[canVehicleCargo]] cargo",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle carrying cargo",
                "sqf_type": "Object"
            },
            {
                "name": "cargo",
                "description": "cargo to put in vehicle",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [WillFitIntoCurrentVehicle, WillFitIntoEmptyVehicle]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "cancelSimpleTaskDestination",
        "description": "Cancels a simple task destination.",
        "introduced_version": null,
        "syntax": "'''cancelSimpleTaskDestination''' task",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "captive",
        "description": "Returns the captive state of the given unit (set with [[setCaptive]]). A captive unit will not be attacked by its enemies.",
        "introduced_version": null,
        "syntax": "[[captive]] object",
        "parameters": [
            {
                "name": "object",
                "description": "unit or vehicle",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the unit is captive, [[false]] if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "captiveNum",
        "description": "Checks whether the unit is a [[captive]]. If the unit is a vehicle, its commander is checked instead.<br>\nIf a unit's captivity level was set as a [[Boolean]], then the returned number is either 0 (for [[false]]) or 1 (for [[true]]).",
        "introduced_version": null,
        "syntax": "[[captiveNum]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - anything from 0 to value set by [[setCaptive]] alt syntax. A non zero value means [[captive]].",
            "sqf_type": "Number"
        }
    },
    {
        "name": "case",
        "description": "This command is used inside a [[switch do]] construct. <br>Although the syntax below states that this operator takes only one argument, that is most likely not true. It seems like it needs two arguments of which the left one is some sort of hidden variable that gets defined inside a [[switch do]] construct. That is the reason why <b>this operator can not be used outside a [[switch do]] construct</b>. (see https://foxhound.international/arma-3-sqf-grammar.html for further explaination)<br>\nAlso note that it is not possible to store the returned [[Switch Type]] in a variable and use that variable in another [[switch do]] construct. It will never lead to an execution of the corresponding code block.",
        "introduced_version": null,
        "syntax": "'''case''' b",
        "parameters": [
            {
                "name": "b",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Switch Type]]",
            "sqf_type": "Switch"
        }
    },
    {
        "name": "catch",
        "description": "Processes code when an [[Exception handling|exception]] is thrown in a [[try]] block. The exception caught can be found in the ''_exception'' variable.",
        "introduced_version": null,
        "syntax": "tryBlock [[catch]] code",
        "parameters": [
            {
                "name": "code",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Anything]]",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "cbChecked",
        "description": "Returns the current state of a [[CT_CHECKBOX]] control.",
        "introduced_version": null,
        "syntax": "'''cbChecked''' control",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "cbSetChecked",
        "description": "Sets the current state of a [[CT_CHECKBOX]] control. Use <tt>\"CheckedChanged\"</tt> control event handler with it.",
        "introduced_version": null,
        "syntax": "control '''cbSetChecked''' state",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ceil",
        "description": "The ceil value of x.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "channelEnabled",
        "description": "Returns [[Array]] of [[Boolean]]s in format [enabledChat, enabledVoN] for the given channel. For more information about enabling/disabling of chat channels see [[enableChannel]].\n{",
        "introduced_version": null,
        "syntax": "[[channelEnabled]] channelID",
        "parameters": [
            {
                "name": "channelID",
                "description": "[[Channel IDs|Channel ID]] (see description)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - in format [enabledChat, enabledVoN]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "cheatsEnabled",
        "description": "Checks whether cheats are enabled (whether the designers' version is running).",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "checkAIFeature",
        "description": "Checks if the given AI feature is currently enabled. Feature may be one of:\n\n* <tt>\"AwareFormationSoft\"</tt>\n* <tt>\"CombatFormationSoft\"</tt> \n\nSince Arma 3 v1.95.145843 this command also supports [[disableAI]] / [[enableAI]] feature set via an alternative syntax.",
        "introduced_version": null,
        "syntax": "'''checkAIFeature''' feature",
        "parameters": [
            {
                "name": "feature",
                "description": "(see description)",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "unit to test AI feature for",
                "sqf_type": "Object"
            },
            {
                "name": "feature",
                "description": "[[disableAI]] / [[enableAI]] feature",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if is enabled",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "checkVisibility",
        "description": "Checks if one position is visible from another position and how much. The results can be affected by [[getTerrainGrid]] value, especially if position is near the ground. Particle effects such as smoke can also affect the results.",
        "introduced_version": null,
        "syntax": "[ignore, LOD, ignore2] [[checkVisibility]] [beg, end]",
        "parameters": [
            {
                "name": "ignore",
                "description": "object to exclude from calculations",
                "sqf_type": "Object"
            },
            {
                "name": "LOD",
                "description": "level of details to use. Possible values are: <tt>\"FIRE\"</tt>, <tt>\"VIEW\"</tt>, <tt>\"GEOM\"</tt>, <tt>\"IFIRE\"</tt>, <tt>\"PHYSX\"</tt> - PhysX geometry LOD (since Arma 3 v2.01.146666)",
                "sqf_type": "String"
            },
            {
                "name": "beg",
                "description": "start position in format [[PositionASL]]",
                "sqf_type": "Array"
            },
            {
                "name": "end",
                "description": "end position in format [[PositionASL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]] - how much end position is visible to start position in range 0..1, where 1 is fully visible.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "civilian",
        "description": "Pre-defined variable for the civilian [[Side|side]].\n\n<br>When used in a [[format]] statement (<tt>hint [[format]][\"%1\",civilian]</tt>), the string returned is <tt>\"CIV\"</tt>.",
        "introduced_version": null,
        "syntax": "'''civilian'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "className",
        "description": "Returns short name of location.",
        "introduced_version": null,
        "syntax": "[[className]] location",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "clear3DENAttribute",
        "description": "Clears the value of the given entity's [[Eden_Editor:_Entity_Attributes|attribute]] in [[Eden Editor]].\n<br><br>\nAn attribute is identified by its <tt>property</tt> (<tt>data</tt> when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see [[Eden_Editor:_Setting_Attributes#Attributes|Setting Attributes]].",
        "introduced_version": null,
        "syntax": "entity '''clear3DENAttribute''' attribute",
        "parameters": [
            {
                "name": "attribute",
                "description": "attribute property",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "clear3DENInventory",
        "description": "Deletes inventory from mission.sqm of given units. Effect is not immediately visible, only when previewing the inventory resets to default.",
        "introduced_version": null,
        "syntax": "'''clear3DENInventory''' entities",
        "parameters": [
            {
                "name": "entities",
                "description": "of types [[Eden Entity]] or [[Eden ID]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearAllItemsFromBackpack",
        "description": "Removes all items from backpack of a unit.",
        "introduced_version": null,
        "syntax": "[[clearAllItemsFromBackpack]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearBackpackCargo",
        "description": "Removes all backpacks from ammo box (or any general weapon holder container).",
        "introduced_version": null,
        "syntax": "[[clearBackpackCargo]] box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearBackpackCargoGlobal",
        "description": "Removes all backpacks from the vehicle cargo space. MP synchronized.",
        "introduced_version": null,
        "syntax": "[[clearBackpackCargoGlobal]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearForcesRTD",
        "description": "Removes all force generators from world.",
        "introduced_version": null,
        "syntax": "[[clearForcesRTD]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "clearGroupIcons",
        "description": "Removes all icon from group.",
        "introduced_version": null,
        "syntax": "'''clearGroupIcons''' group",
        "parameters": [
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearItemCargo",
        "description": "Removes all items from ammo box (or any general weapon holder container).",
        "introduced_version": null,
        "syntax": "[[clearItemCargo]] box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearItemCargoGlobal",
        "description": "Removes all items from ammo box (or any general weapon holder container).",
        "introduced_version": null,
        "syntax": "[[clearItemCargoGlobal]] box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearItemPool",
        "description": "Removes all items from ammo box (or any general weapon holder container)",
        "introduced_version": null,
        "syntax": "'''clearItemPool''' box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearMagazineCargo",
        "description": "Remove all magazines from the given vehicle's magazine cargo space.",
        "introduced_version": null,
        "syntax": "[[clearMagazineCargo]] vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearMagazineCargoGlobal",
        "description": "Removes all magazines from the vehicle cargo space. MP synchronized.",
        "introduced_version": null,
        "syntax": "'''clearMagazineCargoGlobal''' object",
        "parameters": [
            {
                "name": "object",
                "description": "vehicle or ammo box",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearMagazinePool",
        "description": "Remove all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.",
        "introduced_version": null,
        "syntax": "'''clearMagazinePool'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearOverlay",
        "description": "Clear the current overlay.",
        "introduced_version": null,
        "syntax": "'''clearOverlay''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearRadio",
        "description": "Clean up the content of radio protocol history.",
        "introduced_version": null,
        "syntax": "'''clearRadio'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearVehicleInit",
        "description": "Clears the object's init.<br><br>",
        "introduced_version": null,
        "syntax": "'''clearVehicleInit''' objectName",
        "parameters": [
            {
                "name": "objectName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearWeaponCargo",
        "description": "Remove all weapons from the given vehicle's weapon cargo space.",
        "introduced_version": null,
        "syntax": "[[clearWeaponCargo]] vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearWeaponCargoGlobal",
        "description": "Removes all weapons from the vehicle cargo space. MP synchronized.",
        "introduced_version": null,
        "syntax": "[[clearWeaponCargoGlobal]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clearWeaponPool",
        "description": "Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.",
        "introduced_version": null,
        "syntax": "'''clearWeaponPool'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "clientOwner",
        "description": "Returns the [[Multiplayer_Scripting#Machine_network_ID | machine network ID]] of the client executing the command.",
        "introduced_version": null,
        "syntax": "'''clientOwner'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "closeDialog",
        "description": "Close the currently active user dialog with exit code. Most common exit codes are:\n<code>#define IDC_OK            1 //emulate \"Ok\" button</code>\n<code>#define IDC_CANCEL        2 //emulate \"Cancel\" button</code>",
        "introduced_version": null,
        "syntax": "'''closeDialog''' exitcode",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "closeDisplay",
        "description": "Closes given display with exit code. It does not instantly close the display but does it on next simulation cycle. Most common exit codes are:",
        "introduced_version": null,
        "syntax": "display [[closeDisplay]] exitCode",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            },
            {
                "name": "exitCode",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "closeOverlay",
        "description": "Closes the current overlay without committing.",
        "introduced_version": null,
        "syntax": "'''closeOverlay''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "collapseObjectTree",
        "description": "Collapse the object tree.",
        "introduced_version": null,
        "syntax": "'''collapseObjectTree''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "collect3DENHistory",
        "description": "Execute a block of code in which all Eden Editor operations will be recorded as one history step. For example creating an entity, setting its attributes and then connections would normally be recorded as three different steps. Calling them all within single '''collect3DENHistory''' block will group them together and the user will need to undo only once to revert the changes.",
        "introduced_version": null,
        "syntax": "'''collect3DENHistory''' code",
        "parameters": [
            {
                "name": "code",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "collectiveRTD",
        "description": "Returns the current position of a helicopter's collective pitch control.\n* 0: fully lowered\n* 1: fully raised",
        "introduced_version": null,
        "syntax": "[[collectiveRTD]] helicopterRTD",
        "parameters": [
            {
                "name": "helicopterRTD",
                "description": "helicopter",
                "sqf_type": "ObjectRTD"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "combatMode",
        "description": "Returns the combat mode of the given AI [[Group | group]]. See [[setCombatMode]] for more information about combat modes.",
        "introduced_version": null,
        "syntax": "[[combatMode]] group",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Object]]. If the argument is unit [[Object]], unit's current group is used.",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[String]] -  \nOne of \"BLUE\", \"GREEN\", \"WHITE\", \"YELLOW\" and \"RED\" or \"ERROR\"",
            "sqf_type": "String"
        }
    },
    {
        "name": "commandArtilleryFire",
        "description": "Orders a unit via radio to reload defined magazine and fire given number of rounds on the given position.",
        "introduced_version": null,
        "syntax": "unit '''commandArtilleryFire''' [position, type, rounds]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "Position"
            },
            {
                "name": "rounds",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandChat",
        "description": "Types text to the command radio channel. Must have assigned \"ItemRadio\" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see [[remoteExec]])",
        "introduced_version": null,
        "syntax": "unitName [[commandChat]] chatText",
        "parameters": [
            {
                "name": "unitName",
                "description": "unit transmitting message",
                "sqf_type": "Object"
            },
            {
                "name": "chatText",
                "description": "message to transmit",
                "sqf_type": "String"
            },
            {
                "name": "side",
                "description": "side to which the message will be seen",
                "sqf_type": "Side"
            },
            {
                "name": "identity",
                "description": "class name of one of the identities in CfgHQIdentities. Possible identities in",
                "sqf_type": "String"
            },
            {
                "name": "chatText",
                "description": "message to transmit",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandFSM",
        "description": "Orders a unit to process command defined by [[FSM]] file (via the radio).",
        "introduced_version": null,
        "syntax": "unitName '''commandFSM''' [fsm name, position, target]",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandFire",
        "description": "Order the given unit to fire on the given target (via the radio).\nIf the target is [[objNull]], the unit is ordered to fire on its current target (set with [[doTarget]] or [[commandTarget]]).",
        "introduced_version": null,
        "syntax": "unitName '''commandFire''' target",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandFollow",
        "description": "Order the given unit to follow the given other unit (via the radio).",
        "introduced_version": null,
        "syntax": "unitName '''commandFollow''' followedunit",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "followedunit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandGetOut",
        "description": "Orders one or multiple units to get out from the vehicle (via the radio). Same as [[doGetOut]] with latter being silent. \n<br><br>\nNotes:\n* Works for both AI and player entities\n* AI unit gets back in - unless is under player command or combined with other sqf commands ([[orderGetIn]] false, [[allowGetIn]] false or [[leaveVehicle]])\n* Ignores vehicle's lock state - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] and [[moveOut]]\n* AI waits for execution until vehicle has stopped/is no longer flying (unclear if any timeout exists for order to be discarded) - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] and [[moveOut]]\n* Plays the vehicle's position's get out animation (same as [[Arma_3_Actions#Eject|action \"Eject\"]]) - unlike [[moveOut]]\n* When execute for multiple units, it waits till the action is completed, before the next to take his turn (same as [[Arma_3_Actions#Eject|action \"Eject\"]]) - unlike [[moveOut]]\n* AI gets back into formation afterwards\n* Works only on alive units - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] (one after another) or [[moveOut]] (instantly)\n* Does not work on [[setUnconscious|unconscious]] - unless the AI is under player command. Unlike [[moveOut]] or [[Arma_3_Actions#Eject|action \"Eject\"]] (but one after another))",
        "introduced_version": null,
        "syntax": "'''commandGetOut''' units(s)",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Array]] of [[Object]]s",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandMove",
        "description": "Order the given unit(s) to move to the given location (via the radio). Exactly the same as [[doMove]], except this command displays a radio message.",
        "introduced_version": null,
        "syntax": "unitName '''commandMove''' position",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandRadio",
        "description": "Sends the audio message to the command radio channel. Must have assigned \"ItemRadio\" to send or receive the transmission. The message is defined in CfgRadio in the [[description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see [[remoteExec]]).\n<br><br>Note:  When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.",
        "introduced_version": null,
        "syntax": "unit [[commandRadio]] radioName",
        "parameters": [
            {
                "name": "unit",
                "description": "unit to transmit",
                "sqf_type": "Object"
            },
            {
                "name": "radioName",
                "description": "class name from CfgRadio",
                "sqf_type": "String"
            },
            {
                "name": "side",
                "description": "side to which the transmission will be played",
                "sqf_type": "Side"
            },
            {
                "name": "radioName",
                "description": "class name from CfgRadio",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandStop",
        "description": "Order the given unit(s) to stop (via the radio). <br>A stop command will never finish, the unit will never be ready.",
        "introduced_version": null,
        "syntax": "'''commandStop''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Array]] of [[Object]]s",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandSuppressiveFire",
        "description": "Orders the given unit or a group of units to suppress the given position or target (with radio messages, see [[doSuppressiveFire]] if you don't want messages). \n* When an [[Array]] of units is passed as param, only units from the same [[Group]] as the first unit in array are considered. \n* The unit (units) starts firing at the given target or position random amount of shots (exact formula unknown, but seems to depend on amount of ammo unit has) after which it stops. \n* [[currentCommand]] shows <tt>\"Suppress\"</tt> and there is no way of stopping unit before it completes random amount of rounds. \n* If position is passed as target param, it stays fixed. \n* If object is passed as target param, it depends on what kind of object. If it is considered a proper target by the unit, it is tracked by the unit dynamically. If it is not, the position gets obtained via [[getPosWorld]], which could be different from [[PositionASL]] of the object, and it is fixed even if the target is able to change position later.",
        "introduced_version": null,
        "syntax": "unit '''commandSuppressiveFire''' target",
        "parameters": [
            {
                "name": "unit",
                "description": "or [[Array]] - a single unit or array of units",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "or [[Array]] - actual target or position of the target in format [[PositionASL]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandTarget",
        "description": "Order the given unit(s) to target the given target (via the radio). Command given to the player, puts a red square with words Target and Distance on player's HUD at target location. If player in vehicle and has radar facilities, it also adds target marker to the radar.",
        "introduced_version": null,
        "syntax": "unit '''commandTarget''' target",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commandWatch",
        "description": "Orders the unit(s) to watch the given position or target (via the radio). Use [[objNull]] as the target to order a unit to stop watching a position/target.",
        "introduced_version": null,
        "syntax": "units [[commandWatch]] position",
        "parameters": [
            {
                "name": "units",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            },
            {
                "name": "units",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commander",
        "description": "In OFP it returns the commander of a vehicle. Since ArmA and VBS2 it returns the primary observer. The commander of a vehicle can be found with [[effectiveCommander]].",
        "introduced_version": null,
        "syntax": "'''commander''' vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] -  The unit sitting in the commander place is returned. If vehicle is not a vehicle but a person, the person is returned.",
            "sqf_type": "Object"
        }
    },
    {
        "name": "commandingMenu",
        "description": "Returns the name of the topmost commanding menu or \"\" if the menu is closed. For action menu visibility check see [[isActionMenuVisible]].",
        "introduced_version": null,
        "syntax": "'''commandingMenu'''",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "comment",
        "description": "Define a comment. \n\nMainly used in [[SQF_syntax|SQF Syntax]], as you're able to introduce comment lines with semicolons in a [[sqs syntax|SQS script]].<br>",
        "introduced_version": null,
        "syntax": "'''comment''' commentMsg",
        "parameters": [
            {
                "name": "commentMsg",
                "description": "the comment that you'd like to write here",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "commitOverlay",
        "description": "Commit the current overlay.",
        "introduced_version": null,
        "syntax": "'''commitOverlay''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "compile",
        "description": "Compiles [[String]] expression into [[Code]].",
        "introduced_version": null,
        "syntax": "'''compile''' expression",
        "parameters": [
            {
                "name": "expression",
                "description": "expression to be compiled",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Code]] - compiled expression",
            "sqf_type": "Code"
        }
    },
    {
        "name": "compileFinal",
        "description": "Compile expression and makes it final, preventing it from:\n* repeated [[compile]] or [[compileFinal]]\n* removal by [[nil]]\n* remote rewrite using [[publicVariable]], [[publicVariableClient]] and [[publicVariableServer]]",
        "introduced_version": null,
        "syntax": "'''compileFinal''' expression",
        "parameters": [
            {
                "name": "expression",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Code]]",
            "sqf_type": "Code"
        }
    },
    {
        "name": "completedFSM",
        "description": "Checks whether the given FSM is completed. The FSM handle is the number returned by the [[execFSM]] command.",
        "introduced_version": null,
        "syntax": "'''completedFSM''' fsmHandle",
        "parameters": [
            {
                "name": "fsmHandle",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "composeText",
        "description": "Creates a [[Structured Text]] by joining the given [[Structured Text | structured]] or [[String | plain]] text arguments.",
        "introduced_version": null,
        "syntax": "[[composeText]] [argument1, argument2, ...]",
        "parameters": [
            {
                "name": "argument",
                "description": "or [[Structured Text]] - use [[Structured Text]] where necessary (see [[#Examples|Example 2]])",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "configClasses",
        "description": "Returns an array of config entries which meet criteria in condition code. Command iterates through all available config sub classes of the given config class. Current looked at config is stored in _x variable (similar to alternative [[count]] command implementation). Condition has to return [[true]] in order for the looked at config to be added to the resulting array. Slightly faster than [[configProperties]], but doesn't account for config properties or inherited entries.\n<br><br>",
        "introduced_version": null,
        "syntax": "condition [[configClasses]] config",
        "parameters": [
            {
                "name": "condition",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Array]] - Array of [[Config]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "configFile",
        "description": "Return root of config entries hierarchy.<br>\nSee [[AllInOne Config]] for a full config extract as example.",
        "introduced_version": null,
        "syntax": "[[Config]]",
        "parameters": [],
        "returns": {
            "description": "[[Config]]",
            "sqf_type": "Config"
        }
    },
    {
        "name": "configHierarchy",
        "description": "Returns hierarchy of the given config class. Just like with [[inheritsFrom]], only complete config classes are supported",
        "introduced_version": null,
        "syntax": "'''configHierarchy''' configClass",
        "parameters": [
            {
                "name": "configClass",
                "description": "target config class",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of parent configs",
            "sqf_type": "Array"
        }
    },
    {
        "name": "configName",
        "description": "Returns name of config entry.",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "configNull",
        "description": "A non-existing [[Config]].",
        "introduced_version": null,
        "syntax": "[[configNull]]",
        "parameters": [],
        "returns": {
            "description": "[[Config]]",
            "sqf_type": "Config"
        }
    },
    {
        "name": "configProperties",
        "description": "Returns an array of config entries which meet criteria in condition code. Command iterates through available classes and config properties for given config entry. If 3rd param is [[true]] the search also includes inherited properties. Current looked at config is stored in _x variable (similar to alternative [[count]] command implementation). Condition has to return [[true]] in order for the looked at property to be added to the resulting array. A bit slower than [[configClasses]] but allows to access inherited entries.\n<br><br>",
        "introduced_version": null,
        "syntax": "'''configProperties''' [config, condition, inherit]",
        "parameters": [
            {
                "name": "config",
                "description": "config entry to search",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Array]] - Array of [[Config]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "configSourceAddonList",
        "description": "Returns an array of addons ([[CfgPatches]]) in which the given config class is defined.",
        "introduced_version": null,
        "syntax": "'''configSourceAddonList''' config",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "configSourceMod",
        "description": "Returns modDir of the mod that given config class was loaded from.",
        "introduced_version": null,
        "syntax": "'''configSourceMod''' config",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "configSourceModList",
        "description": "Returns an array of mods (CfgMods) in which the given config class is defined.",
        "introduced_version": null,
        "syntax": "'''configSourceModList''' config",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "confirmSensorTarget",
        "description": "Sets for which [[Side]] the entity becomes a \"confirmed hostile\" target - a target that becomes highlighted red on the sensors display.",
        "introduced_version": null,
        "syntax": "vehicle '''confirmSensorTarget''' [side, isConfirmed]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "isConfirmed",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "connectTerminalToUAV",
        "description": "Connect person with UAV terminal to UAV unit. UAV Terminal item needs to be assigned to GPS slot.\nIf UAV is already connected to another terminal, this new connection will fail.",
        "introduced_version": null,
        "syntax": "person '''connectTerminalToUAV''' uav",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "uav",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "controlNull",
        "description": "A non-existing [[Control]]. To compare non-existent objects use [[isNull]] or [[isEqualTo]] (see examples).",
        "introduced_version": null,
        "syntax": "[[controlNull]]",
        "parameters": [],
        "returns": {
            "description": "[[Control]]",
            "sqf_type": "Control"
        }
    },
    {
        "name": "controlsGroupCtrl",
        "description": "Returns a child control with specified idc from a controls group",
        "introduced_version": null,
        "syntax": "ctrlgrp [[controlsGroupCtrl]] idc",
        "parameters": [
            {
                "name": "ctrlgrp",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Control]]",
            "sqf_type": "Control"
        }
    },
    {
        "name": "copyFromClipboard",
        "description": "Return ANSI content of the (text) clipboard. If Unicode support is desired, see [[forceUnicode]].",
        "introduced_version": null,
        "syntax": "'''copyFromClipboard'''",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "copyToClipboard",
        "description": "Copies ANSI text string to the clipboard. If Unicode support is desired, see [[forceUnicode]].",
        "introduced_version": null,
        "syntax": "'''copyToClipboard''' text",
        "parameters": [
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "copyWaypoints",
        "description": "Copy the chain of waypoints from source to target group. The target group will start to process waypoints from the first one.",
        "introduced_version": null,
        "syntax": "groupTo '''copyWaypoints''' groupFrom",
        "parameters": [
            {
                "name": "groupTo",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "groupFrom",
                "description": "",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "cos",
        "description": "Cosine of a number, argument in degrees.",
        "introduced_version": null,
        "syntax": "'''cos''' x",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "count",
        "description": "Can be used to count:\n* the number of elements in array (doesn\u2019t actually count them per se but rather returns already known array size)\n* the number of elements in array with condition\n* the number of sub-entries in a config object\n* the number of characters in a ANSI string (since [\"Arma 3\",\"Arma3\",127,126674,\"Development\"]). If Unicode support is desired, see [[forceUnicode]].",
        "introduced_version": null,
        "syntax": "[[count]] array",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "condition",
                "description": "that must return [[true]] for the tested element to be counted. The variable ''[[_x]]'' will contain the currently tested element.",
                "sqf_type": "Code"
            },
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "configname",
                "description": "",
                "sqf_type": "Config"
            },
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "countEnemy",
        "description": "Count how many units in the array are considered enemy to the given unit.",
        "introduced_version": null,
        "syntax": "unitName '''countEnemy''' arrayName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "arrayName",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "countFriendly",
        "description": "Count how many units in the array are considered friendly to the given unit.",
        "introduced_version": null,
        "syntax": "unitName '''countFriendly''' arrayName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "arrayName",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "countSide",
        "description": "Count how many units in the given array belong to given side. If the object in passed array is a [[Group]], the leader of the group will be counted.",
        "introduced_version": null,
        "syntax": "side '''countSide''' arrayName",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "arrayName",
                "description": "of [[Object]]s and/or [[Group]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "countType",
        "description": "Count how many objects in the array are of given type. This command also works with parent classes like \"Air\", \"Tank\", and \"Car\". For a full class reference see [[CfgVehicles|Classes]].",
        "introduced_version": null,
        "syntax": "type '''countType''' objects",
        "parameters": [
            {
                "name": "type",
                "description": "class type",
                "sqf_type": "String"
            },
            {
                "name": "objects",
                "description": "array of [[Object]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "countUnknown",
        "description": "Count how many units in the array are unknown to the given unit.",
        "introduced_version": null,
        "syntax": "unitName '''countUnknown''' arrayName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "arrayName",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "create3DENComposition",
        "description": "Create new [[Eden_Editor:_Composition|Composition]]. To create individual entities, use [[create3DENEntity]].",
        "introduced_version": null,
        "syntax": "'''create3DENComposition''' [configPath,  position]",
        "parameters": [
            {
                "name": "configPath",
                "description": "path to ''CfgGroups'' class of a composition",
                "sqf_type": "Config"
            },
            {
                "name": "position",
                "description": "in format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Eden Entity|Eden Entities]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "create3DENEntity",
        "description": "Create new [[Eden Entity]]. Used for creating individual entities; to create a [[Eden_Editor:_Composition|composition]] (e.g., infantry squad), use [[create3DENComposition]].\n<br><br>\nThis is the only way how to add new editable entities to [[Eden Editor]] scenario. Other 'create' commands like [[createVehicle]] or [[createUnit]] will still work, but the resulting entity won't be editable.",
        "introduced_version": null,
        "syntax": "'''create3DENEntity''' [mode, class, position, (isEmpty)]",
        "parameters": [
            {
                "name": "mode",
                "description": "can be \"Object\", \"Trigger\", \"Waypoint\", \"Logic\" or \"Marker\"",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "in format [[Position]]",
                "sqf_type": "Array"
            },
            {
                "name": "mode",
                "description": "can be \"Object\", \"Trigger\", \"Waypoint\", \"Logic\" or \"Marker\"",
                "sqf_type": "String"
            },
            {
                "name": "class",
                "description": "entity class",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "in format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Eden Entity]]",
            "sqf_type": "Eden"
        }
    },
    {
        "name": "createAgent",
        "description": "Creates an agent of the given type. An agent does not have a group or leader or the standard soldier [[FSM]] associated with it - for instance, an enemy soldier spawned as an agent has limited AI and will do nothing when fired upon - which can be useful to limit the amount of AI processing being done in a mission with very large numbers of \"AI\".",
        "introduced_version": null,
        "syntax": "[[createAgent]] [type, position, markers, placement, special]",
        "parameters": [
            {
                "name": "type",
                "description": "class from [[CfgVehicles]]",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": ",  [[Position2D]], [[Object]] - desired placement position",
                "sqf_type": "PositionAGL"
            },
            {
                "name": "markers",
                "description": "if the markers array contains any markers, the position is randomly picked from array of given markers plus desired placement position. If any of the markers were given z coordinate with setMarkerPos, the vehicle will also be created at given z coordinate.",
                "sqf_type": "Array"
            },
            {
                "name": "placement",
                "description": "radius, the unit is randomly place in a circle with this radius",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "createCenter",
        "description": "Instanciate a [[Side]] center. A [[Side]] center is required to be able to [[createGroup|create groups]] of this side.<br>\nCenters can only be created for [[east]], [[west]], [[resistance]], [[civilian]] and [[sideLogic]] [[Side|sides]].<br>\nCreated sides must have their \"side-friendship\" defined with [[setFriend]].",
        "introduced_version": null,
        "syntax": "[[createCenter]] side",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "createDialog",
        "description": "Create a dialog which is defined either in the mission's [[description.ext]], in the campaign's description.ext or in the global [[Resource.cpp/bin|resource.cpp]]. The given name has to be the class name used in one of these files. If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened.",
        "introduced_version": null,
        "syntax": "'''createDialog''' dialogName",
        "parameters": [
            {
                "name": "dialogName",
                "description": "class name used in the description.ext / resource.cpp",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] -  \ntrue when the dialog was created successfully",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "createDiaryLink",
        "description": "Creates a link to the section of diary given by subject. Record is selected based on given unit/object, diary record or task.",
        "introduced_version": null,
        "syntax": "'''createDiaryLink''' [subject, record, text]",
        "parameters": [
            {
                "name": "subject",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "record",
                "description": ", [[Task]] or [[Diary Record]]",
                "sqf_type": "Object"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]] - empty string <tt>\"\"</tt> or string in <tt>[[format]] [\"<log subject",
            "sqf_type": "String"
        }
    },
    {
        "name": "createDiaryRecord",
        "description": "Creates a diary entry. Supported tags and their parameters:",
        "introduced_version": null,
        "syntax": "unitName [[createDiaryRecord]] [subject, text, task, taskState, showTitle]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "subject",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "subject",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "title",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Diary Record]]",
            "sqf_type": "Diary"
        }
    },
    {
        "name": "createDiarySubject",
        "description": "Create a new subject page in a log.",
        "introduced_version": null,
        "syntax": "person '''createDiarySubject''' [subject, displayName, picture]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "subject",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "displayName",
                "description": "The visible name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "createDisplay",
        "description": "Creates child display of given display and loads from \"resourceName\". The notable difference between [[createDisplay]] and [[createDialog]] is that with [[createDisplay]] the player would be able to move whilst having control of the mouse pointer.<br><br>\nSince Arma 3 v1.49.131653 [[createDisplay]] returns [[Display]] and will first look in ''description.ext'' for resourceName config, if not found, it will then look in main config.<br><br>\nDisplays created with both [[createDisplay]] and [[createDialog]] will take control of the mouse pointer and will close when user presses <tt>Esc</tt>. \n<code>_emptyDisplay",
        "introduced_version": null,
        "syntax": "parent '''createDisplay''' resourceName",
        "parameters": [
            {
                "name": "parent",
                "description": "",
                "sqf_type": "Display"
            },
            {
                "name": "resourceName",
                "description": "custom display class defined in [[description.ext]] or existing display class from main config",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]] or (''Since Arma 3 v1.49.131653'') [[Display]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "createGearDialog",
        "description": "Opens gear dialog for given unit. Alternatively use [[action]] command:\n<code>[[player]] [[action]] [\"Gear\", [[player]]];</code>",
        "introduced_version": null,
        "syntax": "'''createGearDialog''' [unit, resource]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "createGroup",
        "description": "Creates a new [[Group]] for the given [[Side]].",
        "introduced_version": null,
        "syntax": "[[createGroup]] side",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Group]]",
            "sqf_type": "Group"
        }
    },
    {
        "name": "createGuardedPoint",
        "description": "Adds a point guarded by the given side (scripted way of adding equivalent of \"GUARDED BY\" trigger in [[3DEN|Editor]]). A closest AI group in the given side with assigned \"GUARD\" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules:\n* Given \"position\" is always considered. It could be [[Object]], [[Group]], [[Position2D]] or [[Position3D]]. In every case, z coordinate will be ignored and point will be placed on nearest surface.\n* If \"objectMapID\" is not negative, the position of the object with the given ID is used (Overrides \"position\"). -1 to ignore this argument. z of the object position will be intact.\n* If the given \"vehicle\" is valid, the position of the vehicle is extracted and guarded (Overrides both \"position\" and \"objectMapID\"). [[objNull]] to ignore. z of the vehicle position will be intact.\nFor use with \"GUARD\" [[setWaypointType|waypoint]]. How does \"GUARD\" waypoint work: [[Waypoint:Guard]]",
        "introduced_version": null,
        "syntax": "'''createGuardedPoint''' [side, position, objectMapID, vehicle]",
        "parameters": [
            {
                "name": "side",
                "description": "The side which will be guarding",
                "sqf_type": "Side"
            },
            {
                "name": "position",
                "description": "[[Object]], [[Group]], [[Position2D]] or [[Position3D]]",
                "sqf_type": "Position"
            },
            {
                "name": "objectMapID",
                "description": "static id of map object. -1 to ignore",
                "sqf_type": "Number"
            },
            {
                "name": "vehicle",
                "description": "vehicle to be used for position. [[objNull]] to ignore",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "createLocation",
        "description": "Creates a location of the specified class and dimensions at the specified position. Classes are defined in <tt>CfgLocationTypes</tt>. For possible location types see [[Location#Location Types|Location Types]]. For the actual name text of the location, use [[text]] and [[setText]]",
        "introduced_version": null,
        "syntax": "'''createLocation''' [className, position, sizeX, sizeY]",
        "parameters": [
            {
                "name": "className",
                "description": "see [[Location#Location Types|Location Types]]",
                "sqf_type": "String"
            },
            {
                "name": "sizeX",
                "description": "in meters",
                "sqf_type": "Number"
            },
            {
                "name": "sizeY",
                "description": "in meters",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Location]]",
            "sqf_type": "Location"
        }
    },
    {
        "name": "createMPCampaignDisplay",
        "description": "Create a MP campaign display. The class name must be a mission collection declared in the configs; for example,",
        "introduced_version": null,
        "syntax": "display [[createMPCampaignDisplay]] class",
        "parameters": [
            {
                "name": "class",
                "description": "Mission collection class [[name]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "createMarker",
        "description": "Creates a new map marker at the given position. '''The marker will be created for every player on network as well as JIP'''. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use [[deleteMarker]] to delete global marker.",
        "introduced_version": null,
        "syntax": "[[createMarker]] [name, position, channel, creator]",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "or [[Object]] - format position: [[Position2D]], [[PositionAGL]] or [[Object]] (object's [[PositionWorld]] is used)",
                "sqf_type": "Array"
            },
            {
                "name": "channel",
                "description": "(Optional) The marker channel for MP.",
                "sqf_type": "Number"
            },
            {
                "name": "creator",
                "description": "(Optional) The marker creator for MP.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "createMarkerLocal",
        "description": "Creates a [[local]] marker at the given position. Marker exists only on PC that created it.  The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use [[deleteMarkerLocal]] to delete local marker.<br><br>\nIf position is given in 3D format, <tt>z</tt> coordinate is stored with the marker and will be used when marker is passed to commands like [[createVehicle]], [[createUnit]], [[createAgent]], [[createMine]], [[setVehiclePosition]] for example. However [[getMarkerPos]] and [[markerPos]] will always return 0 for <tt>z</tt>. \n\n<br><br>",
        "introduced_version": null,
        "syntax": "[[createMarkerLocal]] [name, position, channel, creator]",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "or [[Object]] - format position: [[Position2D]], [[PositionAGL]] or [[Object]] (object's [[PositionWorld]] is used)",
                "sqf_type": "Array"
            },
            {
                "name": "channel",
                "description": "(Optional)The marker side for MP.",
                "sqf_type": "Number"
            },
            {
                "name": "creator",
                "description": "(Optional) The marker creator for MP.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "createMenu",
        "description": "Creates a previously added menu.",
        "introduced_version": null,
        "syntax": "map '''createMenu''' index",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "-",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "createMine",
        "description": "Creates a mine of the given type (type is the name of the subclass of <tt>CfgVehicles</tt>). If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The mine is placed inside a circle with this position as its center and placement as its radius. <br><br>",
        "introduced_version": null,
        "syntax": "'''createMine''' [type, position, markers, placement]",
        "parameters": [
            {
                "name": "type",
                "description": "mine type from <tt>CfgVehicles</tt>",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "PositionAGL"
            },
            {
                "name": "markers",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "placement",
                "description": "radius",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "createMissionDisplay",
        "description": "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\".",
        "introduced_version": null,
        "syntax": "[[Display]]",
        "parameters": [
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "missionRootDirectoryString",
                "description": "root direction from \\Arma 3\\Missions\\ROOT",
                "sqf_type": "String"
            },
            {
                "name": "cfgMissionsClass",
                "description": "cfgMissions class to use",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Display]]",
            "sqf_type": "Display"
        }
    },
    {
        "name": "createSimpleObject",
        "description": "Create object with given shape defined as path to .p3d model. Supported [[LOD]]s include [[LOD#Geometry|Geometry]], [[LOD#Fire_Geometry|Fire Geometry]], [[LOD#Roadway|Roadway]], [[LOD#ViewGeometry|View Geometry]] and [[LOD#ShadowVolume|ShadowVolume]]. Supported features include collision, texturing, animation, penetration, AI spotting occlusion, and surface specific sounds (like footsteps). Unsupported features include PhysX, damage, AI pathfinding (causes walking through walls), and built in lights.<br><br>\n\nGiven the simulation limitations, global decorative objects can be created with very little network traffic. Objects that could be exclusively created with this command are: trees, bushes, rocks, bridges, roads, vehicle wrecks, custom models in mission, and other objects without a class in config. The height of the placement position might need to be adjusted experimentally. Some of the model examples could be found here: [[createSimpleObject/objects]]. For Livonia furniture see: [[Arma 3 Livonia Props]].<br><br>\n\nGuide: [[Arma 3 Simple Objects]]<br><br>",
        "introduced_version": null,
        "syntax": "'''createSimpleObject''' [shapeName, positionWorld, local]",
        "parameters": [
            {
                "name": "shapeName",
                "description": "Path to the 3d model (can be obtained with [[getModelInfo]] command)",
                "sqf_type": "String"
            },
            {
                "name": "positionWorld",
                "description": "placement position in format [[PositionWorld]]",
                "sqf_type": "Array"
            },
            {
                "name": "className",
                "description": "[[CfgVehicles]] config class name",
                "sqf_type": "String"
            },
            {
                "name": "positionASL",
                "description": "placement position in format [[PositionASL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Object]] - Created simple object",
            "sqf_type": "Object"
        }
    },
    {
        "name": "createSimpleTask",
        "description": "Creates a new [[Task]]. The task effect is [[local]], it will only exist on the client it was added. \n<br>",
        "introduced_version": null,
        "syntax": "person '''createSimpleTask''' [name, ''parentTask'']",
        "parameters": [
            {
                "name": "person",
                "description": " Unit to add this new task",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Task]] - the new task",
            "sqf_type": "Task"
        }
    },
    {
        "name": "createSite",
        "description": "Create a new site.",
        "introduced_version": null,
        "syntax": "type '''createSite''' pos",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "pos",
                "description": "",
                "sqf_type": "Position"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "createSoundSource",
        "description": "Creates a sound source of the given type (type is the name of the subclass of [[ArmA:_CfgVehicles|CfgVehicles]] which is pointing to the sound defined in [[CfgSFX]]). The actual sound object created is of type <tt>\"#dynamicsound\"</tt> and could be detected with [[allMissionObjects]]. If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius. Some of the vanilla classes pre-configured in Arma 3:\n* <tt>\"Sound_Alarm\"</tt>\n* <tt>\"Sound_Alarm2\"</tt>\n* <tt>\"Sound_BattlefieldExplosions\"</tt>\n* <tt>\"Sound_BattlefieldFirefight\"</tt>\n* <tt>\"Sound_Fire\"</tt>\n* <tt>\"Sound_SmokeWreck1\"</tt>\n* <tt>\"Sound_SparklesWreck1\"</tt>\n* <tt>\"Sound_SparklesWreck2\"</tt>\n* <tt>\"Sound_Stream\"</tt>\nSince Arma 3 v1.69.141183 it is possible to define sounds for use with [[createSoundSource]] in mission config. As mentioned earlier, the sounds needed for this command should be defined inside [[CfgVehicles]] class, which itself references [[CfgSFX]] class. If given class searched in main config and is not found, the search will continue in [[description.ext]]. Here is an example of suitable mission config definition:",
        "introduced_version": null,
        "syntax": "'''createSoundSource''' [type, position, markers, placement]",
        "parameters": [
            {
                "name": "type",
                "description": "[[CfgVehicles]] class",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": ", [[Position2D]] or [[Object]] - Desired placement position",
                "sqf_type": "PositionAGL"
            },
            {
                "name": "markers",
                "description": "If the markers array contains any markers, the position is randomly picked from array of given markers plus desired placement position. If any of the markers were given z coordinate with [[setMarkerPos]], the sound will also be created at given z coordinate",
                "sqf_type": "Array"
            },
            {
                "name": "placement",
                "description": "The sound is placed inside a circle with given position as center and placement as its radius",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "createTask",
        "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.",
        "introduced_version": null,
        "syntax": "teamMember [[createTask]] [",
        "parameters": [
            {
                "name": "type",
                "description": "<tt>name</tt> defined in <tt>CfgTasks</tt>",
                "sqf_type": "String"
            },
            {
                "name": "priority",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name1",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "value1",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Task]]",
            "sqf_type": "Task"
        }
    },
    {
        "name": "createTeam",
        "description": "Create a [[Team|team]] and name it.",
        "introduced_version": null,
        "syntax": "'''createTeam''' [type, name]",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Team Member]]",
            "sqf_type": "Team"
        }
    },
    {
        "name": "createTrigger",
        "description": "Creates a sensor ([[trigger]]) of the given type and at the given position. The type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation",
        "introduced_version": null,
        "syntax": "'''createTrigger''' [type, position, makeGlobal]",
        "parameters": [
            {
                "name": "type",
                "description": "usually \"EmptyDetector\"",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Object]] - created trigger",
            "sqf_type": "Object"
        }
    },
    {
        "name": "createUnit",
        "description": "Create a unit of class that is defined in [[:Category:CfgVehicles|CfgVehicles]].",
        "introduced_version": null,
        "syntax": "group [[createUnit]] [type, position, markers, placement, special]",
        "parameters": [
            {
                "name": "group",
                "description": "Existing group new unit will join",
                "sqf_type": "Group"
            },
            {
                "name": "type",
                "description": "Class name of unit to be created as per [[CfgVehicles]]",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": ", [[Position2D]], [[Object]] or [[Group]] - Location unit is created at. In case of [[Group]] position of the [[group]] [[leader]] is used",
                "sqf_type": "Position"
            },
            {
                "name": "markers",
                "description": "Placement markers",
                "sqf_type": "Array"
            },
            {
                "name": "placement",
                "description": "Placement radius",
                "sqf_type": "Number"
            },
            {
                "name": "type",
                "description": "Class name of unit to be created as per [[CfgVehicles]]",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": ", [[Position2D]], [[Object]] or [[Group]] - Location unit is created at. In case of [[Group]] position of the [[group]] [[leader]] is used",
                "sqf_type": "Position"
            },
            {
                "name": "group",
                "description": "Existing group new unit will join",
                "sqf_type": "Group"
            },
            {
                "name": "init",
                "description": "(Optional, default \"\") Unit init statement, similar to unit init field in the editor. The code placed in unit init will run upon unit creation for every client on network, present and future. The code itself receives the reference to the created unit via local variable [[this]]. Avoid using global commands in unit init statement as it already runs on every client.",
                "sqf_type": "String"
            },
            {
                "name": "skill",
                "description": "(Optional, default 0.5) Unit [[skill]]",
                "sqf_type": "Number"
            },
            {
                "name": "rank",
                "description": "(Optional, default \"PRIVATE\") Unit [[rank]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Object]] - The created unit",
            "sqf_type": "Object"
        }
    },
    {
        "name": "createVehicle",
        "description": "Creates an empty object of given classname type.\nSee [[Arma 3 Assets]] / [[createVehicle/vehicles]], or [[:Category:CfgVehicles]] for earlier games.",
        "introduced_version": null,
        "syntax": "type [[createVehicle]] position",
        "parameters": [
            {
                "name": "type",
                "description": "vehicle/object className",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "Desired placement position. If the exact position is occupied, nearest empty position is used.",
                "sqf_type": "Position"
            },
            {
                "name": "type",
                "description": "vehicle/object className",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "([[PositionAGL]] if boat or amphibious), [[Position2D]], or [[Object]] - desired placement position",
                "sqf_type": "PositionATL"
            },
            {
                "name": "markers",
                "description": "(Optional, default []) if the markers array contains any markers, the position is randomly picked from array of given markers plus desired placement position. If any of the markers were given z coordinate with [[setMarkerPos]], the vehicle will also be created at given z coordinate.",
                "sqf_type": "Array"
            },
            {
                "name": "placement",
                "description": "(Optional, default 0) the vehicle is placed inside a circle with given position as center and placement as its radius.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "createVehicleCrew",
        "description": "Creates vehicle crew corresponding to vehicle's [[faction]]. The command creates driver, if the vehicle has driver position (vehicle config: <tt>hasDriver</tt>) and fills [[allTurrets | all non-FFV turrets]] with gunners, if turrets can have gunners (turret config: <tt>hasGunner</tt>). Any turret that has <tt>dontCreateAI</tt> option set is omitted. If the vehicle is already occupied, the command will only create missing crew.<br><br>\nSince Arma 3 v1.93.145652 this command will return [[Group]] of the created crew which will be vehicle's group. Missing crew will be created in the same group as vehicle. To find out which crew will be created, use [[BIS_fnc_vehicleCrewTurrets]].<br><br>",
        "introduced_version": null,
        "syntax": "[[createVehicleCrew]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle to populate with crew",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Group]] - the group of the created crew (since Arma 3 v1.93.145652)",
            "sqf_type": "Group"
        }
    },
    {
        "name": "createVehicleLocal",
        "description": "Creates an object of the given type. Created object is not transferred through network in MP games. [[netId]] of such vehicle in multiplayer will be \"0:0\". To disable local vehicle creation, use [[CfgDisabledCommands]] to blacklist this command. Alternatively, you can use [[createSimpleObject]] with local option enabled where applicable.",
        "introduced_version": null,
        "syntax": "type '''createVehicleLocal''' position",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "Position"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "crew",
        "description": "Returns the crew (both dead and alive) of the given vehicle.",
        "introduced_version": null,
        "syntax": "'''crew''' vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] -  An array with all units in the vehicle is returned.",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctAddHeader",
        "description": "Adds a header line of controls according to the HeaderTemplate class. It returns an array containing header index and array of created controls in a format [<headerIndex>, [<control0>, <control1>...<control n>]].\n<br>\nNote that rows and headers are indexed separately.",
        "introduced_version": null,
        "syntax": "[[Array]]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctAddRow",
        "description": "Adds one row of controls according to the RowTemplate class. It returns an array containing row index and array of created controls in a format [<rowIndex>, [<control0>, <control1>...<control n>]].\n<br>\nNote that rows and headers are indexed separately.",
        "introduced_version": null,
        "syntax": "[[Array]]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctClear",
        "description": "Removes all the lines from the RscControlsTable. Returns Nothing.",
        "introduced_version": null,
        "syntax": "'''ctClear''' ctrl",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctCurSel",
        "description": "Returns index of the selected row. Will take only rows, but not headers into account.",
        "introduced_version": null,
        "syntax": "'''ctCurSel''' ctrl",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctData",
        "description": "Returns metadata (string) associated with a particular row of RscControlsTable.",
        "introduced_version": null,
        "syntax": "ctrl '''ctData''' row",
        "parameters": [
            {
                "name": "ctrl",
                "description": "The respective control",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "The row index",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "ctFindHeaderRows",
        "description": "Takes index of a header as a parameter. Returns array of indices of rows under this header.",
        "introduced_version": null,
        "syntax": "ctrl '''ctFindHeaderRows''' index",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctFindRowHeader",
        "description": "Takes index of a row as a parameter. Returns index of the closest header above this row.",
        "introduced_version": null,
        "syntax": "ctrl '''ctFindRowHeader''' row",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctHeaderControls",
        "description": "Returns array of controls on the header with the given index.",
        "introduced_version": null,
        "syntax": "ctrl '''ctHeaderControls''' index",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctHeaderCount",
        "description": "Returns number of headers (rows not included) in the RscControlsTable.",
        "introduced_version": null,
        "syntax": "'''ctHeaderCount''' ctrl",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctRemoveHeaders",
        "description": "Takes array of header indices as a parameter and removes headers with those indices. Indices of remaining headers will be recomputed.",
        "introduced_version": null,
        "syntax": "ctrl '''ctRemoveHeaders''' indices",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "indices",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctRemoveRows",
        "description": "Takes array of row indices as a parameter and removes rows with those indices. Indices of remaining rows will be recomputed.",
        "introduced_version": null,
        "syntax": "ctrl '''ctRemoveRows''' indices",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "indices",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctRowControls",
        "description": "Returns array of controls on the row with the given index.",
        "introduced_version": null,
        "syntax": "[[Array]]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctRowCount",
        "description": "Returns number of rows (headers not included) in the RscControlsTable.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctSetCurSel",
        "description": "Selects the line with the given index. Will take only rows, but not headers into account. -1 deselects all. Returns Nothing.",
        "introduced_version": null,
        "syntax": "[[Control]] '''ctSetCurSel''' [[Number]]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctSetData",
        "description": "Associates metadata (string) with the row determined by the index. Returns Nothing.",
        "introduced_version": null,
        "syntax": "ctrl '''ctSetData''' [index, data]",
        "parameters": [
            {
                "name": "ctrl",
                "description": "The respective control",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "The row index",
                "sqf_type": "Number"
            },
            {
                "name": "data",
                "description": "The data to set",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctSetHeaderTemplate",
        "description": "Takes config path to the new header template. Clears the whole RscControlsTable and sets the new header template.",
        "introduced_version": null,
        "syntax": "[[Control]] '''ctSetHeaderTemplate''' [[Config]]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctSetRowTemplate",
        "description": "Takes config path to the new row template. Clears the whole RscControlsTable and sets the new row template (Deleting all rows and headers is easier to implement than replacing the rows and filling them with new data. IDCs could overflow etc.).",
        "introduced_version": null,
        "syntax": "[[Control]] '''ctSetRowTemplate''' [[Config]]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctSetValue",
        "description": "Associates metadata (number) with the row determined by the index. Returns Nothing.",
        "introduced_version": null,
        "syntax": "control '''ctSetValue''' [index, value]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctValue",
        "description": "Returns metadata (number) associated with a particular row of RscControlsTable.",
        "introduced_version": null,
        "syntax": "control '''ctValue''' index",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlActivate",
        "description": "Launch actions attached to given (button based) control. <br> \nCommand only triggers '''action''' entry described in control config and engine-based actions (cancel or ok codes) and will not trigger button related [[User_Interface_Event_Handlers|User Interface Event Handlers]].<br>\nCommand ignores control disabled state. (Example 2)",
        "introduced_version": null,
        "syntax": "'''ctrlActivate''' controlName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlAddEventHandler",
        "description": "Add an event handler ([[User Interface Event Handlers]]) to the given control. Returns id of the handler or -1 when failed.<br><br>",
        "introduced_version": null,
        "syntax": "control '''ctrlAddEventHandler''' [handler,function]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "handler",
                "description": "handler name",
                "sqf_type": "String"
            },
            {
                "name": "function",
                "description": "or [[Code]] - script",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlAngle",
        "description": "Gets rotation info of an <tt>ST_PICTURE</tt> control.",
        "introduced_version": null,
        "syntax": "[[ctrlAngle]] control",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - format [angle, centerX, centerY]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctrlAnimateModel",
        "description": "Process an animation of 3D [[Arma: GUI Configuration]]. Command uses name defined by source property and works similar like [[animateSource]] command.",
        "introduced_version": null,
        "syntax": "control '''ctrlAnimateModel''' [source, phase]",
        "parameters": [
            {
                "name": "source",
                "description": "common source",
                "sqf_type": "String"
            },
            {
                "name": "phase",
                "description": "wanted animation phase",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlAnimationPhaseModel",
        "description": "Returns current animation phase of given source. Similar to [[animationSourcePhase]].",
        "introduced_version": null,
        "syntax": "control '''ctrlAnimationPhaseModel''' source",
        "parameters": [
            {
                "name": "source",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlAutoScrollDelay",
        "description": "Returns number of seconds auto-scroll will wait before scroll and/or rewind. -2 if scrollbar not present. \n<br><br>\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and [[CT_CONTROLS_GROUP]] types of controls only. Autoscroll will wait [[ctrlAutoScrollDelay]] seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. [[ctrlAutoScrollSpeed]] defines the speed with which scrollbar is scrolled. If [[ctrlAutoScrollRewind]] is [[true]], the control will fade out, immediately rewind to the top, then fade in, wait [[ctrlAutoScrollDelay]] seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
        "introduced_version": null,
        "syntax": "'''ctrlAutoScrollDelay''' control",
        "parameters": [
            {
                "name": "control",
                "description": "[[DialogControls-ListBoxes|CT_LISTBOX]] or [[CT_CONTROLS_GROUP]]",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlAutoScrollRewind",
        "description": "Returns [[true]] if auto-scroll should move back to start after it reaches the end.\n<br><br>\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and [[CT_CONTROLS_GROUP]] types of controls only. Autoscroll will wait [[ctrlAutoScrollDelay]] seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. [[ctrlAutoScrollSpeed]] defines the speed with which scrollbar is scrolled. If [[ctrlAutoScrollRewind]] is [[true]], the control will fade out, immediately rewind to the top, then fade in, wait [[ctrlAutoScrollDelay]] seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
        "introduced_version": null,
        "syntax": "'''ctrlAutoScrollRewind''' control",
        "parameters": [
            {
                "name": "control",
                "description": "[[DialogControls-ListBoxes|CT_LISTBOX]] or [[CT_CONTROLS_GROUP]]",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ctrlAutoScrollSpeed",
        "description": "Returns number of seconds to auto-scroll one line. -1 if auto-scroll is disabled. -2 if scrollbar not present. \n<br><br>\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and [[CT_CONTROLS_GROUP]] types of controls only. Autoscroll will wait [[ctrlAutoScrollDelay]] seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. [[ctrlAutoScrollSpeed]] defines the speed with which scrollbar is scrolled. If [[ctrlAutoScrollRewind]] is [[true]], the control will fade out, immediately rewind to the top, then fade in, wait [[ctrlAutoScrollDelay]] seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
        "introduced_version": null,
        "syntax": "'''ctrlAutoScrollSpeed''' control",
        "parameters": [
            {
                "name": "control",
                "description": "[[DialogControls-ListBoxes|CT_LISTBOX]] or [[CT_CONTROLS_GROUP]]",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlChecked",
        "description": "Returns the current state of given [[CT_CHECKBOXES]] control. Since Arma 3 v1.71.141591 it is possible to query multiple checkboxes by providing checkbox index. For more information see [[CT_CHECKBOXES]].<br><br>",
        "introduced_version": null,
        "syntax": "'''ctrlChecked''' control",
        "parameters": [
            {
                "name": "control",
                "description": "[[CT_CHECKBOXES]] control. If control contain multiple checkboxes, only checkbox with index 0 is queried.",
                "sqf_type": "Control"
            },
            {
                "name": "control",
                "description": "[[CT_CHECKBOXES]] control",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "checkbox index",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] checked, [[false]] unchecked",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ctrlClassName",
        "description": "Returns the class name of a [[Control]] as it is defined in config. If you need config class of a game created [[Display]], it is stored on display itself:\n<code>_className",
        "introduced_version": null,
        "syntax": "'''ctrlClassName''' control",
        "parameters": [],
        "returns": {
            "description": "[[String]] - class name",
            "sqf_type": "String"
        }
    },
    {
        "name": "ctrlCommit",
        "description": "Commits control animation to last specified duration. <br><br>",
        "introduced_version": null,
        "syntax": "control '''ctrlCommit''' time",
        "parameters": [
            {
                "name": "control",
                "description": "control to animate",
                "sqf_type": "Control"
            },
            {
                "name": "time",
                "description": "animation duration",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlCommitted",
        "description": "Check if the control animation is finished.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ctrlCreate",
        "description": "Creates a new control in the given display.<br/>\nThe control class could be an existing class from the [[configFile | main config]] or a custom class defined in the [[missionConfigFile | mission config]]. The main config is searched first, if the class does not exist there, the mission config is searched. Some of the common controls defined in the main config that can be used with this command:",
        "introduced_version": null,
        "syntax": "display '''ctrlCreate''' [class, idc, controlsGroup]",
        "parameters": [
            {
                "name": "display",
                "description": "Display in which control will be created",
                "sqf_type": "Display"
            },
            {
                "name": "class",
                "description": "Existing classname (see [[ctrlCreate/classnames]]) of the new control (Since  Arma 3 v1.69.141213 it is possible to use classes defined in mission config)",
                "sqf_type": "String"
            },
            {
                "name": "idc",
                "description": "IDC of the new control (use -1 if you don't care what it should be)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Control]]",
            "sqf_type": "Control"
        }
    },
    {
        "name": "ctrlDelete",
        "description": "Deletes given control. The control has to be created either by script with [[ctrlCreate]] or to have <tt>deletable</tt> property in config set to [[true]]. Use [[ctrlShow]] [[false]] and [[ctrlEnable]] [[false]] to disable controls that cannot be deleted. Returns [[Boolean]] indicating  whether the deletion was successful.",
        "introduced_version": null,
        "syntax": "'''ctrlDelete''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ctrlEnable",
        "description": "Enable or disable a control of the currently active user dialog. Disabled controls cannot be clicked onto.\n\nRead [[Arma: GUI Configuration]] for more information about user dialogs and controls.",
        "introduced_version": null,
        "syntax": "'''ctrlEnable''' [idc, enable]",
        "parameters": [
            {
                "name": "idc",
                "description": "control ID",
                "sqf_type": "Number"
            },
            {
                "name": "enable",
                "description": "true to enable the control, false to disable it",
                "sqf_type": "Boolean"
            },
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlEnabled",
        "description": "Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be focused.\n\nRead [[Arma: GUI Configuration]] for more information about user dialogs and controls.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "idc",
                "description": "control ID",
                "sqf_type": "Number"
            },
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]] -  \ntrue if the control is enabled, false if not.",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ctrlFade",
        "description": "Returns the current fade factor of control.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlHTMLLoaded",
        "description": "Returns [[true]] when HTML content was successfully loaded.",
        "introduced_version": null,
        "syntax": "'''ctrlHTMLLoaded''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ctrlIDC",
        "description": "Returns control IDC.",
        "introduced_version": null,
        "syntax": "'''ctrlIDC''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlIDD",
        "description": "Returns display IDD.",
        "introduced_version": null,
        "syntax": "'''ctrlIDD''' display",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlMapAnimAdd",
        "description": "Adds the next frame to the map animation.",
        "introduced_version": null,
        "syntax": "map '''ctrlMapAnimAdd''' [time, zoom, position]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "zoom",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "position",
                "description": "or [[Object]] - formats: [[Position2D]], [[Position3D]], [[Object]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlMapAnimClear",
        "description": "Clears the map animation.",
        "introduced_version": null,
        "syntax": "'''ctrlMapAnimClear''' controlName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlMapAnimCommit",
        "description": "Plays the map animation.",
        "introduced_version": null,
        "syntax": "'''ctrlMapAnimCommit''' controlName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlMapAnimDone",
        "description": "Checks whether the map animation has finished.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ctrlMapCursor",
        "description": "Changes the default cursor that appears when interacting with a map control to a custom one. Use an empty string to restore the default cursor. If the specified cursor does not exist, the default is used and no error is produced. ( NOT in case of Arma 3. Using an empty string will result in an error: \"No entry 'bin\\config.bin/CfgWrapperUI/Cursors.' ). The cursor is the name of a config entry from ''CfgWrapperUI / Cursors''. This command has the following specifics:\n* When used on Main Map ([[findDisplay]] 12 [[displayCtrl]] 51) it is possible to override multiple default cursors. For example, while leaving default \"Arrow\" intact, it is possible to just override \"Scroll\" with lets say \"Wait\" (Example 3)\n* When used on a custom map, for example user made Mini Map, there is only one single cursor \"\" for everything, therefore only this cursor can be overridden (see Example 4 on how to override it)\nSome possible class names (for the whole list see [[ctrlMapCursor/cursors]]):\n* Arrow\n* Track\n* Move\n* Scroll\n* Rotate\n* Track3D\n* Move3D\n* Rotate3D\n* Raise3D\n* Wait\n* HC_move\n* HC_overFriendly\n* HC_overEnemy\n* HC_overMission\n* HC_unsel\n'''NOTE1''': Cursor names are '''case sensitive'''.",
        "introduced_version": null,
        "syntax": "control '''ctrlMapCursor''' [defaultCursor, newCursor]",
        "parameters": [
            {
                "name": "control",
                "description": "Map control",
                "sqf_type": "Control"
            },
            {
                "name": "defaultCursor",
                "description": "Cursor class name",
                "sqf_type": "String"
            },
            {
                "name": "newCursor",
                "description": "Cursor class name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlMapMouseOver",
        "description": "Returns description of map sign mouse cursor is over. Works with in-game map as well as 2D editor map in edit mode.",
        "introduced_version": null,
        "syntax": "'''ctrlMapMouseOver''' control",
        "parameters": [
            {
                "name": "control",
                "description": "map control",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]] - Possible values:\n* [\"unit\", [[Object]]]\n* [\"vehicle\", [[Object]]]\n* [\"vehicleGroup\", [[Object]]]\n* [\"object\", [[Object]]]\n* [\"waypoint\", [[Waypoint]]]\n* [\"trigger\", [[Object]]]\n* [\"marker\", [[String]]]\n* [\"task\", [[Task]]]\n* [\"customMark\"]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctrlMapScale",
        "description": "Returns the current scale of given map control.",
        "introduced_version": null,
        "syntax": "'''ctrlMapScale''' ctrl",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlMapScreenToWorld",
        "description": "Converts map screen coordinates into world coordinates. Unlike [[posScreenToWorld]], this command returns world position is format [x, y], otherwise it is identical to [[posScreenToWorld]].",
        "introduced_version": null,
        "syntax": "control '''ctrlMapScreenToWorld''' [x, y]",
        "parameters": [
            {
                "name": "control",
                "description": "map control",
                "sqf_type": "Control"
            },
            {
                "name": "x",
                "description": "screen X",
                "sqf_type": "Number"
            },
            {
                "name": "y",
                "description": "screen Y",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - world coordinates in format [[Position2D]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctrlMapWorldToScreen",
        "description": "Converts world coordinates into map screen coordinates. This command is identical to [[posWorldToScreen]].",
        "introduced_version": null,
        "syntax": "control [[ctrlMapWorldToScreen]] position",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - screen coordinates in format [x, y]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctrlModel",
        "description": "Returns model used in 3D-[[Arma: GUI Configuration|Dialog]].",
        "introduced_version": null,
        "syntax": "'''ctrlModel''' control",
        "parameters": [],
        "returns": {
            "description": "[[String]] - model path",
            "sqf_type": "String"
        }
    },
    {
        "name": "ctrlModelDirAndUp",
        "description": "Returns [[vectorDir]] and [[vectorUp]] of the model used in 3D-[[Arma: GUI Configuration|Dialogs]].",
        "introduced_version": null,
        "syntax": "'''ctrlModelDirAndUp''' control",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - format [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctrlModelScale",
        "description": "Returns 3D control model scale",
        "introduced_version": null,
        "syntax": "'''ctrlModelScale''' control",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlParent",
        "description": "Returns the parent [[Display]] of the given control. For parent [[Control]]s group see [[ctrlParentControlsGroup]].",
        "introduced_version": null,
        "syntax": "[[ctrlParent]] control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Display]]",
            "sqf_type": "Display"
        }
    },
    {
        "name": "ctrlParentControlsGroup",
        "description": "Returns the parent control of a given child control. If the control is not part of a [[CT_CONTROLS_GROUP]] control then [[controlNull]] is returned. To return parent [[Display]] of the control use [[ctrlParent]].",
        "introduced_version": null,
        "syntax": "[[ctrlParentControlsGroup]] ctrl",
        "parameters": [
            {
                "name": "ctrl",
                "description": "child control",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Control]]",
            "sqf_type": "Control"
        }
    },
    {
        "name": "ctrlPosition",
        "description": "Returns the current position of 2D control as [x, y, w, h] array. For 3D control it returns relative [x,y,z].",
        "introduced_version": null,
        "syntax": "'''ctrlPosition''' controlName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctrlRemoveAllEventHandlers",
        "description": "Remove all event handlers from the given control.",
        "introduced_version": null,
        "syntax": "control '''ctrlRemoveAllEventHandlers''' handlerName",
        "parameters": [
            {
                "name": "control",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "handlerName",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlRemoveEventHandler",
        "description": "Remove a given event handler from the given control.",
        "introduced_version": null,
        "syntax": "control '''ctrlRemoveEventHandler''' [handler name,id]",
        "parameters": [
            {
                "name": "control",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlScale",
        "description": "Returns the current scale of the control.",
        "introduced_version": null,
        "syntax": "[[ctrlScale]] control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlSetActiveColor",
        "description": "Sets text color of given control when control is selected.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetActiveColor''' color",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "(format [[Color|Color (RGBA)]])",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetAngle",
        "description": "Sets the rotation of an <tt>ST_PICTURE</tt> control. Rotation will be done within the control boundaries, so if the X and Y are given off center, the picture may get clipped by the control boundaries. Doesn't require [[ctrlCommit]]. Procedural textures filled controls do not rotate.",
        "introduced_version": null,
        "syntax": "control [[ctrlSetAngle]] [angle, centerX, centerY]",
        "parameters": [
            {
                "name": "control",
                "description": "picture control",
                "sqf_type": "Control"
            },
            {
                "name": "angle",
                "description": "Rotation angle (clockwise)",
                "sqf_type": "Number"
            },
            {
                "name": "centerX",
                "description": "Rotation center X in range 0 to 1 (0.5 - control center)",
                "sqf_type": "Number"
            },
            {
                "name": "centerY",
                "description": "Rotation center Y in range 0 to 1 (0.5 - control center)",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "picture control",
                "sqf_type": "Control"
            },
            {
                "name": "angle",
                "description": "Rotation angle (clockwise)",
                "sqf_type": "Number"
            },
            {
                "name": "centerX",
                "description": "Rotation center X in range 0 to 1 (0.5 - control center)",
                "sqf_type": "Number"
            },
            {
                "name": "centerY",
                "description": "Rotation center Y in range 0 to 1 (0.5 - control center)",
                "sqf_type": "Number"
            },
            {
                "name": "now",
                "description": "''(default: [[true]])'' - if [[false]] control will wait for [[ctrlCommit]] input for result to apply",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetAutoScrollDelay",
        "description": "Sets number of second before auto-scroll starts/rewinds. Setter for [[ctrlAutoScrollDelay]].\n<br><br>\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and [[CT_CONTROLS_GROUP]] types of controls only. Autoscroll will wait [[ctrlAutoScrollDelay]] seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. [[ctrlAutoScrollSpeed]] defines the speed with which scrollbar is scrolled. If [[ctrlAutoScrollRewind]] is [[true]], the control will fade out, immediately rewind to the top, then fade in, wait [[ctrlAutoScrollDelay]] seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetAutoScrollDelay''' delay",
        "parameters": [
            {
                "name": "control",
                "description": "[[DialogControls-ListBoxes|CT_LISTBOX]] or [[CT_CONTROLS_GROUP]]",
                "sqf_type": "Control"
            },
            {
                "name": "delay",
                "description": "seconds to wait before scroll and/or rewind",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetAutoScrollRewind",
        "description": "Defines if scroll should rewind when auto-scroll reach end. Setter for [[ctrlAutoScrollRewind]].\n<br><br>\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and [[CT_CONTROLS_GROUP]] types of controls only. Autoscroll will wait [[ctrlAutoScrollDelay]] seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. [[ctrlAutoScrollSpeed]] defines the speed with which scrollbar is scrolled. If [[ctrlAutoScrollRewind]] is [[true]], the control will fade out, immediately rewind to the top, then fade in, wait [[ctrlAutoScrollDelay]] seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetAutoScrollRewind''' set",
        "parameters": [
            {
                "name": "control",
                "description": "[[DialogControls-ListBoxes|CT_LISTBOX]] or [[CT_CONTROLS_GROUP]]",
                "sqf_type": "Control"
            },
            {
                "name": "set",
                "description": "[[true]] to enable rewind",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetAutoScrollSpeed",
        "description": "Sets number of second required to scroll to next line. If speed < 0, auto-scroll is disabled. Setter for [[ctrlAutoScrollSpeed]].\n<br><br>\nAutorscroll is available for [[DialogControls-ListBoxes|CT_LISTBOX]] and [[CT_CONTROLS_GROUP]] types of controls only. Autoscroll will wait [[ctrlAutoScrollDelay]] seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. [[ctrlAutoScrollSpeed]] defines the speed with which scrollbar is scrolled. If [[ctrlAutoScrollRewind]] is [[true]], the control will fade out, immediately rewind to the top, then fade in, wait [[ctrlAutoScrollDelay]] seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetAutoScrollSpeed''' speed",
        "parameters": [
            {
                "name": "control",
                "description": "[[DialogControls-ListBoxes|CT_LISTBOX]] or [[CT_CONTROLS_GROUP]]",
                "sqf_type": "Control"
            },
            {
                "name": "speed",
                "description": "seconds to autoscroll to the next line",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetBackgroundColor",
        "description": "Sets background color of given control. Only affects [[CT_COMBO]], [[CT_STATIC]], [[CT_STRUCTURED_TEXT]], [[CT_MAP]] and [[CT_MAP_MAIN]].",
        "introduced_version": null,
        "syntax": "control '''ctrlSetBackgroundColor''' color",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "(format [[Color|Color (RGBA)]])",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetChecked",
        "description": "Sets checked state of a [[CT_CHECKBOXES]] control. Since Arma 3 v1.71.141591 it is possible to check checkbox with given index in multiple checkboxes set-up. For more information see [[CT_CHECKBOXES]].",
        "introduced_version": null,
        "syntax": "control '''ctrlSetChecked''' checked",
        "parameters": [
            {
                "name": "control",
                "description": "[[CT_CHECKBOXES]] control. If control contain multiple checkboxes, only checkbox with index 0 is queried.",
                "sqf_type": "Control"
            },
            {
                "name": "checked",
                "description": "[[true]] to check, [[false]] to uncheck the checkbox",
                "sqf_type": "Boolean"
            },
            {
                "name": "control",
                "description": "[[CT_CHECKBOXES]] control",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "checkbox index",
                "sqf_type": "Number"
            },
            {
                "name": "checked",
                "description": "[[true]] to check, [[false]] to uncheck the checkbox",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetDisabledColor",
        "description": "Sets the colorDisabled attribute of a control.",
        "introduced_version": null,
        "syntax": "[[ctrlSetDisabledColor]] [idc, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "RGBA Color",
                "sqf_type": "Color"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "RGBA Color",
                "sqf_type": "Color"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "ctrlSetEventHandler",
        "description": "Sets given event handler of given control.\n\nThe provided function should return true/false indicating that the event has handled this event fully or not and whether the engine should execute it is default code or not afterwards. \n\nSee [[User_Interface_Event_Handlers|User Interface Event Handlers]] for the full list of handler names.\n\nIf applicable, see [[DIK_KeyCodes]] for a list of key code constants, which are relevant to key related user interface events like: [[User_Interface_Event_Handlers#onKeyDown|KeyDown]] & [[User_Interface_Event_Handlers#onKeyUp|KeyUp]].",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetEventHandler''' [handlerName, function]",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "handlerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "function",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFade",
        "description": "Sets wanted transparency for control animation. Requires [[ctrlCommit]] to commit changes. To hide or show a control instantly, use [[ctrlShow]].",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFade''' fade",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fade",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFocus",
        "description": "Set the input focus on given control.",
        "introduced_version": null,
        "syntax": "'''ctrlSetFocus''' controlName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFont",
        "description": "Sets the font for given control (see [[Fonts#Available_Fonts|Fonts]])\n<br><br><u>Available Arma 3 fonts</u>\n* \"EtelkaMonospacePro\"\n* \"EtelkaMonospaceProBold\"\n* \"EtelkaNarrowMediumPro\"\n* \"LCD14\"\n* \"LucidaConsoleB\"\n* \"PuristaBold\"\n* \"PuristaLight\"\n* \"PuristaMedium\"\n* \"PuristaSemibold\"\n* \"RobotoCondensed\"\n* \"RobotoCondensedBold\"\n* \"RobotoCondensedLight\"\n* \"TahomaB\"",
        "introduced_version": null,
        "syntax": "control '''ctrlSetFont''' fontName",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "one of the fonts defined in CfgFontFamilies",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH1",
        "description": "Sets H1 font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH1''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH1B",
        "description": "Sets H1 bold font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH1B''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH2",
        "description": "Sets H2 font of given HTML control",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH2''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH2B",
        "description": "Sets H2 bold font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH2B''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH3",
        "description": "Sets H3 font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH3''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH3B",
        "description": "Sets H3 bold font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH3B''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH4",
        "description": "Sets H4 font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH4''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH4B",
        "description": "Sets H4 bold font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH4B''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH5",
        "description": "Sets H5 font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH5''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH5B",
        "description": "Sets H5 bold font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH5B''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH6",
        "description": "Sets H6 font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH6''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontH6B",
        "description": "Sets H6 bold font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontH6B''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontHeight",
        "description": "Sets the <tt>sizeEx</tt> property for most controls as follows: \n* <tt>CT_MAP</tt> - \"sizeExNames\"\n* <tt>CT_STRUCTURED_TEXT</tt> - \"size\" (since Arma 3 v2.01)\n* <tt>CT_HTML</tt> - \"P\" >> \"sizeEx\"\n* Other - \"sizeEx\"\nFor getter command see [[ctrlFontHeight]]",
        "introduced_version": null,
        "syntax": "control '''ctrlSetFontHeight''' size",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "size",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontHeightH1",
        "description": "Sets H1 font size of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontHeightH1''' height",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "height",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontHeightH2",
        "description": "Sets H2 font size of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontHeightH2''' height",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "height",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontHeightH3",
        "description": "Sets H3 font size of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontHeightH3''' height",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "height",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontHeightH4",
        "description": "Sets H3 font size of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontHeightH4''' height",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "height",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontHeightH5",
        "description": "Sets H5 font size of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontHeightH5''' height",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "height",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontHeightH6",
        "description": "Sets H6 font size of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontHeightH6''' height",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "height",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontHeightSecondary",
        "description": "Sets the font size of the secondary text of given control.",
        "introduced_version": null,
        "syntax": "ctrl [[ctrlSetFontHeightSecondary]] value",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontP",
        "description": "Sets P font of given HTML control or its size.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetFontP''' fontOrSize",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontOrSize",
                "description": "or [[Number]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontPB",
        "description": "Sets P bold font of given HTML control.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetFontPB''' fontName",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetFontSecondary",
        "description": "Sets the font size of the secondary text of given control.",
        "introduced_version": null,
        "syntax": "ctrl [[ctrlSetFontSecondary]] fontClass",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "fontClass",
                "description": "Font class",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetForegroundColor",
        "description": "Sets foreground color of given control. Color is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "control '''ctrlSetForegroundColor''' color",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetModel",
        "description": "Sets model for 3D-[[Arma: GUI Configuration|Dialogs]].",
        "introduced_version": null,
        "syntax": "control '''ctrlSetModel''' model",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetModelDirAndUp",
        "description": "Sets orientation of 3D control model. It is similar to [[setVectorDirAndUp]] command for an object.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetModelDirAndUp''' [dir, up]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetModelScale",
        "description": "Sets 3D control model scale",
        "introduced_version": null,
        "syntax": "control '''ctrlSetModelScale''' scale",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetPixelPrecision",
        "description": "Enable or disable pixel precision (rounding) in a given control interface.",
        "introduced_version": null,
        "syntax": "controlName [[ctrlSetPixelPrecision]] mode",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetPosition",
        "description": "Sets wanted position and size for 2D control animation. Width and height are optional. [[ctrlCommit]] is required to complete the operation. For 3D control, param is relative [x,y,z] and no [[ctrlCommit]] is required as it cannot be animated.",
        "introduced_version": null,
        "syntax": "controlName '''ctrlSetPosition''' [x, y]",
        "parameters": [
            {
                "name": "controlName",
                "description": "2D control",
                "sqf_type": "Control"
            },
            {
                "name": "controlName",
                "description": "2D control",
                "sqf_type": "Control"
            },
            {
                "name": "controlName",
                "description": "3D control",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetPositionH",
        "description": "Sets wanted H position for 2D control. [[ctrlCommit]] is required to complete the operation.",
        "introduced_version": null,
        "syntax": "controlName [[ctrlSetPositionH]] h",
        "parameters": [
            {
                "name": "controlName",
                "description": "2D control",
                "sqf_type": "Control"
            },
            {
                "name": "h",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetPositionW",
        "description": "Sets wanted W position for 2D control. [[ctrlCommit]] is required to complete the operation.",
        "introduced_version": null,
        "syntax": "controlName [[ctrlSetPositionW]] w",
        "parameters": [
            {
                "name": "controlName",
                "description": "2D control",
                "sqf_type": "Control"
            },
            {
                "name": "w",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetPositionX",
        "description": "Sets wanted X position for 2D control. [[ctrlCommit]] is required to complete the operation.",
        "introduced_version": null,
        "syntax": "controlName [[ctrlSetPositionX]] x",
        "parameters": [
            {
                "name": "controlName",
                "description": "2D control",
                "sqf_type": "Control"
            },
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetPositionY",
        "description": "Sets wanted Y position for 2D control. [[ctrlCommit]] is required to complete the operation.",
        "introduced_version": null,
        "syntax": "controlName [[ctrlSetPositionY]] y",
        "parameters": [
            {
                "name": "controlName",
                "description": "2D control",
                "sqf_type": "Control"
            },
            {
                "name": "y",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetScale",
        "description": "Sets wanted scale for control animation. Top left corner remains same. This command requires [[ctrlCommit]].",
        "introduced_version": null,
        "syntax": "control '''ctrlSetScale''' scale",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "scale",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetStructuredText",
        "description": "Set the [[Structured Text]] which will be displayed in [[DialogControls-Text#CT_STRUCTURED_TEXT.3D13|structured text control]].",
        "introduced_version": null,
        "syntax": "control [[ctrlSetStructuredText]] structuredText",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetText",
        "description": "Set the text of a control of the currently active user dialog or display. This command can be used for: static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path.\n\nRead [[Arma: GUI Configuration]] for more information about user dialogs and controls.",
        "introduced_version": null,
        "syntax": "[[ctrlSetText]] [idc, text]",
        "parameters": [
            {
                "name": "idc",
                "description": "control ID",
                "sqf_type": "Number"
            },
            {
                "name": "text",
                "description": "text or image path, depending on the control type",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetTextColor",
        "description": "Sets text color of given control. Color is in format [[Color|Color (RGBA)]]. As of Arma 3 v1.40 this command can also be used to change fill-color of a [[CT_PROGRESS]] control.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetTextColor''' color",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetTextColorSecondary",
        "description": "Sets the secondary text color of a text control.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetTextColorSecondary''' color",
        "parameters": [
            {
                "name": "control",
                "description": "Text control",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "Color in format RGBA",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetTextSecondary",
        "description": "Sets the secondary text of a text control.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetTextSecondary''' text",
        "parameters": [
            {
                "name": "control",
                "description": "Text control",
                "sqf_type": "Control"
            },
            {
                "name": "text",
                "description": "Secondary text",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetTextSelection",
        "description": "Selects <tt>length</tt> characters of edit control from the <tt>start</tt> position and places cursor at the end of selection.",
        "introduced_version": null,
        "syntax": "control [[ctrlSetTextSelection]] [start, length]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "start",
                "description": "selection start position",
                "sqf_type": "Number"
            },
            {
                "name": "length",
                "description": "length of characters to select (0 to only move the cursor). Negative length will select text from right to left (see example 3)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetTooltip",
        "description": "Sets tooltip text of given control.",
        "introduced_version": null,
        "syntax": "control '''ctrlSetTooltip''' text",
        "parameters": [
            {
                "name": "control",
                "description": "Any [[Dialogs|control type]], (except for CT_STATIC & CT_STRUCTURED_TEXT, although Arma 3 now supports these too)",
                "sqf_type": "Control"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetTooltipColorBox",
        "description": "Sets tooltip border color of given control. Color is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "control '''ctrlSetTooltipColorBox''' color",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetTooltipColorShade",
        "description": "Sets tooltip background color of given control. Color is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "control '''ctrlSetTooltipColorShade''' color",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlSetTooltipColorText",
        "description": "Sets tooltip text color of given control. Color is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "display '''ctrlSetTooltipColorText''' color",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlShow",
        "description": "Set if a control of the currently active user dialog is shown or not.\n\nRead [[Arma: GUI Configuration]] for more information about user dialogs and controls.",
        "introduced_version": null,
        "syntax": "[[ctrlShow]] [idc, show]",
        "parameters": [
            {
                "name": "idc",
                "description": "control ID",
                "sqf_type": "Number"
            },
            {
                "name": "show",
                "description": "true if the control should be shown, false if not",
                "sqf_type": "Boolean"
            },
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ctrlShown",
        "description": "Returns whether given control is shown.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ctrlText",
        "description": "Returns the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path. Does not work on HTML control and returns empty string \"\".",
        "introduced_version": null,
        "syntax": "'''ctrlText''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": "control ID",
                "sqf_type": "Number"
            },
            {
                "name": "controlName",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]] - The text or image path is returned, dependent on the control type.",
            "sqf_type": "String"
        }
    },
    {
        "name": "ctrlTextHeight",
        "description": "Returns the control text height. Supported control [[ctrlType|types]] are:\n* [[DialogControls-Text|CT_STATIC]] 0\n* [[CT_EDIT]] 2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(''Since Arma 3 v1.57.135040'')\n* [[DialogControls-Text|CT_STRUCTURED_TEXT]] 13",
        "introduced_version": null,
        "syntax": "'''ctrlTextHeight''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlTextSecondary",
        "description": "Returns the secondary text of a text control.",
        "introduced_version": null,
        "syntax": "'''ctrlTextSecondary''' control",
        "parameters": [
            {
                "name": "control",
                "description": "Text control",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]] - Secondary text of given control",
            "sqf_type": "String"
        }
    },
    {
        "name": "ctrlTextSelection",
        "description": "Returns edit control text selection in format [start, length, selectedText].",
        "introduced_version": null,
        "syntax": "[[ctrlTextSelection]] control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]] in format [start, length, selectedText] where:\n* start: [[Number]] - position in text selection started\n* length: [[Number]] - number of the highlighted characters (this number could be negative, see description)\n* selectedText: [[String]] - selected text",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ctrlTextWidth",
        "description": "Returns the width of the control text including left and right margins (0.008 each). Supported control [[ctrlType|types]] are:\n* [[DialogControls-Text|CT_STATIC]] 0\n* [[CT_EDIT]] 2\n* [[DialogControls-Text|CT_STRUCTURED_TEXT]] 13",
        "introduced_version": null,
        "syntax": "'''ctrlTextWidth''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlType",
        "description": "Returns number representing the type of control, which is also defined by ''type'' property in config. For more information see [[Arma: GUI Configuration]]",
        "introduced_version": null,
        "syntax": "'''ctrlType''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ctrlVisible",
        "description": "Returns if a control of the currently active user dialog is shown or not. Read [[Arma: GUI Configuration]] for more information about user dialogs and controls.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "idc",
                "description": "control ID",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - true if the control is shown, false if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "curatorAddons",
        "description": "Returns list of addons allowed to given curator. The addon names are not guaranteed to be all lower case",
        "introduced_version": null,
        "syntax": "'''curatorAddons''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "curatorCamera",
        "description": "Returns curator camera object.",
        "introduced_version": null,
        "syntax": "[[curatorCamera]]",
        "parameters": [],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "curatorCameraArea",
        "description": "Returns all curator camera areas.",
        "introduced_version": null,
        "syntax": "'''curatorCameraArea''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "curatorCameraAreaCeiling",
        "description": "Returns ceiling height for curator camera.",
        "introduced_version": null,
        "syntax": "'''curatorCameraAreaCeiling''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "curatorCoef",
        "description": "Returns current coeficient setting.",
        "introduced_version": null,
        "syntax": "curatorObj [[curatorCoef]] action",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "action",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "curatorEditableObjects",
        "description": "Returns all editable objects which belong to a curator.",
        "introduced_version": null,
        "syntax": "'''curatorEditableObjects''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "curatorEditingArea",
        "description": "Returns all curator editing areas.",
        "introduced_version": null,
        "syntax": "'''curatorEditingArea''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "curatorEditingAreaType",
        "description": "Returns type of edit areas assigned to curator (blacklist/whitelist).",
        "introduced_version": null,
        "syntax": "'''curatorEditingAreaType''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "curatorMouseOver",
        "description": "Returns [[curatorEditableObjects|Curator Editable Object]] under curator mouse pointer in form of array:\n<br> [] - when not in curator mode\n<br> [\"\"] - if no curator editable object under the pointer in curator mode\n<br> [",
        "introduced_version": null,
        "syntax": "'''curatorMouseOver'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "curatorPoints",
        "description": "Returns number of points that curator have. Points can be only in range from 0 to 1.",
        "introduced_version": null,
        "syntax": "'''curatorPoints''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "curatorRegisteredObjects",
        "description": "Returns array with all objects that has curator registered and their settings.",
        "introduced_version": null,
        "syntax": "'''curatorRegisteredObjects''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "curatorSelected",
        "description": "Returns list of all curator selected items.",
        "introduced_version": null,
        "syntax": "'''curatorSelected'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] -",
            "sqf_type": "Array"
        }
    },
    {
        "name": "curatorWaypointCost",
        "description": "Return current price for placing waypoints (curator specific).",
        "introduced_version": null,
        "syntax": "'''curatorWaypointCost''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "current3DENOperation",
        "description": "Returns the currently performed editing operation in [[Eden Editor]].",
        "introduced_version": null,
        "syntax": "'''current3DENOperation'''",
        "parameters": [],
        "returns": {
            "description": "[[String]] - operation name. Can be one of following:\n* \"\" (no operation)\n* \"Move\"\n* \"Rotate\"\n* \"GroupTo\"\n* \"Connect\"\n* \"Create\"",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentChannel",
        "description": "Returns currently selected user chat channel on the UI (selected with < and > in MP).\n{",
        "introduced_version": null,
        "syntax": "'''currentChannel'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - channelID",
            "sqf_type": "Number"
        }
    },
    {
        "name": "currentCommand",
        "description": "Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Returned value can be one of:\n* \"WAIT\"\n* \"ATTACK\"\n* \"HIDE\"\n* \"MOVE\"\n* \"HEAL\"\n* \"REPAIR\"\n* \"REFUEL\"\n* \"REARM\"\n* \"SUPPORT\"\n* \"JOIN\"\n* \"GET IN\"\n* \"FIRE\"\n* \"GET OUT\"\n* \"STOP\"\n* \"EXPECT\"\n* \"ACTION\"\n* \"ATTACKFIRE\"\n* \"Suppress\"",
        "introduced_version": null,
        "syntax": "[[currentCommand]] vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentMagazine",
        "description": "Returns class name of currently loaded vehicle's / unit's magazine.",
        "introduced_version": null,
        "syntax": "'''currentMagazine''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "unit or vehicle",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentMagazineDetail",
        "description": "Returns description of vehicle's currently loaded magazine, its ammo count (current/default) and its id.",
        "introduced_version": null,
        "syntax": "[[currentMagazineDetail]] object",
        "parameters": [
            {
                "name": "object",
                "description": "unit or vehicle",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentMagazineDetailTurret",
        "description": "Returns the class name of currently used magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return \"\".",
        "introduced_version": null,
        "syntax": "vehicle '''currentMagazineDetailTurret''' [turret path]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentMagazineTurret",
        "description": "Returns the name of the type of the currently using magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return \"\".",
        "introduced_version": null,
        "syntax": "vehicle '''currentMagazineTurret''' [turret path]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentMuzzle",
        "description": "Returns current muzzle of unit's weapon.",
        "introduced_version": null,
        "syntax": "'''currentMuzzle''' gunner",
        "parameters": [
            {
                "name": "gunner",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] - current muzzle",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentNamespace",
        "description": "Returns current [[Namespace|global namespace]] the script runs in. Could be one of the following:\n* [[missionNamespace]]\n* [[uiNamespace]]\n* [[parsingNamespace]]\n* [[profileNamespace]]\n* [[localNamespace]] (since Arma 3 v1.99.146509)",
        "introduced_version": null,
        "syntax": "'''currentNamespace'''",
        "parameters": [],
        "returns": {
            "description": "[[Namespace]]",
            "sqf_type": "Namespace"
        }
    },
    {
        "name": "currentPilot",
        "description": "Returns the person piloting the vehicle. If co-pilot is piloting, co-pilot is returned. If you need current pilot of a UAV or UGV, see [[UAVControl]] command.",
        "introduced_version": null,
        "syntax": "[[currentPilot]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - piloting unit or [[objNull]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "currentTask",
        "description": "Return current task of given person.",
        "introduced_version": null,
        "syntax": "'''currentTask''' person",
        "parameters": [
            {
                "name": "person",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Task]]",
            "sqf_type": "Task"
        }
    },
    {
        "name": "currentTasks",
        "description": "Returns array with all [[taskCompleted | uncompleted]] tasks for the given agent. [[getVariable]] could be used on [[Task]] to get the following special local variables from the task:\n\n* <tt>\"_this\"</tt> [[Team Member]] - the [[teamMember]] [[agent]] the task is assigned to\n* <tt>\"_taskType\"</tt> [[String]] - the name of the task (see [[registeredTasks]])\n* <tt>\"_thisCreated\"</tt> [[Number]] - 1 or 0\n* <tt>\"_thisRunning\"</tt> [[Number]] - 1 or 0\n* <tt>\"_totalCreated\"</tt> [[Number]] - total number of tasks\n* <tt>\"_totalRunning\"</tt> [[Number]] - total number of running tasks\n* <tt>\"_task\"</tt>[[Task]] - often null",
        "introduced_version": null,
        "syntax": "'''currentTasks''' teamMember",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - array of [[Task]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "currentThrowable",
        "description": "Returns currently selected throwable, which will be launched if the user presses \"G\".<br><br>",
        "introduced_version": null,
        "syntax": "[[currentThrowable]] player",
        "parameters": [
            {
                "name": "player",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] in format [magazineClassName, muzzleClassName, [magazineId, creatorId]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "currentVisionMode",
        "description": "Returns current vision mode of unit's weapon.\n\n* 0 - daytime\n* 1 - night vision\n* 2 - thermal vision",
        "introduced_version": null,
        "syntax": "'''currentVisionMode''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "currentWaypoint",
        "description": "Returns the '''index''' of the current waypoint contrary to misleading name.\n\nTo determine the validity of the index, compare it to the waypoints count.\n\nIf all waypoints are 'completed', then the index is 1 greater than the last valid index.\n\nIf there are no waypoints, then the index is 0.\n\nBy default, a group has 1 waypoint at their starting position, which is considered completed and so the currentWaypoint is 1.",
        "introduced_version": null,
        "syntax": "'''currentWaypoint''' groupName",
        "parameters": [
            {
                "name": "groupName",
                "description": "",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Number]] - the index of current waypoint",
            "sqf_type": "Number"
        }
    },
    {
        "name": "currentWeapon",
        "description": "Return the name of the currently selected weapon (on the primary turret for vehicles).",
        "introduced_version": null,
        "syntax": "'''currentWeapon''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentWeaponMode",
        "description": "Returns current weapon mode of unit's weapon. Result can be: \"Single\", \"Burst\", \"FullAuto\", \"manual\", \"player\"",
        "introduced_version": null,
        "syntax": "'''currentWeaponMode''' gunner",
        "parameters": [
            {
                "name": "gunner",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentWeaponTurret",
        "description": "Returns the name of the currently selected weapon on specified turret. Use turret path [-1] for driver's turret.",
        "introduced_version": null,
        "syntax": "vehicle '''currentWeaponTurret''' [turret path]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "currentZeroing",
        "description": "Returns zeroing of unit's weapon.",
        "introduced_version": null,
        "syntax": "[[currentZeroing]] gunner",
        "parameters": [
            {
                "name": "gunner",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "cursorObject",
        "description": "Returns the object under cursor. This command is quite different from [[cursorTarget]] as it is more precise in determining the boundaries of the pointed at object and can detect a larger variety of objects including map objects and trees.",
        "introduced_version": null,
        "syntax": "'''cursorObject'''",
        "parameters": [],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "cursorTarget",
        "description": "Returns the target pointed at by the player (usually with cross-hairs). The target has to be known to the player to some degree ([[knowsAbout]] > 0). If target is completely unknown, command returns [[objNull]].\n<br><br>A valid target could belong to an enemy or a friendly side. Buildings are normally known to player and so are valid targets. Try [[nearTargets]] to see what else is considered a target. While friendly targets are usually known to the player, enemy targets can be totally unknown, especially if \"auto-spotting\" (or sometimes called \"auto-reporting\") is switched off. To check if auto-spotting is enabled:<tt>[[difficultyEnabled]] \"autospot\"</tt>\n<br><br>[[cursorTarget]] also returns locked target for the duration of the lock even if there is another target under the cursor. As soon as missile is fired, [[cursorTarget]] switches to current known target under cursor or [[objNull]]. Targeting (currently \"T\" in Arma 3) works regardless of the state of \"auto-spotting\".\n<br><br>Adding a target to the known list could be done with [[reveal]] command. When auto-spotting is enabled, zooming on the enemy target with cross-hairs usually reveals the target. As friendly targets are always known, zooming on friendly target could improve [[knowsAbout]] value.\n<br><br>[[Side relations]] can also influence target knowledge. For example [[east]] target is unknown target for [[civilian]], but making them friends with [[setFriend]] instantly improves [[civilian]] knowledge of the [[east]].",
        "introduced_version": null,
        "syntax": "'''cursorTarget'''",
        "parameters": [],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "customChat",
        "description": "Sends the chat message to the custom radio channel. The radio channel needs to be created on the server before hand, with [[radioChannelCreate]] command.",
        "introduced_version": null,
        "syntax": "unit [[customChat]] [customChannelID, message]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "customChannelID",
                "description": "[[Channel IDs|Custom channel ID]] returned by [[radioChannelCreate]] command",
                "sqf_type": "Number"
            },
            {
                "name": "message",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "customRadio",
        "description": "Sends the message to the custom radio channel. The message is defined in the [[description.ext]] file or radio protocol.",
        "introduced_version": null,
        "syntax": "unit '''customRadio''' [customChannelID, message]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "customChannelID",
                "description": "[[Channel IDs|custom channel ID]] returned by [[radioChannelCreate]] command",
                "sqf_type": "Number"
            },
            {
                "name": "message",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "customWaypointPosition",
        "description": "Returns player's custom waypoint (LShift + LMB) [[Position]] or an empty array <tt>[]</tt> if no custom waypoint exists.",
        "introduced_version": null,
        "syntax": "[[customWaypointPosition]]",
        "parameters": [],
        "returns": {
            "description": "[[Position]] in format [x,y,0] or []",
            "sqf_type": "Position"
        }
    },
    {
        "name": "cutFadeOut",
        "description": "Terminates the effect in the given layer by fading it out according to the given duration. If named layer used and it doesn't exist, it will be allocated.for title layer see [[titleFadeOut]].<br><br>",
        "introduced_version": null,
        "syntax": "layer '''cutFadeOut''' duration",
        "parameters": [
            {
                "name": "layer",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "duration",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "layerName",
                "description": "effect layer name. Layer names are CaSe SeNsItIvE",
                "sqf_type": "String"
            },
            {
                "name": "duration",
                "description": "fade out time",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "cutObj",
        "description": "Displays an object defined in the global config in CfgTitles.<br><br>",
        "introduced_version": null,
        "syntax": "[[cutObj]] [class, type, speed, showInMap]",
        "parameters": [
            {
                "name": "class",
                "description": "the className of the object defined in <tt>[[configFile]] >> \"CfgTitles\" >> class</tt>",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            },
            {
                "name": "layer",
                "description": "layer number on which the effect is shown, where 0 is the back most. Layer number is rounded to the nearest integer and also cannot be negative. Layer 99.5 will be treated as layer 100.",
                "sqf_type": "Number"
            },
            {
                "name": "class",
                "description": "the className of the object defined in <tt>[[configFile]] >> \"CfgTitles\" >> class</tt>",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            },
            {
                "name": "speed",
                "description": "(Optional, default -1) Time in seconds to fade in resource.",
                "sqf_type": "Number"
            },
            {
                "name": "showInMap",
                "description": "(Optional, default [[true]]) [[false]] to hide the text when the map is opened.",
                "sqf_type": "Boolean"
            },
            {
                "name": "layerName",
                "description": "layer name on which the effect is shown. Layer names are CaSe SeNsItIvE",
                "sqf_type": "String"
            },
            {
                "name": "class",
                "description": "the className of the object defined in <tt>[[configFile]] >> \"CfgTitles\" >> class</tt>",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "cutRsc",
        "description": "Display a resource defined in RscTitles of the mission's [[Description.ext]], the campaign's description.ext or the global config.<br><br>",
        "introduced_version": null,
        "syntax": "'''cutRsc''' [class, type, speed, showInMap]",
        "parameters": [
            {
                "name": "class",
                "description": "the class name of the resource. (\"Default\" will remove the current resource.)",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            },
            {
                "name": "layer",
                "description": "layer number on which the effect is shown, where 0 is the back most. Layer number is rounded to the nearest integer and also cannot be negative. Layer 99.5 will be treated as layer 100.",
                "sqf_type": "Number"
            },
            {
                "name": "class",
                "description": "the class name of the resource. (\"Default\" will remove the current resource.)",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            },
            {
                "name": "layerName",
                "description": "layer name on which the effect is shown. Layer names are CaSe SeNsItIvE",
                "sqf_type": "String"
            },
            {
                "name": "class",
                "description": "the class name of the resource. (\"Default\" will remove the current resource.)",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "cutText",
        "description": "Displays a text message in the center of the screen. The text can be displayed on multiple lines by using \"\\n\" new line characters:<br><tt>[[cutText]] [\"line1\\nline2\\nline3\", \"PLAIN\"];</tt>. Since Arma 3 v1.73.142260 this command supports [[Structured Text]] formatting.",
        "introduced_version": null,
        "syntax": "'''cutText''' [text, type, speed,  showInMap, isStructuredText]",
        "parameters": [
            {
                "name": "text",
                "description": "text to be displayed",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            },
            {
                "name": "speed",
                "description": "(Optional, default -1) time in seconds to fade in resource.",
                "sqf_type": "Number"
            },
            {
                "name": "showInMap",
                "description": "(Optional, default [[true]]) [[false]] to hide the text when the map is opened.",
                "sqf_type": "Boolean"
            },
            {
                "name": "isStructuredText",
                "description": "(Optional, default [[false]]) [[true]] to switch support for [[Structured Text]] formatting - see Example 4.",
                "sqf_type": "Boolean"
            },
            {
                "name": "layer",
                "description": " layer number on which the effect is shown, where 0 is the back most. Layer number is rounded to the nearest integer and also cannot be negative. Layer 99.5 will be treated as layer 100.",
                "sqf_type": "Number"
            },
            {
                "name": "text",
                "description": "text to be displayed",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            },
            {
                "name": "speed",
                "description": "(Optional, default -1) time in seconds to fade in resource.",
                "sqf_type": "Number"
            },
            {
                "name": "showInMap",
                "description": "(Optional, default [[true]]) [[false]] to hide the text when the map is opened.",
                "sqf_type": "Boolean"
            },
            {
                "name": "isStructuredText",
                "description": "(Optional, default [[false]]) [[true]] to switch support for [[Structured Text]] formatting - see Example 4.",
                "sqf_type": "Boolean"
            },
            {
                "name": "layerName",
                "description": "layer name on which the effect is shown. Layer names are CaSe SeNsItIvE",
                "sqf_type": "String"
            },
            {
                "name": "text",
                "description": "text to be displayed",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            },
            {
                "name": "speed",
                "description": "(Optional, default -1) Time in seconds to fade in resource.",
                "sqf_type": "Number"
            },
            {
                "name": "showInMap",
                "description": "(Optional, default [[true]]) [[false]] to hide the text when the map is opened.",
                "sqf_type": "Boolean"
            },
            {
                "name": "isStructuredText",
                "description": "(Optional, default [[false]]) [[true]] to switch support for [[Structured Text]] formatting - see Example 4.",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "damage",
        "description": "Return the damage value of an object.",
        "introduced_version": null,
        "syntax": "[[damage]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - the returned number in range (healthy) 0..1 (dead).",
            "sqf_type": "Number"
        }
    },
    {
        "name": "date",
        "description": "Return the actual in-mission date and time.",
        "introduced_version": null,
        "syntax": "[[date]]",
        "parameters": [],
        "returns": {
            "description": "[[Date]] - format [year, month, day, hour, minute]",
            "sqf_type": "Date"
        }
    },
    {
        "name": "dateToNumber",
        "description": "Convert a date to a float number, based on Jan 1st 00:00:00",
        "introduced_version": null,
        "syntax": "'''dateToNumber''' date",
        "parameters": [
            {
                "name": "date",
                "description": "array in [[date]] format",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "daytime",
        "description": "Returns the current in-game time in hours. For a formatted version of time, see [[BIS_fnc_timeToString]].",
        "introduced_version": null,
        "syntax": "[[daytime]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - day time using a 24 hour clock, using fractions of hours.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "deActivateKey",
        "description": "Deactivates the given keyname for the current user profile. The keys are used to unlock missions or campaigns.\n\nSee keys, keysLimit and doneKeys in the [[Description.ext#keys|description.ext]] file of the missions.",
        "introduced_version": null,
        "syntax": "'''deActivateKey''' keyname",
        "parameters": [
            {
                "name": "keyname",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "debriefingText",
        "description": "Returns debriefing text of provided end.",
        "introduced_version": null,
        "syntax": "[[debriefingText]] end",
        "parameters": [
            {
                "name": "end",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]] - ''end'' debriefing text. If it does not exist in config, empty string is returned.",
            "sqf_type": "String"
        }
    },
    {
        "name": "debugFSM",
        "description": "Dump (something about FSM) to debugging output. This command is (assumed to be) non-functional in the retail version.",
        "introduced_version": null,
        "syntax": "FSMhandle '''debugFSM''' true",
        "parameters": [
            {
                "name": "FSMhandle",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "true",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "debugLog",
        "description": "Dump argument type and value to debugging output.",
        "introduced_version": null,
        "syntax": "'''debugLog''' anything",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "decayGraphValues",
        "description": "Multiplies graph values by the given coefficient. The corresponding lower bound value is used instead if the product is smaller than the bound.",
        "introduced_version": null,
        "syntax": "[[decayGraphValues]] [lowerBoundValues, graphValues, coef]",
        "parameters": [
            {
                "name": "lowerBoundValues",
                "description": "Lower bound for the new graph",
                "sqf_type": "Array"
            },
            {
                "name": "graphValues",
                "description": "Graph values",
                "sqf_type": "Array"
            },
            {
                "name": "coef",
                "description": "The coefficient to be multiplied with",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "default",
        "description": "See [[switch do]].",
        "introduced_version": null,
        "syntax": "'''default''' a",
        "parameters": [
            {
                "name": "a",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deg",
        "description": "Converts given value in radians to degrees. 1 degree equals 0.01745 radians or [[pi]] / 180.",
        "introduced_version": null,
        "syntax": "'''deg''' value",
        "parameters": [
            {
                "name": "value",
                "description": "radians",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] - degrees",
            "sqf_type": "Number"
        }
    },
    {
        "name": "delete3DENEntities",
        "description": "Delete given entities in [[Eden Editor]], including anything that can be placed in editor.",
        "introduced_version": null,
        "syntax": "'''delete3DENEntities''' entities",
        "parameters": [
            {
                "name": "entities",
                "description": "of types [[Eden Entity]] or [[Eden ID]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteAt",
        "description": "Removes array element at the given index and returns removed element (modifies the original array, just like [[resize]] or [[set]]). Will not issue error when -1 index is passed making it ideal for using with [[find]](see Example 2) or [[findIf]](see Example 3) command",
        "introduced_version": null,
        "syntax": "array '''deleteAt''' index",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Anything]] - returns the deleted element",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "deleteCenter",
        "description": "In a nutshell, this command removes gaming [[Side]] (see [[createCenter]]). If a side has >0 [[Group]]s it cannot be deleted. Center can only be created for: [[east]], [[west]], [[resistance]], [[civilian]] and [[sideLogic]], therefore only centers from the mentioned sides can be deleted.<br><br>\n'''Old description:''' Destroys the AI center of the given side.",
        "introduced_version": null,
        "syntax": "'''deleteCenter''' side",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteCollection",
        "description": "Delete a collection. As example, used with a soldier, it'll hide the ingame model.\n\n''When targetting ArmA 2 1.06 or newer, use [[hideObject]] instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before ArmA 2 1.06, and its functionality may be changed or removed in the future.''",
        "introduced_version": null,
        "syntax": "'''deleteCollection''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteEditorObject",
        "description": "Delete the editor object. Requires all editor object links to be removed prior.",
        "introduced_version": null,
        "syntax": "map '''deleteEditorObject''' object",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "object",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Any]]",
            "sqf_type": "Any"
        }
    },
    {
        "name": "deleteGroup",
        "description": "Destroys the given group. <u>Group must be empty and local to the machine executing command</u>. <br><br>",
        "introduced_version": null,
        "syntax": "'''deleteGroup''' group",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteGroupWhenEmpty",
        "description": "Marks given group for auto-deletion when group is empty. [[true|True]] will mark the group for auto-deletion, however [[false]] will only unmark the group that was marked previously. Other engine group auto-deletion mechanisms in place are not affected by this.",
        "introduced_version": null,
        "syntax": "group [[deleteGroupWhenEmpty]] delete",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "delete",
                "description": "[[true]] to mark for auto-deletion",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteIdentity",
        "description": "Delete an identity (created with [[saveIdentity]]) from the campaign's progress file.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "identityName",
                "description": "name of the saved identity",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] -  \ntrue if the identy was deleted successfully, false if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "deleteLocation",
        "description": "Deletes scripted location.",
        "introduced_version": null,
        "syntax": "[[deleteLocation]] location",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteMarker",
        "description": "Destroys the given marker.",
        "introduced_version": null,
        "syntax": "'''deleteMarker''' name",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteMarkerLocal",
        "description": "Destroys the given marker.",
        "introduced_version": null,
        "syntax": "'''deleteMarkerLocal''' markerName",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteRange",
        "description": "Removes a range of array elements from the given array (modifies the original array, just like [[resize]] or [[set]]).",
        "introduced_version": null,
        "syntax": "array '''deleteRange''' [from, count]",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "from",
                "description": "Array index to start selection from.",
                "sqf_type": "Number"
            },
            {
                "name": "count",
                "description": "Number of array elements to remove. If the selected range exceeds source array boundaries, selection will be made up to the end of the array.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteResources",
        "description": "Delete (unregister) resources of the team member. Resources are deleted in the order they were added. Case insensitive.",
        "introduced_version": null,
        "syntax": "teamMember '''deleteResources''' [resource1, resource2,...]",
        "parameters": [
            {
                "name": "resource1",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "resource2",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteSite",
        "description": "Removes the site.",
        "introduced_version": null,
        "syntax": "'''deleteSite''' site",
        "parameters": [
            {
                "name": "site",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteStatus",
        "description": "Delete a status (created with [[saveStatus]]) from the campaign's progress file.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "statusName",
                "description": "name of the saved status",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] -  \ntrue if the status was deleted successfully, false if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "deleteTeam",
        "description": "Destroy given team.",
        "introduced_version": null,
        "syntax": "'''deleteTeam''' team",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteVehicle",
        "description": "Deletes an object. Only objects inserted in the mission editor and objects created during the game's progress can be deleted by this command. Island objects and player cannot be removed.<br><br>",
        "introduced_version": null,
        "syntax": "'''deleteVehicle''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteVehicleCrew",
        "description": "Deletes a member of the crew of a vehicle. Human players cannot be deleted.<br><br>",
        "introduced_version": null,
        "syntax": "vehicle [[deleteVehicleCrew]] unit",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "deleteWaypoint",
        "description": "Removes the specified waypoint.",
        "introduced_version": null,
        "syntax": "[[deleteWaypoint]] [group, index]",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "detach",
        "description": "Detaches previously attached with [[attachTo]] object.",
        "introduced_version": null,
        "syntax": "'''detach''' object",
        "parameters": [
            {
                "name": "object",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "detectedMines",
        "description": "Returns an array of all mines detected by a given side",
        "introduced_version": null,
        "syntax": "'''detectedMines''' side",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "side"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "dialog",
        "description": "Tests whether any user dialog is open.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] -  \ntrue if a dialog is open, false if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "diarySubjectExists",
        "description": "Checks whether given subject is present in the diary of given person.",
        "introduced_version": null,
        "syntax": "person '''diarySubjectExists''' name",
        "parameters": [
            {
                "name": "person",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "didJIP",
        "description": "Checks if the current client Joined In Progress.",
        "introduced_version": null,
        "syntax": "'''didJIP'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "didJIPOwner",
        "description": "Checks if the current [[owner]] of supplied [[Object]] Joined In Progress. Server execution only. On clients returns [[false]].",
        "introduced_version": null,
        "syntax": "'''didJIPOwner''' object",
        "parameters": [
            {
                "name": "object",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "difficulty",
        "description": "Returns high-level selected difficulty mode.   \n\nReturned value will be: 0 (Recruit), 1 (Regular), 2 (Veteran) or 3 (Elite)",
        "introduced_version": null,
        "syntax": "'''difficulty'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "difficultyEnabledRTD",
        "description": "Returns [[true]] if Advanced Flight Model is enabled. Forcing of rotorlib simulation could be done with mission param [[Description.ext#forceRotorLibSimulation|forceRotorLibSimulation]]",
        "introduced_version": null,
        "syntax": "[[difficultyEnabledRTD]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "difficultyOption",
        "description": "Checks specific difficulty settings of the current user. Difficulty flag names can be found in the <tt>CfgDifficultyPresets</tt> config class or in \n[[server.armaprofile|ArmA profile]] file under class <tt>DifficultyPresets/xxx/Options</tt> (xxx being Recruit, Regular or Veteran). This command replaces [[difficultyEnabled]] as many options have multiple values and former command only provided [[Boolean]] return.",
        "introduced_version": null,
        "syntax": "'''difficultyOption''' optionName",
        "parameters": [
            {
                "name": "optionName",
                "description": "difficulty option name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "directSay",
        "description": "Sends given audio message to the direct channel. Command operates just like xxxxRadio commands, but the sound is played over direct channel and is independent of [[fadeRadio]]. The message is defined in CfgRadio in the [[description.ext]] file or config radio protocol or a kbAddTopic. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see [[remoteExec]]). \n<br><br>Note:  When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.",
        "introduced_version": null,
        "syntax": "unit '''directSay''' radioName",
        "parameters": [
            {
                "name": "unit",
                "description": "unit to transmit",
                "sqf_type": "Object"
            },
            {
                "name": "radioName",
                "description": "class name from CfgRadio",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "direction",
        "description": "Returns the direction an object or a location is facing (differs from [[getDir]] in that this also works with locations).",
        "introduced_version": null,
        "syntax": "'''direction''' object",
        "parameters": [
            {
                "name": "object",
                "description": "or [[Location]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] -  \nDirection in degrees, range 0 to 360",
            "sqf_type": "Number"
        }
    },
    {
        "name": "disableAI",
        "description": "Disables parts of the AI behaviour to get a better control over the actions of a unit. Must be executed where AI unit is [[local]]. If unit changes locality, it might need to be executed again at the new locality to maintain effect.\n\nPossible values are:\n*'''\"TARGET\"''' - stop the unit to watch the assigned target / group commander may not assign targets\n*'''\"AUTOTARGET\"''' - prevent the unit from assigning a target independently and watching unknown objects / no automatic target selection\n*'''\"MOVE\"''' - disable the AI's movement / do not move\n*'''\"ANIM\"''' - disable ability of AI to change animation. '''Available only since ArmA: Cold War Assault (OFP 1.99)'''.\n*'''\"TEAMSWITCH\"''' - AI disabled because of Team Switch\n*'''\"FSM\"''' - disable the execution of AI behavior scripts. '''Available only since Operation Arrowhead v1.60'''.\n*'''\"WEAPONAIM\"''' - no weapon aiming\n*'''\"AIMINGERROR\"''' - prevents AI's aiming from being distracted by its shooting, moving, turning, reloading, hit, injury, fatigue, suppression or concealed/lost target  '''Available only since Arma 3 v1.42'''.\n*'''\"SUPPRESSION\"''' - prevents AI from being suppressed  '''Available only since Arma 3 v1.42'''.\n*'''\"CHECKVISIBLE\"''' - disables visibility raycasts  '''Available only since Arma 3 v1.54'''.\n*'''\"COVER\"''' - disables usage of cover positions by the AI  '''Available only since Arma 3 v1.56'''.\n*'''\"AUTOCOMBAT\"''' - disables autonomous switching to [[2D_Editor:_Waypoints#Behaviour|COMBAT]] when in [[Arma_2:_FSM_Danger_Causes|danger]] '''Available only since Arma 3 v1.56'''.\n*'''\"PATH\"''' - stops the AI\u2019s movement but not the target alignment '''Available only since Arma 3 v1.61'''.\n*'''\"MINEDETECTION\"''' - disable AI mine detection.\n*'''\"NVG\"''' - Stops AI from putting NVGs on but not taking them off '''Available since Arma 3 v1.92'''\n*'''\"LIGHTS\"''' - Stops AI from operating vehicle headlights as well as collision lights '''Available since Arma 3 v1.92'''\n*'''\"RADIOPROTOCOL\"''' - Stops AI from talking and texting while still being able to issue orders '''Available since Arma 3 v1.95'''\n\nSince Arma v1.65 a special operational keyword <tt>\"all\"</tt> is introduced to set all AI flags to the same value.<br><br>",
        "introduced_version": null,
        "syntax": "unitName '''disableAI''' section",
        "parameters": [
            {
                "name": "unitName",
                "description": "AI unit",
                "sqf_type": "Object"
            },
            {
                "name": "section",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableCollisionWith",
        "description": "Disable collision between vehicles. This command doesn't disable collision between PhysX objects.",
        "introduced_version": null,
        "syntax": "object [[disableCollisionWith]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableConversation",
        "description": "Disable the ability to talk to other people.",
        "introduced_version": null,
        "syntax": "unitName '''disableConversation''' disable",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "disable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableDebriefingStats",
        "description": "Disable debriefing score table.",
        "introduced_version": null,
        "syntax": "[[disableDebriefingStats]]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableMapIndicators",
        "description": "Command allows suppressing visualization of FRIENDLY, ENEMY, MINES and/or PING map indicators from difficulty setting EXTENDED MAP CONTENT.",
        "introduced_version": null,
        "syntax": "'''disableMapIndicators''' [disableFriendly,disableEnemy,disableMines,disablePing]",
        "parameters": [
            {
                "name": "disableFriendly",
                "description": "true: disable visualization of friendly units",
                "sqf_type": "Boolean"
            },
            {
                "name": "disableEnemy",
                "description": "true: disable visualization of enemy units",
                "sqf_type": "Boolean"
            },
            {
                "name": "disableMines",
                "description": "true: disable visualization of mines",
                "sqf_type": "Boolean"
            },
            {
                "name": "disablePing",
                "description": "true: disable visualization of all tactical pings",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableNVGEquipment",
        "description": "Enables or disables transport NV (Night Vision). To disable TI (Thermal Imaging) use [[disableTIEquipment]].",
        "introduced_version": null,
        "syntax": "vehicle '''disableNVGEquipment''' state",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "state",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableRemoteSensors",
        "description": "This command will halt raycasting calculations (on the local machine only) for all groups which don't contain ''any'' local entities. Units, that are not in a group with at least one local member, will not check visibility of other units. This will cause, that remote units will not have updated knowsAbout and it will save some CPU time. If a group contains a single local entity then calculations will still be performed for the entire group.\n<br><br>\nThese raycasts are used to determine what other entities an entity can see, and they take a lot of CPU time. This is of course a bit of a trick, because rather than a true optimization, it disables part of the simulation. However, there are certainly types of scenarios where these raycasts are not needed. An example is a fully Player-versus-Player scenario, where the visibility between every combination of player entity is not needed. So why not disable this by default? There are cases where you do require these raycasts, for example in stealth scenarios. Without them, commands like [[knowsAbout]], [[nearTargets]] and [[targetKnowledge]] will only function for local units! The commands themselves are local, can be used on servers and clients, and the state is reset when the scenario ends. So, carefully consider whether your scenario can benefit from this method.",
        "introduced_version": null,
        "syntax": "[[disableRemoteSensors]] state",
        "parameters": [
            {
                "name": "state",
                "description": "[[true]] to disable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableSerialization",
        "description": "Disable saving of script containing this command. After this, the script can work with data types which do not support serialization (UI types). See [[Namespace#Namespace serialization|Namespace serialization]] for more information.",
        "introduced_version": null,
        "syntax": "[[disableSerialization]]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableTIEquipment",
        "description": "Disables TI (Thermal Imaging) equipment for given vehicle.",
        "introduced_version": null,
        "syntax": "vehicle [[disableTIEquipment]] state",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "state",
                "description": "true to turn TI off, false to turn TI on",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableUAVConnectability",
        "description": "Disables unit's AV terminal(s) connecting to UAV.",
        "introduced_version": null,
        "syntax": "object [[disableUAVConnectability]] [uav, checkAllItems]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "uav",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "checkAllItems",
                "description": "[[true]] to disable all terminals in unit's inventory, [[false]] to only disable the currently assigned terminal.",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "disableUserInput",
        "description": "Disables or enables the keyboard and mouse input. Usually used during cutscenes.<br><br>",
        "introduced_version": null,
        "syntax": "'''disableUserInput''' state",
        "parameters": [
            {
                "name": "state",
                "description": "[[true]] to disable, [[false]] to enable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "displayAddEventHandler",
        "description": "Adds an event handler to the given display. Returns the ID of the event handler, or -1 when failed.\n<br>\nReturning [[true]] in EH code will override default engine handling for keyboard events.\n<br>\nSee [[User_Interface_Event_Handlers|User Interface Event Handlers]] for the full list of event names.\n<br>\nIf applicable, see [[DIK_KeyCodes]] for a list of key code constants, which are relevant to key related user interface events like: [[User_Interface_Event_Handlers#onKeyDown|KeyDown]] & [[User_Interface_Event_Handlers#onKeyUp|KeyUp]].<br><br>",
        "introduced_version": null,
        "syntax": "display '''displayAddEventHandler''' [eventName, code]",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            },
            {
                "name": "eventName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "code",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "displayCtrl",
        "description": "Return child control with specified idc.",
        "introduced_version": null,
        "syntax": "[[Control]]",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            },
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Control]]",
            "sqf_type": "Control"
        }
    },
    {
        "name": "displayNull",
        "description": "A non-existing [[Display]]. To compare non-existent displays use [[isNull]] or [[isEqualTo]]:\n* <tt>[[displayNull]]",
        "introduced_version": null,
        "syntax": "'''displayNull'''",
        "parameters": [],
        "returns": {
            "description": "[[Display]]",
            "sqf_type": "Display"
        }
    },
    {
        "name": "displayParent",
        "description": "Returns parent display of the given display.",
        "introduced_version": null,
        "syntax": "'''displayParent''' display",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            }
        ],
        "returns": {
            "description": "[[Display]]",
            "sqf_type": "Display"
        }
    },
    {
        "name": "displayRemoveAllEventHandlers",
        "description": "Remove all event handlers from the given display.",
        "introduced_version": null,
        "syntax": "display [[displayRemoveAllEventHandlers]] eventName",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            },
            {
                "name": "eventName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "displayRemoveEventHandler",
        "description": "Remove a given event handler from the given display.",
        "introduced_version": null,
        "syntax": "display '''displayRemoveEventHandler''' [handler name,id]",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "displaySetEventHandler",
        "description": "Sets given event handler of given display.\n\nThe return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it is default code should be executed. \n\nSee [[User_Interface_Event_Handlers|User Interface Event Handlers]] for the full list of handler names.\n\nIf applicable, see [[DIK_KeyCodes]] for a list of key code constants, which are relevant to key related user interface events like: [[User_Interface_Event_Handlers#onKeyDown|KeyDown]] & [[User_Interface_Event_Handlers#onKeyUp|KeyUp]].\n<br>",
        "introduced_version": null,
        "syntax": "display '''displaySetEventHandler''' [handlerName, function]",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            },
            {
                "name": "handlerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "function",
                "description": ". {Code}",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "dissolveTeam",
        "description": "Dissolves the given team. All members become members of the main team. Possible team values are: \"RED\", \"GREEN\", \"BLUE\" or \"YELLOW\".",
        "introduced_version": null,
        "syntax": "'''dissolveTeam''' teamColor",
        "parameters": [
            {
                "name": "teamColor",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "distance",
        "description": "[[Image:distance2D.jpg|400px|right]]\nReturns a distance in meters between [[Object]]s, [[Position]]s or [[Location]]s.",
        "introduced_version": null,
        "syntax": "param1 '''distance''' param2",
        "parameters": [
            {
                "name": "param1",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Object"
            },
            {
                "name": "param2",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Object"
            },
            {
                "name": "location1",
                "description": "or [[Array]] in format [[Position]] or [[Position2D]]",
                "sqf_type": "Location"
            },
            {
                "name": "location2",
                "description": "or [[Array]] in format [[Position]] or [[Position2D]]",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Number]] -  Distance in meters or 1e10 if distance cannot be calculated",
            "sqf_type": "Number"
        }
    },
    {
        "name": "distance2D",
        "description": "Returns a 2D distance ([[distance]] projected to X,Y plane) in meters between two [[Object]]s or two [[Position]]s or [[Object]] and [[Position]].\n<br><br>\n[[Image:distance2D.jpg|400px]]",
        "introduced_version": null,
        "syntax": "param1 '''distance2D''' param2",
        "parameters": [
            {
                "name": "param1",
                "description": ", [[Position2D]] or [[Position3D]]",
                "sqf_type": "Object"
            },
            {
                "name": "param2",
                "description": ", [[Position2D]] or [[Position3D]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] -  Distance in meters or 1e10 if distance cannot be calculated",
            "sqf_type": "Number"
        }
    },
    {
        "name": "distanceSqr",
        "description": "Computes the [http://en.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance squared distance] between two objects or positions.",
        "introduced_version": null,
        "syntax": "var1 '''distanceSqr''' var2",
        "parameters": [
            {
                "name": "var1",
                "description": "or [[Position]]",
                "sqf_type": "Object"
            },
            {
                "name": "var2",
                "description": "or [[Position]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] Distance in meters or 1e10 if distance cannot be calculated",
            "sqf_type": "Number"
        }
    },
    {
        "name": "distributionRegion",
        "description": "Returns the numerical index for the distribution region of this copy of [[",
        "introduced_version": null,
        "syntax": "[[distributionRegion]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "do3DENAction",
        "description": "Performs given [[Eden Editor]] action.\n<br><br>\nSee the [[Eden_Editor:_Actions|list of all actions]].",
        "introduced_version": null,
        "syntax": "'''do3DENAction''' action",
        "parameters": [
            {
                "name": "action",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doArtilleryFire",
        "description": "Orders a unit to reload defined magazine commence fire burst on the given position (silently).",
        "introduced_version": null,
        "syntax": "unit '''doArtilleryFire''' [position, type, rounds]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "Position"
            },
            {
                "name": "rounds",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doFSM",
        "description": "Orders a unit to process command defined by [[FSM]] file (silently). \n\nUnlike with execFSM where ''_this'' is passed to the FSM, the following parameters are passed when using doFSM/commandFSM:\n\n; _leader: leader of subgroup with this command \n; _destination: command destination/position\n; _target: command target \n; _units: list of all persons in subgroup",
        "introduced_version": null,
        "syntax": "unit '''doFSM''' [fsmName, position, target]",
        "parameters": [
            {
                "name": "unit",
                "description": "or [[Array]] (for multiple units)",
                "sqf_type": "Object"
            },
            {
                "name": "fsmName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doFire",
        "description": "Order the given unit(s) to fire on the given target (without radio messages).\n\nThe target is set with [[doTarget]] or [[commandTarget]].\n\nThe target can be a unit or a vehicle, but not an object.",
        "introduced_version": null,
        "syntax": "unitName '''doFire''' target",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doFollow",
        "description": "Order the given unit(s) to follow the given other unit or vehicle eg (without radio messages). Also is used to resume unit formation after [[doStop]], just [[doFollow]] leader even if it is the leader himself you want to resume (see Example 2).",
        "introduced_version": null,
        "syntax": "unitName '''doFollow''' unitName2",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "unitName2",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doGetOut",
        "description": "Orders one or multiple units to get out from the vehicle (silently). Same as [[commandGetOut]] with latter being shown via radio chat.\n<br><br>\nNotes:\n* Works for both AI and player entities\n* AI unit gets back in - unless is under player command or combined with other sqf commands ([[orderGetIn]] false, [[allowGetIn]] false or [[leaveVehicle]])\n* Ignores vehicle's lock state - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] and [[moveOut]]\n* AI waits for execution until vehicle has stopped/is no longer flying (unclear if any timeout exists for order to be discarded) - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] and [[moveOut]]\n* Plays the vehicle's position's get out animation (same as [[Arma_3_Actions#Eject|action \"Eject\"]]) - unlike [[moveOut]]\n* When execute for multiple units, it waits till the action is completed, before the next to take his turn (same as [[Arma_3_Actions#Eject|action \"Eject\"]]) - unlike [[moveOut]]\n* AI gets back into formation afterwards\n* Works only on alive units - unlike [[Arma_3_Actions#Eject|action \"Eject\"]] (one after another) or [[moveOut]] (instantly)\n* Does not work on [[setUnconscious|unconscious]] - unless the AI is under player command. Unlike [[moveOut]] or [[Arma_3_Actions#Eject|action \"Eject\"]] (but one after another))",
        "introduced_version": null,
        "syntax": "'''doGetOut''' units",
        "parameters": [
            {
                "name": "units",
                "description": "or [[Array]] of [[Object]]s",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doMove",
        "description": "Order the given unit(s) to move to the given position (without radio messages). After reaching his destination, the unit will immediately return to formation (if in a group); or order his group to form around his new position (if a group leader). Use [[doStop]] to stop units returning to formation.",
        "introduced_version": null,
        "syntax": "unit(s) '''doMove''' position",
        "parameters": [
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doStop",
        "description": "Order the given unit(s) to stop (without radio messages). The units stopped in this way will leave the groups formation. It will prevent them from moving around with their group (or formation leader), while still being able to turn around and even move to a new position if they see fit. <br><br>The units will still respond to orders from their group leader (like engage, rearm, board a vehicle), but all of their actions will be separate from the group formation. To resume group default behaviour, use [[doFollow]] command. For example: <tt>[[units]] _group [[doFollow]] [[leader]] _group;</tt>",
        "introduced_version": null,
        "syntax": "'''doStop''' unit(s)",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doSuppressiveFire",
        "description": "Orders the given unit or a group of units to suppress the given position or target (without radio messages, see [[commandSuppressiveFire]] is you need messages). \n* When an [[Array]] of units is passed as param, only units from the same [[Group]] as the first unit in array are considered. \n* The unit (units) starts firing at the given target or position random amount of shots (exact formula unknown, but seems to depend on amount of ammo unit has) after which it stops. \n* [[currentCommand]] shows <tt>\"Suppress\"</tt> and there is no way of stopping unit before it completes random amount of rounds. \n* If position is passed as target param, it stays fixed. \n* If object is passed as target param, it depends on what kind of object. If it is considered a proper target by the unit, it is tracked by the unit dynamically. If it is not, the position gets obtained via [[getPosWorld]], which could be different from [[PositionASL]] of the object, and it is fixed even if the target is able to change position later.",
        "introduced_version": null,
        "syntax": "unit '''doSuppressiveFire''' target",
        "parameters": [
            {
                "name": "unit",
                "description": "or [[Array]] - a single unit or array of units",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "or [[Array]] - actual target or position of the target in format [[PositionASL]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doTarget",
        "description": "Order the given unit(s) to target the given target (without radio messages).<br>Targeting can be stopped by <code>_unit [[doWatch]] [[objNull]];</code> or<code>_unit [[commandWatch]] [[objNull]];</code>",
        "introduced_version": null,
        "syntax": "unit '''doTarget''' target",
        "parameters": [
            {
                "name": "unit",
                "description": "or [[Array]] - a single unit or array of units",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doWatch",
        "description": "Order the given unit(s) to watch the given position or target (without radio messages). Use [[objNull]] as the target to order a unit to stop watching a position/target.",
        "introduced_version": null,
        "syntax": "unit(s) '''doWatch''' position",
        "parameters": [
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "doorPhase",
        "description": "Return animation phase of door on vehicle.",
        "introduced_version": null,
        "syntax": "object '''doorPhase''' door",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "door",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "drawArrow",
        "description": "Draws a single line arrow on the map. To draw a color filled arrow of custom shape see [[BIS_fnc_drawArrow]]",
        "introduced_version": null,
        "syntax": "map '''drawArrow''' [from, to, color]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "from",
                "description": "or [[Object]] - arrow start position in format: [[Position2D]], [[Position3D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "to",
                "description": "or [[Object]] - arrow end position in format: [[Position2D]], [[Position3D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "arrow color in format [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawEllipse",
        "description": "Draws an ellipse on the map. Just like with marker or trigger area, negative a and b will result in hexagon.",
        "introduced_version": null,
        "syntax": "map '''drawEllipse''' [c, a, b, angle, color, fill]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "c",
                "description": "or [[Object]] - center of ellipse in format [[Position2D]], [[Position3D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "a",
                "description": "horizontal(x) radius",
                "sqf_type": "Number"
            },
            {
                "name": "b",
                "description": "vertical(y) radius",
                "sqf_type": "Number"
            },
            {
                "name": "angle",
                "description": "angle of rotation in degrees",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "line color in format [r,g,b,a]",
                "sqf_type": "Array"
            },
            {
                "name": "fill",
                "description": "fill texture file or [[Procedural_Textures]]. Note that the file texture will not rotate with rectangle, use [[drawIcon]] for that. If fill texture is not empty, set line color to white [1,1,1,1]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]\n<br><br>[[Image:drawEllipse.jpg|250px]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawIcon",
        "description": "Draws an icon on the map. The command needs to be called every frame, preferably with \"Draw\" control event handler [[ctrlAddEventHandler]].",
        "introduced_version": null,
        "syntax": "map '''drawIcon''' [texture, color, position, width, height, angle, text, shadow, textSize, font, align]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "texture",
                "description": "icon texture",
                "sqf_type": "String"
            },
            {
                "name": "color",
                "description": "text and icon color in format [r,g,b,a]",
                "sqf_type": "Array"
            },
            {
                "name": "width",
                "description": "width of the icon but not text",
                "sqf_type": "Number"
            },
            {
                "name": "height",
                "description": "height of the icon but not text",
                "sqf_type": "Number"
            },
            {
                "name": "angle",
                "description": "rotation angle of the icon but not text",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawIcon3D",
        "description": "Draws an ingame icon at a given position. Command has to be executed each frame. Use [[addMissionEventHandler]] \"Draw3D\" which is executed each frame and if user can see the drawing. In order for the results of this command to be visible through a [[camCreate | custom camera]], enable HUD with [[cameraEffectEnableHUD]]. [[showHUD]] [[false]] will hide icon drawing. In order for arrows to appear, the icon texture should exist. The arrows size is proportionate to icon size.",
        "introduced_version": null,
        "syntax": "'''drawIcon3D''' [texture, color, position, width, height, angle, text, shadow, textSize, font, textAlign, drawSideArrows]",
        "parameters": [
            {
                "name": "texture",
                "description": "icon image",
                "sqf_type": "String"
            },
            {
                "name": "color",
                "description": "icon color in [[Color|Color (RGBA)]] format",
                "sqf_type": "Array"
            },
            {
                "name": "position",
                "description": "icon world position in [[PositionAGL]] format",
                "sqf_type": "Array"
            },
            {
                "name": "width",
                "description": "icon width",
                "sqf_type": "Number"
            },
            {
                "name": "height",
                "description": "icon height",
                "sqf_type": "Number"
            },
            {
                "name": "angle",
                "description": "icon rotation angle",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawLine",
        "description": "Draw a line on the map. Can decrease framerate!",
        "introduced_version": null,
        "syntax": "map '''drawLine''' [position1, position2, color]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawLine3D",
        "description": "Draws a line of a given color between two 3D positions. Command has to be executed each frame. Use [[onEachFrame]] or [[addMissionEventHandler]] \"Draw3D\".",
        "introduced_version": null,
        "syntax": "'''drawLine3D''' [start, end, color]",
        "parameters": [
            {
                "name": "start",
                "description": "",
                "sqf_type": "PositionAGL"
            },
            {
                "name": "end",
                "description": "",
                "sqf_type": "PositionAGL"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawLink",
        "description": "The editor will draw a line between the two specified editor objects. Line type can be LINE or ARROW.",
        "introduced_version": null,
        "syntax": "map '''drawLink''' [from,to,param type,line type,color]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawLocation",
        "description": "Unknown effect.",
        "introduced_version": null,
        "syntax": "control '''drawLocation''' location",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "Unknown",
            "sqf_type": "Unknown"
        }
    },
    {
        "name": "drawPolygon",
        "description": "Draws given polygon on the given map control with given color. The polygon must consist of at least 3 points. Unlike with other draw&lt;shape&gt; commands and due to complexity, this command does not support filling of the polygon with color. Use [[drawTriangle]] command to construct and fill polygon shape as a workaround.",
        "introduced_version": null,
        "syntax": "map [[drawPolygon]] [polygon, color]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "polygon",
                "description": "of [[Position3D]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawRectangle",
        "description": "Draws a rectangle on the map.",
        "introduced_version": null,
        "syntax": "map '''drawRectangle''' [c, a, b, angle, color, fill]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "c",
                "description": "or [[Object]] - center of rectangle in format: [[Position2D]], [[Position3D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "a",
                "description": "1/2 width of rectangle (in meters)",
                "sqf_type": "Number"
            },
            {
                "name": "b",
                "description": "1/2 height of rectangle (in meters)",
                "sqf_type": "Number"
            },
            {
                "name": "angle",
                "description": "angle of rotation",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "line color in format: [r,g,b,a]",
                "sqf_type": "Array"
            },
            {
                "name": "fill",
                "description": "fill texture file or [[Procedural_Textures]]. Note that the file texture will not rotate with rectangle, use [[drawIcon]] for that. If fill texture is not empty, set line color to white [1,1,1,1]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]\n\n<br><br>[[Image:drawRectangle.jpg|250px]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "drawTriangle",
        "description": "Draws a single triangle or multiple triangles on the map. Triangle is defined by 3 positions of its verticies: p0, p1, p2 in a single array ['''p0''', '''p1''', '''p2''']. Next 3 positions in the same array [p0, p1, p2, '''p0''', '''p1''', '''p2'''] will be used to draw second triangle, another 3 positions [p0, p1, p2, p0, p1, p2, '''p0''', '''p1''', '''p2'''] to draw 3rd and so on. <br><br>",
        "introduced_version": null,
        "syntax": "map '''drawTriangle''' [vertices, color, fill]",
        "parameters": [
            {
                "name": "map",
                "description": "map control",
                "sqf_type": "Control"
            },
            {
                "name": "vertices",
                "description": "of triangle(s) vertices in multiple of 3s [p0, p1, p2(, p0, p1, p2,....)], where vertex position (p) is in format [x,y] or [x,y,z], in which case z is ignored",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "color in format: [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]\n\n<br><br>[[Image:drawTriangle.jpg|250px]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "driver",
        "description": "Returns the driver of a vehicle.",
        "introduced_version": null,
        "syntax": "[[Object]]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] -  \nThe unit sitting in the driver place is returned. If vehicle is not a vehicle but a person, the person is returned.",
            "sqf_type": "Object"
        }
    },
    {
        "name": "drop",
        "description": "Creates a particle effect.\nThis command is used to create smoke, fire and similar effects.\nThe particles are single polygons with single textures that always face the player.\nThey can be set to dynamically change their position, size, direction, can be set to different weights and more or less dependant on the wind.",
        "introduced_version": null,
        "syntax": "[[drop]] parameters",
        "parameters": [
            {
                "name": "parameters",
                "description": "to format [[ParticleArray]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "dynamicSimulationDistance",
        "description": "A getter for [[setDynamicSimulationDistance]]",
        "introduced_version": null,
        "syntax": "'''dynamicSimulationDistance''' category",
        "parameters": [
            {
                "name": "category",
                "description": "see [[setDynamicSimulationDistance]] (\"Group\", \"Vehicle\", \"EmptyVehicle\", \"Prop\")",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - activation distance",
            "sqf_type": "Number"
        }
    },
    {
        "name": "dynamicSimulationDistanceCoef",
        "description": "A getter for [[setDynamicSimulationDistanceCoef]]",
        "introduced_version": null,
        "syntax": "'''dynamicSimulationDistanceCoef''' class",
        "parameters": [
            {
                "name": "class",
                "description": "see [[setDynamicSimulationDistanceCoef]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "dynamicSimulationEnabled",
        "description": "A getter for [[enableDynamicSimulation]]",
        "introduced_version": null,
        "syntax": "'''dynamicSimulationEnabled''' object",
        "parameters": [
            {
                "name": "object",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "dynamicSimulationSystemEnabled",
        "description": "A getter for [[enableDynamicSimulationSystem]]",
        "introduced_version": null,
        "syntax": "'''dynamicSimulationSystemEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "east",
        "description": "Pre-defined variable for the eastern [[Side|side]].",
        "introduced_version": null,
        "syntax": "'''east'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "echo",
        "description": "Sends any text into the debugger console or the logfile. Present in internal version only, not working in the retail version.",
        "introduced_version": null,
        "syntax": "'''echo''' text",
        "parameters": [
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "edit3DENMissionAttributes",
        "description": "Open a window with [[Eden_Editor:_Scenario_Atttributes|scenario attribute]] in given section.",
        "introduced_version": null,
        "syntax": "'''edit3DENMissionAttributes''' section",
        "parameters": [
            {
                "name": "section",
                "description": "attribute section",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "editObject",
        "description": "Show the edit object dialog for the given object.",
        "introduced_version": null,
        "syntax": "map '''editObject''' object",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "object",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Any]]",
            "sqf_type": "Any"
        }
    },
    {
        "name": "editorSetEventHandler",
        "description": "Sets given event handler of given editor.",
        "introduced_version": null,
        "syntax": "map '''editorSetEventHandler''' [handler name,function]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "effectiveCommander",
        "description": "Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the [[effectiveCommander]] is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the [[effectiveCommander]] role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.",
        "introduced_version": null,
        "syntax": "'''effectiveCommander''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - commander unit",
            "sqf_type": "Object"
        }
    },
    {
        "name": "else",
        "description": "Executes [[else]] code when [[if]] condition returns [[false]]",
        "introduced_version": null,
        "syntax": "ifCode '''else''' elseCode",
        "parameters": [
            {
                "name": "ifCode",
                "description": "",
                "sqf_type": "Code"
            },
            {
                "name": "elseCode",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "emptyPositions",
        "description": "Returns the number of given positions in the vehicle.\n\nPositions can be ''\"Commander\", \"Driver\", \"Gunner\"'' or ''\"Cargo\"''",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "enableAI",
        "description": "Enables parts of the AI behavior that was disabled by [[disableAI]]. \n<br><br>",
        "introduced_version": null,
        "syntax": "unit '''enableAI''' skilltype",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "skilltype",
                "description": "See [[disableAI]] for possible values.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableAIFeature",
        "description": "Enables/disables given AI feature. Feature may be one of:\n\n* <tt>\"AwareFormationSoft\"</tt>\n* <tt>\"CombatFormationSoft\"</tt>",
        "introduced_version": null,
        "syntax": "feature '''enableAIFeature''' enable",
        "parameters": [
            {
                "name": "feature",
                "description": "(see description)",
                "sqf_type": "String"
            },
            {
                "name": "enable",
                "description": "[[true]] to enable, [[false]] - to disable",
                "sqf_type": "Boolean"
            },
            {
                "name": "unit",
                "description": "unit to test AI feature for",
                "sqf_type": "Object"
            },
            {
                "name": "feature",
                "description": "[[disableAI]] / [[enableAI]] feature",
                "sqf_type": "String"
            },
            {
                "name": "enabled",
                "description": "[[true]] to enable, [[false]] - to disable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableAimPrecision",
        "description": "Set whether animation's aim precision affects weapon sway.",
        "introduced_version": null,
        "syntax": "unit enableAimPrecision enable",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "[[true]] enable, [[false]], disabled",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableAttack",
        "description": "Set if leader can issue attack commands to the soldiers in his group.",
        "introduced_version": null,
        "syntax": "group '''enableAttack''' enable",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableAudioFeature",
        "description": "Enable/disable an audio feature, features are: \"lowpass\", \"building_interior\".",
        "introduced_version": null,
        "syntax": "[[enableAudioFeature]] [feature, enable]",
        "parameters": [
            {
                "name": "feature",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "enable",
                "description": "[[true]] enable, [[false]], disabled",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - Previous state",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "enableAutoStartUpRTD",
        "description": "Toggle availability of the automated helicopter start-up and shutdown sequences.",
        "introduced_version": null,
        "syntax": "helicopterRTD '''enableAutoStartUpRTD''' enable",
        "parameters": [
            {
                "name": "helicopterRTD",
                "description": "helicopter",
                "sqf_type": "ObjectRTD"
            },
            {
                "name": "enable",
                "description": "enable or disable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableAutoTrimRTD",
        "description": "Toggle auto-trim for RTD helicopters.",
        "introduced_version": null,
        "syntax": "helicopterRTD '''enableAutoTrimRTD''' enable",
        "parameters": [
            {
                "name": "helicopterRTD",
                "description": "helicopter",
                "sqf_type": "ObjectRTD"
            },
            {
                "name": "enable",
                "description": "enable or disable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "enableCamShake",
        "description": "Allows camera shake effects via [[addCamShake]]. If set to [[false]], then a currently active shake effect will stop immediately.\nBy default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible.",
        "introduced_version": null,
        "syntax": "'''enableCamShake''' value",
        "parameters": [
            {
                "name": "value",
                "description": "If [[true]], then shake effects are visible",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableCaustics",
        "description": "Enable/disable caustics drawing.",
        "introduced_version": null,
        "syntax": "'''enableCaustics''' bool",
        "parameters": [
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableChannel",
        "description": "Enables/disables UI functionality which is responsible for sending text or voice chat to the given chat channel. If the channel was disabled in [[Description.ext]] or [[server.cfg]], it can be enabled with this command, however the UI functionality changes will be local to the PC executing this command.",
        "introduced_version": null,
        "syntax": "channelID [[enableChannel]] enable",
        "parameters": [
            {
                "name": "channelID",
                "description": "[[Channel IDs|channel ID]]",
                "sqf_type": "Number"
            },
            {
                "name": "enable",
                "description": "[[true]] to enable, [[false]] to disable (both VoN and chat)",
                "sqf_type": "Boolean"
            },
            {
                "name": "channelID",
                "description": "[[Channel IDs|channel ID]]",
                "sqf_type": "Number"
            },
            {
                "name": "chat",
                "description": "[[true]] to enable text chat",
                "sqf_type": "Boolean"
            },
            {
                "name": "VoN",
                "description": "[[true]] to enable voice chat",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableCollisionWith",
        "description": "Cancels the effects of [[disableCollisionWith]].",
        "introduced_version": null,
        "syntax": "vehicle '''enableCollisionWith''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableCopilot",
        "description": "Enables copilot actions, toggles availability of the actions related to copilots, such as taking over controls, suspending controls, etc. This command triggers <tt>\"ControlsShifted\"</tt> event handler.<br><br>",
        "introduced_version": null,
        "syntax": "vehicle '''enableCopilot''' enable",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle on which to toggle copilot actions",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "enable or disable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableDebriefingStats",
        "description": "Enable debriefing score table.",
        "introduced_version": null,
        "syntax": "[[enableDebriefingStats]] [left, top, width, height]",
        "parameters": [
            {
                "name": "left",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "top",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "width",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "height",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableDiagLegend",
        "description": "Enable or disable the legend for diagnostics. '''Internal dev only!'''",
        "introduced_version": null,
        "syntax": "'''enableDiagLegend''' enable",
        "parameters": [
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableDynamicSimulation",
        "description": "Enables or disables [[Arma_3_Dynamic_Simulation]] for given non AI object",
        "introduced_version": null,
        "syntax": "object '''enableDynamicSimulation''' enable",
        "parameters": [
            {
                "name": "object",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableDynamicSimulationSystem",
        "description": "Enables or disables the whole [[Arma_3_Dynamic_Simulation]] system",
        "introduced_version": null,
        "syntax": "'''enableDynamicSimulationSystem''' enable",
        "parameters": [
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableEndDialog",
        "description": "Enables the execution of a custom camera sequence after the players death, coded in the script onPlayerKilled.sqs.",
        "introduced_version": null,
        "syntax": "'''enableEndDialog'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableEngineArtillery",
        "description": "Enable/disable the artillery engine. This allows the user to use the artillery computer on mortar/artillery, and for AI to use it for indirect fire.",
        "introduced_version": null,
        "syntax": "'''enableEngineArtillery''' enabled",
        "parameters": [
            {
                "name": "enabled",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableEnvironment",
        "description": "Enable/disable environmental effects: ambient life and/or ambient sound.",
        "introduced_version": null,
        "syntax": "[[enableEnvironment]] enabled",
        "parameters": [
            {
                "name": "enabled",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "ambientLife",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "ambientSound",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableFatigue",
        "description": "Enables/Disables the person's fatigue.",
        "introduced_version": null,
        "syntax": "unit '''enableFatigue''' enable",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableGunLights",
        "description": "Sets AI group option how to use gun lights. The string argument can be:\n* <tt>\"Auto\"</tt> - Depends on combat mode \n* <tt>\"ForceOn\"</tt> - Always on\n* <tt>\"ForceOff\"</tt> - Always off",
        "introduced_version": null,
        "syntax": "group [[enableGunLights]] mode",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Object]] - the group forced to use gun lights. If unit is supplied as argument, unit's group is used",
                "sqf_type": "Group"
            },
            {
                "name": "mode",
                "description": "<tt>\"Auto\"</tt>, <tt>\"ForceOn\"</tt>, <tt>\"ForceOff\"</tt>",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableIRLasers",
        "description": "Allows the AI to use IR lasers.",
        "introduced_version": null,
        "syntax": "unitOrGroup [[enableIRLasers]] value",
        "parameters": [
            {
                "name": "unitOrGroup",
                "description": "or [[Group]] - the unit or the group allowed to use IR lasers",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableInfoPanelComponent",
        "description": "Controls availability of component to given object info panel.",
        "introduced_version": null,
        "syntax": "unit [[enableInfoPanelComponent]] [panelID, componentClassOrType, enable]",
        "parameters": [
            {
                "name": "unit",
                "description": "the concerned vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "panelID",
                "description": "\"left\" or \"right\" can be used as panel names",
                "sqf_type": "String"
            },
            {
                "name": "componentClassOrType",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "unit",
                "description": "the concerned vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "turret index",
                "sqf_type": "Array"
            },
            {
                "name": "panelID",
                "description": "\"left\" or \"right\" can be used as panel names",
                "sqf_type": "String"
            },
            {
                "name": "componentClassOrType",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if component was successfully enabled on the panel, [[false]] otherwise (e.g. component is not available for the object)",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "enableMimics",
        "description": "Enables/disables mimics on a given unit.",
        "introduced_version": null,
        "syntax": "unit '''enableMimics''' enabled",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enabled",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enablePersonTurret",
        "description": "Enables or disables firing from a vehicle cargo position. To get the turret path use [[assignedVehicleRole]] or [[getCargoIndex]] command.",
        "introduced_version": null,
        "syntax": "vehicle '''enablePersonTurret''' [turretPath, enable]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableRadio",
        "description": "Enable and disable radio messages to be heard and shown in the left lower corner of the screen. This command can be helpful during cutscenes.",
        "introduced_version": null,
        "syntax": "'''enableRadio''' state",
        "parameters": [
            {
                "name": "state",
                "description": "true to enable the radio, false to disable it",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableReload",
        "description": "Enable / disable reload when magazine is empty.",
        "introduced_version": null,
        "syntax": "object '''enableReload''' enable",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableRopeAttach",
        "description": "Enables or disables the ability to be attached to a rope end for the given entity.",
        "introduced_version": null,
        "syntax": "entity [[enableRopeAttach]] enable",
        "parameters": [
            {
                "name": "entity",
                "description": "given entity",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "[[false]] to disable rope attachment",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableSatNormalOnDetail",
        "description": "Enables/Disables satellite normal map or detail maps.",
        "introduced_version": null,
        "syntax": "'''enableSatNormalOnDetail''' state",
        "parameters": [
            {
                "name": "state",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableSaving",
        "description": "Enable / disable saving of the game with an optional autosave.",
        "introduced_version": null,
        "syntax": "[[enableSaving]] enable",
        "parameters": [
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "enable",
                "description": "allow manual saving",
                "sqf_type": "Boolean"
            },
            {
                "name": "save",
                "description": "create an autosave on command execution",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableSentences",
        "description": "Enables radio transmissions to be heard and seen on screen. It does not affect KBTell conversations.",
        "introduced_version": null,
        "syntax": "'''enableSentences''' enable",
        "parameters": [
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableSimulation",
        "description": "Enables / disables simulation for the given entity. This command will affect entity simulation only [[local |locally]]. For a global and JIP enabled alternative see [[enableSimulationGlobal]]",
        "introduced_version": null,
        "syntax": "entity '''enableSimulation''' state",
        "parameters": [
            {
                "name": "entity",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "state",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableSimulationGlobal",
        "description": "MP command. Enable or disable simulation for given entity, globally. Call this only from the server. Has the same effect as [[enableSimulation]] when used in SP.",
        "introduced_version": null,
        "syntax": "entity [[enableSimulationGlobal]] enable",
        "parameters": [
            {
                "name": "entity",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableStamina",
        "description": "Enable/disable stamina system",
        "introduced_version": null,
        "syntax": "unit '''enableStamina''' enabled",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enabled",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableStressDamage",
        "description": "Toggles stress damage in [[Description.ext#forceRotorLibSimulation | Advanced Flight Model]], which otherwise could be manually toggles in game setting: <tt>Options</tt> - <tt>Game</tt> - <tt>Helicopter Flight Model</tt> - <tt>Advanced</tt> - <tt>Stress Damage</tt>.<br><br>",
        "introduced_version": null,
        "syntax": "'''enableStressDamage''' state",
        "parameters": [
            {
                "name": "state",
                "description": "[[true]] to enable stress damage, [[false]] to disable it",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableTeamSwitch",
        "description": "Enable / disable [[Team_Switch|Team Switch]]. The default setting is enabled.",
        "introduced_version": null,
        "syntax": "[[enableTeamSwitch]] enable",
        "parameters": [
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableTraffic",
        "description": "Enable ambient traffic.",
        "introduced_version": null,
        "syntax": "'''enableTraffic''' enable",
        "parameters": [
            {
                "name": "enable",
                "description": "enable or disable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableUAVConnectability",
        "description": "Enables unit's AV terminal(s) connecting to UAV.",
        "introduced_version": null,
        "syntax": "object [[enableUAVConnectability]] [uav, checkAllItems]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "uav",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "checkAllItems",
                "description": "True for enabling of all terminals in unit's inventory, false for enabling of terminal assigned to proper slot only.",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableUAVWaypoints",
        "description": "Enables/disables the option for player to set waypoints for UAV in AV terminal.",
        "introduced_version": null,
        "syntax": "uav [[enableUAVWaypoints]] enable",
        "parameters": [
            {
                "name": "uav",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableVehicleCargo",
        "description": "Enable/disable option to transport other vehicles (if configured) or be transported.",
        "introduced_version": null,
        "syntax": "vehicle [[enableVehicleCargo]] enable",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableVehicleSensor",
        "description": "Enable/disable given sensor",
        "introduced_version": null,
        "syntax": "vehicle '''enableVehicleSensor''' [componentName, state]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "state",
                "description": "component state [on/off]",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enableWeaponDisassembly",
        "description": "Enables or disables disassembly of static weapons. Could be applied to local [[player]], to another unit or to static weapon directly.",
        "introduced_version": null,
        "syntax": "'''enableWeaponDisassembly''' enable",
        "parameters": [
            {
                "name": "enable",
                "description": "[[false]] to prevent local [[player]] from being able to disassemble static weapons",
                "sqf_type": "Boolean"
            },
            {
                "name": "entity",
                "description": "unit or static weapon",
                "sqf_type": "Object"
            },
            {
                "name": "enable",
                "description": "[[false]] to prevent a unit from being able to disassemble static weapons, or to prevent a static weapon from being disassembled by anyone",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "endLoadingScreen",
        "description": "Finishes loading screen started by [[startLoadingScreen]].",
        "introduced_version": null,
        "syntax": "[[endLoadingScreen]]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "endMission",
        "description": "Finish the mission.\n\nThe end type can be:\n* \"CONTINUE\"\n* \"KILLED\"\n* \"LOSER\"\n* \"END1\"\n* \"END2\"\n* \"END3\"\n* \"END4\"\n* \"END5\"\n* \"END6\"\n\n'''Mission saves are deleted'''. Use [[failMission]] if they should not.<br><br>",
        "introduced_version": null,
        "syntax": "'''endMission''' endType",
        "parameters": [
            {
                "name": "endType",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "endl",
        "description": "Creates a string containing a line break, similar to [[lineBreak]] for [[text]]. The name is inspired by c++ std::endl ('''end''' '''l'''ine). The command returns \"\\r\\n\", which contains control characters rather than printable characters:  \n* <tt>[[hint]] [[str]] [[count]] \"\\r\\n\"; // 4</tt>\n* <tt>[[hint]] [[str]] [[count]] [[endl]]; // 2</tt>\nThe line break works for [[diag_log]] and [[ctrlSetText]]. It doesn't work with the [[hint]] because [[hint]] interprets printable \"\\n\" as line break instead. Alternatively one can use [[toString]] command to get other characters.",
        "introduced_version": null,
        "syntax": "'''endl'''",
        "parameters": [],
        "returns": {
            "description": "[[String]] - line break",
            "sqf_type": "String"
        }
    },
    {
        "name": "engineOn",
        "description": "Activates and deactivates the engine of a vehicle. This command has to be executed where vehicle is [[local]]. \n\nNOTE: Executed on a remote vehicle this command may turn the engine on but then it will get turned off by itself after a short while.",
        "introduced_version": null,
        "syntax": "vehicle '''engineOn''' state",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "state",
                "description": "true to turn the engine on, false to turn it off",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "enginesIsOnRTD",
        "description": "Returns which engines are producing some work.",
        "introduced_version": null,
        "syntax": "[[enginesIsOnRTD]] RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Array]] -  [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "enginesPowerRTD",
        "description": "Returns power produced by engines in Watts.",
        "introduced_version": null,
        "syntax": "[[enginesPowerRTD]] RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - Watts produced by the engines, to format [engine1, engine2]. Returns an empty array if [[Advanced_Helicopter_Flight_Model_in_Arma3|Advanced Flight Model]] is disabled.",
            "sqf_type": "Array"
        }
    },
    {
        "name": "enginesRpmRTD",
        "description": "Returns all engines RPM.",
        "introduced_version": null,
        "syntax": "[[enginesRpmRTD]] RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "enginesTorqueRTD",
        "description": "Torque produced by engines in '''N\u00b7m''' (Newton*meter).",
        "introduced_version": null,
        "syntax": "[[enginesTorqueRTD]] RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "entities",
        "description": "Returns a list of all alive and dead entities of the given type or deriving from the given type. Units in vehicles are ignored. When empty string \"\" is passed for the type, all entity types are returned.<br><br>\nAlternative syntax introduced in Arma 3 v1.65.138685 allows to filter entities by type and alive status as well as to return entities currently in vehicles.<br><br>\n'''Optimisation tip''': Keep number of types in both ''includeTypes'' and ''excludeTypes'' arrays to a minimum by possibly using parent/base classes. If you have to use several types, arrange them in order so that the more common types go at the beginning of the array.",
        "introduced_version": null,
        "syntax": "[[entities]] type",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "typesInclude",
                "description": "in format [type1, type2, ...typeN], where type is a [[String]]. Empty array [] means include every entity. Method used for filtering - [[isKindOf]]",
                "sqf_type": "Array"
            },
            {
                "name": "typesExclude",
                "description": "in format [type1, type2, ...typeN], where type is a [[String]]. Empty array [] means exclude no entity. Method used for filtering - [[isKindOf]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "environmentEnabled",
        "description": "Returns status of [[enableEnvironment]] command",
        "introduced_version": null,
        "syntax": "'''environmentEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] in format [ambientLife, ambientSound] where:\n* ambientLife: [[Boolean]] \n* ambientSound: [[Boolean]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "estimatedEndServerTime",
        "description": "Estimated end of MP game in seconds converted to [[serverTime]].",
        "introduced_version": null,
        "syntax": "'''estimatedEndServerTime'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - seconds left",
            "sqf_type": "Number"
        }
    },
    {
        "name": "estimatedTimeLeft",
        "description": "Sets the estimated time left in the game that is shown in the \"Game in progress\" screen or in the master browser.",
        "introduced_version": null,
        "syntax": "[[estimatedTimeLeft]] seconds",
        "parameters": [
            {
                "name": "seconds",
                "description": "Estimated time in seconds (maximum 36000 (10 hours))",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "evalObjectArgument",
        "description": "Return argument in mission editor of a given object.",
        "introduced_version": null,
        "syntax": "map '''evalObjectArgument''' [object, argument]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Any Value]]",
            "sqf_type": "Any"
        }
    },
    {
        "name": "everyBackpack",
        "description": "Returns array of backpacks stored in given crate or vehicle. Used for accessing backpack content of a backpack on ground.",
        "introduced_version": null,
        "syntax": "[[everyBackpack]] box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "everyContainer",
        "description": "Returns array of all containers (uniforms, vests, backpacks) stored in given crate or vehicle. Used for accessing containers content stored in ammo box or ground holder.",
        "introduced_version": null,
        "syntax": "'''everyContainer''' object",
        "parameters": [
            {
                "name": "object",
                "description": "Vehicle or ammo box",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "exec",
        "description": "Execute a script using (the deprecated but still available) [[SQS syntax]]. [[SQF syntax]] (and [[execVM]]) is the most recent scripting language.<br>\nThe magic variable [[Magic_Variables#time|_time]] used within the script contains the elapsed time in seconds since the script started.",
        "introduced_version": null,
        "syntax": "argument [[exec]] script",
        "parameters": [
            {
                "name": "script",
                "description": "the file path to the script. It should be given relatively to the mission folder, campaign scripts subfolder or global scripts folder and is searched there in the same order.<br>If you refer to a script packed together with an addon, the path should look like this: \"\\ADDON_PBO_NAME\\script.sqs\" where ADDON_PBO_NAME is the name of the addon's [[PBO]] file without extension.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "execFSM",
        "description": "Execute scripted [[FSM]] and return the FSM handle or 0 when failed. The FSM file is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. Argument (if any) are available in <tt>_this</tt> variable inside FSM. Variables set inside FSMs can be read/modified externally, using [[setFSMVariable]] and [[getFSMVariable]] commands.<br>\n<br>\nThe return value is the FSM handle; it can be used to determine (via [[completedFSM]]) when the FSM has finished.",
        "introduced_version": null,
        "syntax": "arguments [[execFSM]] fsmFilePath",
        "parameters": [
            {
                "name": "arguments",
                "description": "Arguments accessible as <tt>_this</tt> in the FSM",
                "sqf_type": "Anything"
            },
            {
                "name": "fsmFilePath",
                "description": "file with FSM code",
                "sqf_type": "String"
            },
            {
                "name": "fsmFilePath",
                "description": "file with FSM code",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - FSM handle",
            "sqf_type": "Number"
        }
    },
    {
        "name": "execVM",
        "description": "Compiles and adds [[SQF_syntax|SQF]] [[Script]] to the [[Scheduler|scheduler]] queue and returns script handle. The script is first searched for in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. The script does not execute immediately upon running [[execVM]] command, but with some delay. How much delay is unknown as it largely depends on how many other scripts there are in the queue and how busy is VM. The optional argument is passed to the script in [[private]] variable <tt>_this</tt>. In Arma 3 the script handle is also passed to the script in <tt>_thisScript</tt> variable.\n<br><br>In order to understand [[execVM]] consider the following comparison:\n<code>[[private]] _handle",
        "introduced_version": null,
        "syntax": "arguments [[execVM]] filename",
        "parameters": [
            {
                "name": "arguments",
                "description": "arguments accessible as <tt>[[_this]]</tt> in the script",
                "sqf_type": "Anything"
            },
            {
                "name": "filename",
                "description": "file with sqf code (doesn't have to have .sqf extension, but not using standard extensions may cause problems later during binarisation)",
                "sqf_type": "String"
            },
            {
                "name": "filename",
                "description": "file with sqf code (doesn't have to have .sqf extension, but not using standard extensions may cause problems later, during binarisation)",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Script]] - script handle, can be used to determine (via [[scriptDone]] (also via [[isNull]] in Arma 3)) when the execVMed script has finished. In Arma 3, the handle is also available inside the execVMed script in <tt>_thisScript</tt> variable.",
            "sqf_type": "Script"
        }
    },
    {
        "name": "exit",
        "description": "Stops the execution of a [[sqs | SQS script]].\n\nIt's ignored in [[SQF | SQF Scripts]].",
        "introduced_version": null,
        "syntax": "'''exit'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "exitWith",
        "description": "Exits current scope {...} it is executed from if condition evaluates [[true]], creates new scope {...code...} and executes the given code in it. Often used for exiting [[do]], [[for]], [[count]] or [[forEach]]. Simply exiting [[waitUntil]] or [[onEachFrame]] scopes with [[exitWith]] will have no effect as these scopes are called repeatedly by the engine and require different handling to terminate (see Example 3).",
        "introduced_version": null,
        "syntax": "ifType [[exitWith]] code",
        "parameters": [
            {
                "name": "code",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Anything]]",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "exp",
        "description": "Let '''x''' be a number, then '''exp (x)''' is equal to '''e to the power of x''' (or e^x)",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "expectedDestination",
        "description": "Return expected destination of unit as an array.",
        "introduced_version": null,
        "syntax": "[[Array]]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] in form:\n*0: [[Position]]\n*1: planningMode\n*2: forceReplan",
            "sqf_type": "Array"
        }
    },
    {
        "name": "exportJIPMessages",
        "description": "Export list of JIP to a file. <br>Special: BattlEye's RCON variant of this command is #exportJIPqueue (see also [[Multiplayer_Server_Commands]])",
        "introduced_version": null,
        "syntax": "'''exportJIPMessages''' fileName",
        "parameters": [
            {
                "name": "fileName",
                "description": "File where to store the list",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "eyeDirection",
        "description": "Returns the direction object is watching (eyes, or a vehicle primary observer).",
        "introduced_version": null,
        "syntax": "'''eyeDirection''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - 3D Vector",
            "sqf_type": "Array"
        }
    },
    {
        "name": "eyePos",
        "description": "Returns the object's eyes / main turret position.",
        "introduced_version": null,
        "syntax": "'''eyePos''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "face",
        "description": "Returns the face of a person.",
        "introduced_version": null,
        "syntax": "'''face''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "faction",
        "description": "Gets unit faction. Factions were introduced in",
        "introduced_version": null,
        "syntax": "[[faction]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "fadeMusic",
        "description": "Changes the current music volume to the given value smoothly within the given time.",
        "introduced_version": null,
        "syntax": "time '''fadeMusic''' volume",
        "parameters": [
            {
                "name": "time",
                "description": "fade interval in seconds",
                "sqf_type": "Number"
            },
            {
                "name": "volume",
                "description": "music volume range 0 to 1. Maximum volume is 1. Default is 0.5.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "fadeRadio",
        "description": "Causes a smooth change in the radio volume. The change duration is given by time, the target volume by volume. The default radio volume is 1.0.",
        "introduced_version": null,
        "syntax": "time '''fadeRadio''' volume",
        "parameters": [
            {
                "name": "time",
                "description": "in seconds",
                "sqf_type": "Number"
            },
            {
                "name": "volume",
                "description": "radio volume range 0 to 1. Maximum volume is 1. Default is 1.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "fadeSound",
        "description": "Changes the sound volume smoothly within the given time.",
        "introduced_version": null,
        "syntax": "time '''fadeSound''' volume",
        "parameters": [
            {
                "name": "time",
                "description": "the time in seconds",
                "sqf_type": "Number"
            },
            {
                "name": "volume",
                "description": "sound volume range 0 to 1. Maximum volume is 1. Default is 1.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "fadeSpeech",
        "description": "Cause a smooth change in the master speech volume. The change duration is given by time, the target volume by volume. The default master is 1.0.",
        "introduced_version": null,
        "syntax": "time '''fadeSpeech''' volume",
        "parameters": [
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "volume",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "failMission",
        "description": "Finish the mission. If the server is set to run persistent mission, [[failMission]] will not end the mission when last player gets kicked to the lobby. Use [[endMission]] to end the mission.\n\nThe end type can be:\n* \"CONTINUE\"\n* \"KILLED\"\n* \"LOSER\"\n* \"END1\"\n* \"END2\"\n* \"END3\"\n* \"END4\"\n* \"END5\"\n* \"END6\"\n\n'''Mission saves won't be deleted'''.<br><br>",
        "introduced_version": null,
        "syntax": "'''failMission''' endtype",
        "parameters": [
            {
                "name": "endtype",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "false",
        "description": "Always false.",
        "introduced_version": null,
        "syntax": "'''false'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "fillWeaponsFromPool",
        "description": "Adds magazines from the campaign pool to the given unit, depending on his weapons.",
        "introduced_version": null,
        "syntax": "'''fillWeaponsFromPool''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "find",
        "description": "Searches for an array element within array or a ANSI string within a ANSI string. Returns the 0 based index on success or -1 if not found. If Unicode support is desired, see [[forceUnicode]].",
        "introduced_version": null,
        "syntax": "array [[find]] element",
        "parameters": [
            {
                "name": "array",
                "description": "array to search in",
                "sqf_type": "Array"
            },
            {
                "name": "element",
                "description": "array element to find",
                "sqf_type": "Anything"
            },
            {
                "name": "string",
                "description": "string to search in",
                "sqf_type": "String"
            },
            {
                "name": "substring",
                "description": "substring to find",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - 0 based position of the first array element that matches x, -1 if not found",
            "sqf_type": "Number"
        }
    },
    {
        "name": "findCover",
        "description": "Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional.<br><br>",
        "introduced_version": null,
        "syntax": "object '''findCover''' [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            },
            {
                "name": "hidePosition",
                "description": "format [[getHideFrom]]. Position of that which the unit should hide from",
                "sqf_type": "Array"
            },
            {
                "name": "maxDist",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "minDist",
                "description": "(Optional)",
                "sqf_type": "Number"
            },
            {
                "name": "visibilityPosition",
                "description": "format [[Position]] (Optional) used to select cover that unit can see in that direction from",
                "sqf_type": "Array"
            },
            {
                "name": "ignoreObject",
                "description": "(Optional) Ignore this object in visibility check",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - always [[objNull]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "findDisplay",
        "description": "Finds a display by its IDD which can either be defined in [[missionConfigFile]] ([[description.ext]]) or [[configFile]] ([[config.cpp]])<br>\nIf the specified display can't be found [[displayNull]] (\"No display\") is returned, which can be tested with the [[isNull]] command.<br><br>",
        "introduced_version": null,
        "syntax": "[[findDisplay]] idd",
        "parameters": [
            {
                "name": "idd",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Display]]",
            "sqf_type": "Display"
        }
    },
    {
        "name": "findEditorObject",
        "description": "Return object that matches the provided reference.",
        "introduced_version": null,
        "syntax": "map '''findEditorObject''' value",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "value",
                "description": "-",
                "sqf_type": "Any"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "findEmptyPosition",
        "description": "Searches for an empty position around specified position. The search starts looking for an empty position at a minimum distance of [radius] from the [center] and looks as far away as [radius + maxDistance]. If a [vehicleType] parameter is specified, then the search will look for an empty positions that is big enough to hold that vehicle type. If an empty position isn't found, an empty array is returned. This command ignores moving objects present within search area. The search area could be preloaded with [[findEmptyPositionReady]] command. See also: [[BIS_fnc_findSafePos]].",
        "introduced_version": null,
        "syntax": "center '''findEmptyPosition''' [radius, maxDistance, vehicleType]",
        "parameters": [
            {
                "name": "center",
                "description": "Search area center position in format [x,y] or [x,y,z] in which case z is ignored. Accepts [[Position2D]] or [[Position3D]]",
                "sqf_type": "Array"
            },
            {
                "name": "radius",
                "description": "Start searching no closer than <tt>radius</tt> from the center",
                "sqf_type": "Number"
            },
            {
                "name": "maxDistance",
                "description": "Stop searching no further than <tt>radius + maxDistance</tt> from the center",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - A suitable empty position in format [[Position3D]] or [] if not found",
            "sqf_type": "Array"
        }
    },
    {
        "name": "findEmptyPositionReady",
        "description": "Preloads area to be used with [[findEmptyPosition]] command and returns [[true]] when area is ready. The size of the area preloaded is from <tt>center - radius - maxDistance</tt> to <tt>center + radius + maxDistance</tt><br><br>",
        "introduced_version": null,
        "syntax": "center '''findEmptyPositionReady''' [radius, maxDistance]",
        "parameters": [
            {
                "name": "center",
                "description": "Search area center position in format [x,y] or [x,y,z] in which case z is ignored. Accepts [[Position2D]] or [[Position3D]]",
                "sqf_type": "Array"
            },
            {
                "name": "radius",
                "description": "distance from the center",
                "sqf_type": "Number"
            },
            {
                "name": "maxDistance",
                "description": "distance from the end of radius",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] when ready",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "findIf",
        "description": "Searches for an element within array for which the code evaluates to true.\nReturns the zero-based index on success or -1 if not found.\nCode on the right side of the command is evaluated for each element of the array, processed element can be referenced in code as [[_x]].",
        "introduced_version": null,
        "syntax": "array [[findIf]] code",
        "parameters": [
            {
                "name": "array",
                "description": "array to search in",
                "sqf_type": "Array"
            },
            {
                "name": "code",
                "description": "code defining an element to find, processed element can be referenced within the code as [[_x]]",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Number]] - Zero-based position of the first array element for which the code evaluate to true, -1 if not found",
            "sqf_type": "Number"
        }
    },
    {
        "name": "findNearestEnemy",
        "description": "Finds the nearest enemy to the specified position. Returns a null object if the object's group does not [[knowsAbout|know about]] any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see [[addVehicle]]) can be returned as valid nearest target.",
        "introduced_version": null,
        "syntax": "object '''findNearestEnemy''' position",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "finishMissionInit",
        "description": "Finish world initialization before mission is launched.",
        "introduced_version": null,
        "syntax": "'''finishMissionInit'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "finite",
        "description": "Returns [[true]] if the provided number is finite (not infinite and a valid number).",
        "introduced_version": null,
        "syntax": "[[finite]] number",
        "parameters": [
            {
                "name": "number",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "fire",
        "description": "Forces a unit to fire the given weapon. See also: [[BIS_fnc_fire]].<br>",
        "introduced_version": null,
        "syntax": "unit [[fire]] muzzle",
        "parameters": [
            {
                "name": "unit",
                "description": "unit that is supposed to fire",
                "sqf_type": "Object"
            },
            {
                "name": "muzzle",
                "description": "name of the muzzle to be fired",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "muzzle",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "mode",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "magazine",
                "description": "(Optional)",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "fireAtTarget",
        "description": "Remotely forces a unit to fire the given weapon. See also: [[BIS_fnc_fire]]",
        "introduced_version": null,
        "syntax": "sourceVehicle '''fireAtTarget''' [targetVehicle, weaponMuzzleName]",
        "parameters": [
            {
                "name": "sourceVehicle",
                "description": "source vehicle to fire from",
                "sqf_type": "Object"
            },
            {
                "name": "targetVehicle",
                "description": "target vehicle to fire at",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if fired, [[false]] if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "firstBackpack",
        "description": "Returns the first stored backpack.",
        "introduced_version": null,
        "syntax": "[[firstBackpack]] box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "flag",
        "description": "Returns the original flag pole of the flag the unit is carrying.",
        "introduced_version": null,
        "syntax": "[[flag]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - Flag pole object the flag belongs to. If the unit carries no flag, [[objNull]] is returned.",
            "sqf_type": "Object"
        }
    },
    {
        "name": "flagAnimationPhase",
        "description": "Returns flag position on the flag pole in range of 0..1, where 0 is bottom of the flag pole, 1 is the top of the flag pole. The result is local to the PC on which command is executed",
        "introduced_version": null,
        "syntax": "'''flagAnimationPhase''' flag",
        "parameters": [
            {
                "name": "flag",
                "description": "flag pole of the type \"FlagCarrier\"",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - 0...1",
            "sqf_type": "Number"
        }
    },
    {
        "name": "flagOwner",
        "description": "Returns the global owner of a flag. A getter for [[setFlagOwner]]. Note that owner of a flag is [[Object]] rather than [[Number]], as how it is usually with other [[owner]] commands",
        "introduced_version": null,
        "syntax": "'''flagOwner''' flag",
        "parameters": [
            {
                "name": "flag",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] -  The person or vehicle that owns the flag is returned. If used on anything else than a flag, the returned value is [[objNull]]. If the flag is on its pole, the return value is NULL. If the flagowner is dead, the return value is the name of the soldier model.",
            "sqf_type": "Object"
        }
    },
    {
        "name": "flagSide",
        "description": "Returns [[Side]] of the [[local]] instance of the flag. A getter for [[setFlagSide]].",
        "introduced_version": null,
        "syntax": "[[flagSide]] flag",
        "parameters": [
            {
                "name": "flag",
                "description": "flag",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "flagTexture",
        "description": "Returns texture of the [[local]] instance of the flag. A getter for [[setFlagTexture]]. It will not return flag textures applied using [[forceFlagTexture]], use [[getForcedFlagTexture]] for that.",
        "introduced_version": null,
        "syntax": "[[flagTexture]] flagCarrier",
        "parameters": [
            {
                "name": "flagCarrier",
                "description": "flag or person",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "fleeing",
        "description": "Checks if a unit is fleeing.\n<br><br>\nNotes:\n* Fleeing only affects AI led groups.\n* Only the group as a whole can flee (or not).\n* The courage of the AI group is based on the group's leader [[Arma_3_AI_Skill#Sub-Skills|courage subskill]].\n* Each group has a max strength (summed \"armor\" of all infantry units - plus armor when inside vehicles).\n* If the group losses by injury/damage or death/destruction are higher than the max strength, multiplied by leader's courage or [[allowFleeing]] level , then the group will start fleeing.\n* As result primarily the AI flees to a nearby \"supply point\" (some friendly units - preferably with medic or engineer, or a vehicle with repair/ammo/fuel cargo). Alternatively it will try to find a safe position within a 600m radius from the initial waypoint (danger, distance, amount of cover positions are taken into account).\n* After the fleeing has been finished the group's initial strength is reset.\n* Fleeing units in [[combatMode]] red, will be set to yellow when fleeing to avoid engaging enemies while doing so.\n* While fleeing, the group leader will be set to green, to avoid giving engage or fire orders, unless in [[combatMode]] blue already. Also [[speedMode]] is set to full.\n* When reaching their flee point/destination, they will change to [[combatMode]] yellow and [[speedMode]] normal.\n* With [[allowFleeing]] one can make unit's flee earlier (or essentially never flee). Apply it, overrides the courage subskill influence.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - Returns true if a unit is fleeing, false if not. Dead or empty units return false.",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "floor",
        "description": "Returns the next lowest integer in relation to x.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "flyInHeight",
        "description": "Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground. The default flying altitude is 100 meters.",
        "introduced_version": null,
        "syntax": "aircraft [[flyInHeight]] altitude",
        "parameters": [
            {
                "name": "aircraft",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "altitude",
                "description": "flying altitude in meters",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "flyInHeightASL",
        "description": "Sets the minimal ASL height. Final height is",
        "introduced_version": null,
        "syntax": "aircraft [[flyInHeightASL]] [standardAltitude, combatAltitude, stealthAltitude]",
        "parameters": [
            {
                "name": "aircraft",
                "description": "helicopter, airplane",
                "sqf_type": "Object"
            },
            {
                "name": "standardAltitude",
                "description": "base altitude used when [[behaviour]] is neither \"COMBAT\" or \"STEALTH\"",
                "sqf_type": "Number"
            },
            {
                "name": "combatAltitude",
                "description": " altitude used when [[behaviour]] is \"COMBAT\"",
                "sqf_type": "Number"
            },
            {
                "name": "stealthAltitude",
                "description": "altitude used when [[behaviour]] is \"STEALTH\"",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "fog",
        "description": "A getter for [[setFog]]. Returns the current value of the fog in range 0...1.",
        "introduced_version": null,
        "syntax": "'''fog'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "fogForecast",
        "description": "Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.",
        "introduced_version": null,
        "syntax": "'''fogForecast'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "fogParams",
        "description": "A getter for [[setFog]] (Alt Syntax). Returns extended params for the fog",
        "introduced_version": null,
        "syntax": "'''fogParams'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - in format [[setFog]]: [fogValue, fogDecay, fogBase]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "for",
        "description": "This operator creates a [[For Type]] which is used in the for-constructs.",
        "introduced_version": null,
        "syntax": "[[for]] arguments",
        "parameters": [
            {
                "name": "arguments",
                "description": "declares the index variable name like \"_myVar\". [[from]] and [[to]] are required, [[step]] is optional.",
                "sqf_type": "String"
            },
            {
                "name": "init",
                "description": "loop variable definition",
                "sqf_type": "Code"
            },
            {
                "name": "condition",
                "description": "[[call]]ed code returns [[false]], leave the [[for]]-loop",
                "sqf_type": "Code"
            },
            {
                "name": "codeToExecute",
                "description": "code to be run on each loop",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[For Type]]",
            "sqf_type": "For"
        }
    },
    {
        "name": "forEach",
        "description": "Executes the given command(s) on every item of an array.<br>\nThe array items are represented by the [[Magic Variables|magic variable]] '''[[_x]]'''. The array indices are represented by '''[[_forEachIndex]]'''.<br>\nIn",
        "introduced_version": null,
        "syntax": "code [[forEach]] array",
        "parameters": [
            {
                "name": "array",
                "description": "the array to iterate",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Anything]] - will return the value of last executed statement",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "forEachMember",
        "description": "Executes the given command recursively for both teams and agents that are members of the given team. For teams only use [[forEachMemberTeam]]. For agents only use [[forEachMemberAgent]].",
        "introduced_version": null,
        "syntax": "command '''forEachMember''' team",
        "parameters": [
            {
                "name": "command",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forEachMemberAgent",
        "description": "Executes the given command recursively for each agent that is a member of the given team. For just teams use [[forEachMemberTeam]]. For both teams and agents use [[forEachMember]].",
        "introduced_version": null,
        "syntax": "command '''forEachMemberAgent''' team",
        "parameters": [
            {
                "name": "command",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forEachMemberTeam",
        "description": "Executes the given command recursively for each team that is a member of the given team. For just agents use [[forEachMemberAgent]]. For both teams and agents use [[forEachMember]].",
        "introduced_version": null,
        "syntax": "command '''forEachMemberTeam''' team",
        "parameters": [
            {
                "name": "command",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceAddUniform",
        "description": "Create a new uniform and hard link it into slot (without any restrictions).",
        "introduced_version": null,
        "syntax": "unit [[forceAddUniform]] type",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceAtPositionRTD",
        "description": "Adds force generator to world.",
        "introduced_version": null,
        "syntax": "[[forceAtPositionRTD]] position",
        "parameters": [
            {
                "name": "position",
                "description": "Position where to force generator is created.",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]] - Force index",
            "sqf_type": "Number"
        }
    },
    {
        "name": "forceEnd",
        "description": "Forces mission ending (set with [[endMission]]) even if a camera effect or any another condition delays the endMission (mostly in [[",
        "introduced_version": null,
        "syntax": "[[forceEnd]]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceFlagTexture",
        "description": "Forces a flag texture onto a flag carrier (unit, vehicle or flag pole). No flag holder is required. If \"\" is used as texture, the texture is removed. This will override regularly owned flags. This type of flag texture cannot be retrieved using [[flagTexture]], but [[getForcedFlagTexture]].",
        "introduced_version": null,
        "syntax": "object [[forceFlagTexture]] texture",
        "parameters": [
            {
                "name": "object",
                "description": "vehicle, unit of flag pole",
                "sqf_type": "Object"
            },
            {
                "name": "texture",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceFollowRoad",
        "description": "Forces the vehicle to stay on road.",
        "introduced_version": null,
        "syntax": "vehicle '''forceFollowRoad''' state",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "state",
                "description": "true: Force on road, false: default behaviour",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceGeneratorRTD",
        "description": "Adds force generator to world.",
        "introduced_version": null,
        "syntax": "[[forceGeneratorRTD]] index",
        "parameters": [
            {
                "name": "index",
                "description": "Index",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] - Force index",
            "sqf_type": "Number"
        }
    },
    {
        "name": "forceMap",
        "description": "Opens non-interactive main map in background that overrides user screen. <br><br>",
        "introduced_version": null,
        "syntax": "'''forceMap''' show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceRespawn",
        "description": "Forces unit to respawn. The effect as if the player pressed RESPAWN button in the game pause menu, the unit is killed only there is no \"so and so was killed\" message and no score adjustment.",
        "introduced_version": null,
        "syntax": "'''forceRespawn''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceSpeed",
        "description": "Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour. Used unit is m/s.",
        "introduced_version": null,
        "syntax": "object '''forceSpeed''' speed",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "speed",
                "description": "(in m/s)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceWalk",
        "description": "Forces unit to walk even if run or sprint is selected.",
        "introduced_version": null,
        "syntax": "unit '''forceWalk''' value",
        "parameters": [
            {
                "name": "unit",
                "description": "the unit forced to walk",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "true/false",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceWeaponFire",
        "description": "The unit will be forced to fire weapon from the given muzzle. The weapon will not fire if firemode passed as parameter is not supported by the given muzzle. The muzzle could belong to a vehicle weapon and unit in this case will be the unit operating this weapon. Doesnt't seem to work for units in FFV positions. Works on [[player]]. See also: [[BIS_fnc_fire]]",
        "introduced_version": null,
        "syntax": "unit [[forceWeaponFire]] [muzzle, firemode]",
        "parameters": [
            {
                "name": "unit",
                "description": "unit alone or in vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "muzzle",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forceWeatherChange",
        "description": "Forces saved wanted settings for weather to be actual (BEWARE: Will cause lag). \n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''forceWeatherChange'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "forcedMap",
        "description": "Returns if map was forced by using [[forceMap]] command or [[openMap]] command with force option",
        "introduced_version": null,
        "syntax": "'''forcedMap'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - in format [forceMapForced, openMapForced] where:\n* forceMapForced: [[Boolean]] - [[true]] if map was forced with [[forceMap]] command\n* openMapForced: [[Boolean]] - [[true]] if map was forced with [[openMap]] command.",
            "sqf_type": "Array"
        }
    },
    {
        "name": "forgetTarget",
        "description": "Resets the info a group has about a target, forcing [[knowsAbout]] value to 0.",
        "introduced_version": null,
        "syntax": "group '''forgetTarget''' target",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Object]] - group itself or unit in a group",
                "sqf_type": "Group"
            },
            {
                "name": "target",
                "description": "group target",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "formLeader",
        "description": "Returns the formation leader of a given unit. This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.",
        "introduced_version": null,
        "syntax": "[[Object]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] -  \nthe leader of the formation is returned. If used on a dead unit, the returned value is [[objNull]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "format",
        "description": "Composes a string containing other variables or other variable types. Converts any variable type to a string. If you want to convert a string back to a number, use [[parseNumber]]. <br><br>",
        "introduced_version": null,
        "syntax": "'''format''' [formatString, var1, var2 ...]",
        "parameters": [
            {
                "name": "formatString",
                "description": "a string containing text and/or references to the variables listed below in the array. The references appear in the form of %1, %2 etc.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]] -  \nThe full string (up to 8kb, see above) is returned.",
            "sqf_type": "String"
        }
    },
    {
        "name": "formatText",
        "description": "Creates a [[Structured Text]] similar to [[format]] command.",
        "introduced_version": null,
        "syntax": "[[formatText]] [format, argument1, argument2, ...]",
        "parameters": [
            {
                "name": "format",
                "description": "a string containing text and/or references to the variables listed below in the array. The references appear in the form of %1, %2 etc.",
                "sqf_type": "String"
            },
            {
                "name": "argument",
                "description": "use [[Structured Text]] where necessary (see [[#Example|Example 2]])",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "formation",
        "description": "Returns the current formation of a group.",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "grp",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] -  returns either \"COLUMN\", \"STAG COLUMN\", \"WEDGE\", \"ECH LEFT\", \"ECH RIGHT\", \"VEE\" or \"LINE\"",
            "sqf_type": "String"
        }
    },
    {
        "name": "formationDirection",
        "description": "Return the direction in degrees of the 'unit' watching in formation.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "formationLeader",
        "description": "Return leader of the formation.",
        "introduced_version": null,
        "syntax": "[[Object]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "formationMembers",
        "description": "Return list of units (drivers) in the formation.",
        "introduced_version": null,
        "syntax": "[[Array]]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "formationPosition",
        "description": "Return position of unit in the formation.",
        "introduced_version": null,
        "syntax": "'''formationPosition''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Position]]",
            "sqf_type": "Position"
        }
    },
    {
        "name": "formationTask",
        "description": "Return the current task of the unit in the formation.\n \nYou can't use it in ArmA 2, it will always returns \"NOTHING\"",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]: (EXCLUDED, MOVE, COVER, LEADER)",
            "sqf_type": "String"
        }
    },
    {
        "name": "freeLook",
        "description": "Returns true if freelook is active.",
        "introduced_version": null,
        "syntax": "'''freeLook'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "from",
        "description": "Continue sequence of [[for]] construct. It sets the start value of the index variable.",
        "introduced_version": null,
        "syntax": "for [[from]] b",
        "parameters": [
            {
                "name": "b",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[For Type]]",
            "sqf_type": "For"
        }
    },
    {
        "name": "fromEditor",
        "description": "Return if given team was inserted directly from mission editor.",
        "introduced_version": null,
        "syntax": "'''fromEditor''' teamMember",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "fuel",
        "description": "Checks how much fuel is left in the gas tank of a vehicle.",
        "introduced_version": null,
        "syntax": "'''fuel''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] -  \nThe returned number is in range 0 (empty tank) to 1 (full tank).",
            "sqf_type": "Number"
        }
    },
    {
        "name": "fullCrew",
        "description": "Returns an array with all crew inside given vehicle, with or without empty seats.",
        "introduced_version": null,
        "syntax": "[[fullCrew]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "includeEmpty",
                "description": "(Optional, default [[false]]) include empty crew seats",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Array]] - list of arrays in format [unit, role, cargoIndex, turretPath, personTurret]:\n* unit: [[Object]]\n* role: [[String]] - not always lowercase\n* cargoIndex: [[Number]]\n* turretPath: [[Array]]\n* personTurret: [[Boolean]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "gearIDCAmmoCount",
        "description": "Returns ammo count of assigned magazine.",
        "introduced_version": null,
        "syntax": "[[gearIDCAmmoCount]] idc",
        "parameters": [
            {
                "name": "idc",
                "description": "idc of control type CT_ITEMSLOT 103",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "gearSlotAmmoCount",
        "description": "Returns ammo count of assigned magazine.",
        "introduced_version": null,
        "syntax": "[[gearSlotAmmoCount]] control",
        "parameters": [
            {
                "name": "control",
                "description": "CT_ITEMSLOT 103",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "gearSlotData",
        "description": "Returns gear slot item name.",
        "introduced_version": null,
        "syntax": "'''gearSlotData''' control",
        "parameters": [
            {
                "name": "control",
                "description": "CT_ITEMSLOT 103",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "get3DENActionState",
        "description": "Returns state of given action in the [[Eden Editor]].\n<br><br>\nSee the [[Eden_Editor:_Actions|list of all actions]].",
        "introduced_version": null,
        "syntax": "'''get3DENActionState''' action",
        "parameters": [
            {
                "name": "action",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "get3DENAttribute",
        "description": "Returns the value of the given entity's [[Eden_Editor:_Entity_Attributes|attribute]] in [[Eden Editor]].\n<br><br>\nAn attribute is identified by its <tt>property</tt> (<tt>data</tt> when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see [[Eden_Editor:_Setting_Attributes#Attributes|Setting Attributes]].",
        "introduced_version": null,
        "syntax": "entity '''get3DENAttribute''' attribute",
        "parameters": [
            {
                "name": "attribute",
                "description": "attribute property",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] with [[Anything]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "get3DENCamera",
        "description": "Returns the camera [[Object]] used by the [[Eden Editor]].",
        "introduced_version": null,
        "syntax": "'''get3DENCamera'''",
        "parameters": [],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "get3DENConnections",
        "description": "Return all [[Eden Editor: Connecting|connections]] currently present on an entity.",
        "introduced_version": null,
        "syntax": "'''get3DENConnections''' entity",
        "parameters": [],
        "returns": {
            "description": "[[Array]] in format:\n<code>[[type1,to1], [type2, to2], ..., [typeN, toN]]</code>\n* type: [[String]] - connection class from ''Cfg3DEN >> Connections''\n* to: [[Eden Entity]] to which the connection leads to",
            "sqf_type": "Array"
        }
    },
    {
        "name": "get3DENEntity",
        "description": "Returns [[Eden Entity]] based on its [[Eden ID]]. If the ID points to a layer or a comment, the ID will be returned instead.",
        "introduced_version": null,
        "syntax": "'''get3DENEntity''' id",
        "parameters": [
            {
                "name": "id",
                "description": "[[Eden ID]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Eden Entity]] (when the target is [[Eden Entity]]) or [[Number]] (when the target is a layer or a comment)",
            "sqf_type": "Eden"
        }
    },
    {
        "name": "get3DENEntityID",
        "description": "Returns unique index of an [[Eden Entity]]. This number remains the same even after saving and loading the scenario.",
        "introduced_version": null,
        "syntax": "'''get3DENEntityID''' entity",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - [[Eden ID]] If ID is not available, -1 is returned",
            "sqf_type": "Number"
        }
    },
    {
        "name": "get3DENGrid",
        "description": "Returns the grid increment for the given transformation type.<br>\nTransformation types:\n* Rotation - \"r\"\n* Translation - \"t\"\n* Scale - \"s\"",
        "introduced_version": null,
        "syntax": "'''get3DENGrid''' type",
        "parameters": [
            {
                "name": "type",
                "description": "name of transformation",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "get3DENIconsVisible",
        "description": "Get visibility state of [[Eden Editor]] icons.",
        "introduced_version": null,
        "syntax": "'''get3DENIconsVisible'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] in format [showMap, showScene]\n* showScene: [[Boolean]] - visibility in the scene\n* showMap : [[Boolean]] - visibility in the map",
            "sqf_type": "Array"
        }
    },
    {
        "name": "get3DENLayerEntities",
        "description": "Return all entities and sub-layer in [[Eden Entity]] layer.",
        "introduced_version": null,
        "syntax": "'''get3DENLayerEntities''' layerID",
        "parameters": [
            {
                "name": "layerID",
                "description": "layer ID as returned by [[add3DENLayer]] command",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Eden Entity|Eden Entities]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "get3DENLinesVisible",
        "description": "Get visibility state of [[Eden Editor]] lines.",
        "introduced_version": null,
        "syntax": "'''get3DENLinesVisible'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] in format [showMap, showScene]\n* showScene: [[Boolean]] - visibility in the scene\n* showMap : [[Boolean]] - visibility in the map",
            "sqf_type": "Array"
        }
    },
    {
        "name": "get3DENMissionAttribute",
        "description": "Return value of [[Eden_Editor:_Scenario_Atttributes|scenario attribute]]. For a list of all available mission attributes see [[Eden_Editor:_Setting_Attributes#Scenario|Mission Attributes]].",
        "introduced_version": null,
        "syntax": "section '''get3DENMissionAttribute''' class",
        "parameters": [
            {
                "name": "section",
                "description": "attribute section",
                "sqf_type": "String"
            },
            {
                "name": "class",
                "description": "attribute name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Anything]]",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "get3DENMouseOver",
        "description": "Returns the [[Eden Entity]] the mouse is hovering over in [[Eden Editor]].",
        "introduced_version": null,
        "syntax": "'''get3DENMouseOver'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] in format: [type,[[Eden Entity]]], where type can be: \"Object\", \"Group\", \"Trigger\", \"Logic\", \"Waypoint\" or \"Marker\"",
            "sqf_type": "Array"
        }
    },
    {
        "name": "get3DENSelected",
        "description": "Returns an array of all selected [[Eden Entity|Eden Editor Entities]] of the given type, or, if empty string <tt>\"\"</tt> is used, an array of 6 arrays in the following format: <br><tt>[[/*objects...*/],[/*groups...*/],[/*triggers...*/],[/*logics...*/],[/*waypoints...*/],[/*markers...*/]]</tt><br> Layers and comments are not included in the all types array return. In case a wrong type is used the command will return <tt>[[],[],[],[],[],[]]</tt> and an error message is displayed.",
        "introduced_version": null,
        "syntax": "'''get3DENSelected''' type",
        "parameters": [],
        "returns": {
            "description": "[[Array of Eden Entities]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getAimingCoef",
        "description": "Get current aiming coefficient (higher ~ less precise, default is 1)",
        "introduced_version": null,
        "syntax": "[[getAimingCoef]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getAllEnvSoundControllers",
        "description": "Returns an array containing the names and values of environmental variables that can be used in simple expressions when configuring sounds.",
        "introduced_version": null,
        "syntax": "'''getAllEnvSoundControllers''' position",
        "parameters": [
            {
                "name": "position",
                "description": ".",
                "sqf_type": "Position"
            }
        ],
        "returns": {
            "description": "[[Array]] - [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getAllHitPointsDamage",
        "description": "Returns 3 arrays for easy cross reference: 1st - array of hit point names, 2nd - array of hit selection names, 3rd - array of damage values. All values in all arrays are ordered accordingly to hit part index for convenience and for use in [[setHitIndex]] and [[getHitIndex]]. Levels of damage are:\n* 0: no damage\n* 1: full damage",
        "introduced_version": null,
        "syntax": "'''getAllHitPointsDamage''' entity",
        "parameters": [
            {
                "name": "entity",
                "description": "object to be queried",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [] if entity is null or has no shape, otherwise [hitpointsNamesArray, selectionsNamesArray, damageValuesArray]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getAllOwnedMines",
        "description": "Gets all mine objects this unit has ownership over.",
        "introduced_version": null,
        "syntax": "[[getAllOwnedMines]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of mine object",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getAllSoundControllers",
        "description": "Returns an array containing names and values of the sound controllers that can be used in simple expressions when configuring sounds.",
        "introduced_version": null,
        "syntax": "'''getAllSoundControllers''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "must be a vehicle (does not work on soldiers)",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getAmmoCargo",
        "description": "Returns the amount (1 is full) of ammo resources in the cargo space of a rearm vehicle. <br><br>",
        "introduced_version": null,
        "syntax": "'''getAmmoCargo''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - ammo cargo value, -1 if ammo cargo is not supported, 0 if the vehicle is ![[alive]] or [[isNull]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getAnimAimPrecision",
        "description": "Returns aim precision for current animation",
        "introduced_version": null,
        "syntax": "'''getAnimAimPrecision''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getAnimSpeedCoef",
        "description": "Get coefficient for animation speed.",
        "introduced_version": null,
        "syntax": "'''getAnimSpeedCoef''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getArray",
        "description": "Extract array from config entry.",
        "introduced_version": null,
        "syntax": "[[Array]]",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getArtilleryAmmo",
        "description": "Get list of all available magazines of artillery units on the list. Command returns only unique magazine types and doesn't contain any information about which unit has which magazine.",
        "introduced_version": null,
        "syntax": "'''getArtilleryAmmo''' [unit1, unit2, unit3....]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getArtilleryComputerSettings",
        "description": "Returns settings from artillery computer currently opened by player.",
        "introduced_version": null,
        "syntax": "'''getArtilleryComputerSettings'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getArtilleryETA",
        "description": "Returns ETA to the target in seconds for given artillery unit based on target position and used magazine, -1 if target can't be hit.",
        "introduced_version": null,
        "syntax": "unit '''getArtilleryETA''' [targetPosition, magazineType]",
        "parameters": [
            {
                "name": "unit",
                "description": "artillery unit",
                "sqf_type": "Object"
            },
            {
                "name": "targetPosition",
                "description": "position of the target",
                "sqf_type": "Position"
            },
            {
                "name": "magazineType",
                "description": "type of magazine used",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getAssetDLCInfo",
        "description": "Returns DLC information about given object or model.",
        "introduced_version": null,
        "syntax": "[[getAssetDLCInfo]] asset",
        "parameters": [
            {
                "name": "asset",
                "description": "or [[String]] - object reference or path to the model",
                "sqf_type": "Object"
            },
            {
                "name": "class",
                "description": "class name of the asset",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "getAssignedCuratorLogic",
        "description": "Returns curator logic to which given player has access.",
        "introduced_version": null,
        "syntax": "'''getAssignedCuratorLogic''' player",
        "parameters": [
            {
                "name": "player",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "getAssignedCuratorUnit",
        "description": "Returns unit assigned to curator logic.",
        "introduced_version": null,
        "syntax": "'''getAssignedCuratorUnit''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "getAudioOptionVolumes",
        "description": "Returns profile audio volumes in format [effects, music, radio, von].",
        "introduced_version": null,
        "syntax": "[[getAudioOptionVolumes]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - [effects, music, radio, von]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getBackpackCargo",
        "description": "Returns all backpack types and count from the cargo space.",
        "introduced_version": null,
        "syntax": "[[getBackpackCargo]] object",
        "parameters": [
            {
                "name": "object",
                "description": "object to check",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of Arrays - Format <tt>[[\"5BackpacksType1\", \"10BackpacksType2\"], [5, 10]]</tt>",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getBleedingRemaining",
        "description": "Returns how many seconds injured unit will continue leaving blood trail. If unit damage is < 0.1, the return value is 0 and unit doesn't leave any blood trail. Use [[setBleedingRemaining]] to set different remaining time.",
        "introduced_version": null,
        "syntax": "'''getBleedingRemaining''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getBurningValue",
        "description": "Returns how much the unit is exposed to fire damage.",
        "introduced_version": null,
        "syntax": "[[getBurningValue]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "getCalculatePlayerVisibilityByFriendly",
        "description": "Returns [[true]] if visibility of [[player]] by friendly units is calculated.",
        "introduced_version": null,
        "syntax": "'''getCalculatePlayerVisibilityByFriendly'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] - [[True]] visibility is calculated, [[false]] if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "getCameraViewDirection",
        "description": "Returns the direction unit is looking in render time scope. While for AI the origin for the view direction vector can be taken from <tt>[[eyePos]] unit</tt>, for human player the origin should be taken from player camera position <tt>[[positionCameraToWorld]] [0,0,0]</tt>",
        "introduced_version": null,
        "syntax": "'''getCameraViewDirection''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - 3D Vector",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getCargoIndex",
        "description": "Returns index of the unit in cargo. 0,1,2... or -1 if not in cargo.",
        "introduced_version": null,
        "syntax": "vehicle '''getCargoIndex''' unit",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getCenterOfMass",
        "description": "Returns center of mass of an object.",
        "introduced_version": null,
        "syntax": "'''getCenterOfMass''' object",
        "parameters": [
            {
                "name": "object",
                "description": "PhysX object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [x,y,z] offset relative to the model centre",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getClientState",
        "description": "Returns client state in network game. Works on both, client and dedicated server. The following states are possible:\n\n{",
        "introduced_version": null,
        "syntax": "[[getClientState]]",
        "parameters": [],
        "returns": {
            "description": "[[String]] - Client state (see table above)",
            "sqf_type": "String"
        }
    },
    {
        "name": "getClientStateNumber",
        "description": "Returns client state in network game. Works on both, client and dedicated server. The following states are possible:\n\n{",
        "introduced_version": null,
        "syntax": "[[getClientStateNumber]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - Client state (see table above)",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getCompatiblePylonMagazines",
        "description": "Get array of compatible pylon magazines",
        "introduced_version": null,
        "syntax": "vehicle '''getCompatiblePylonMagazines''' pylon\n\nor\n\nvehicleClass '''getCompatiblePylonMagazines''' pylon",
        "parameters": [
            {
                "name": "vehicle",
                "description": "aircraft object",
                "sqf_type": "Object"
            },
            {
                "name": "pylon",
                "description": "pylon id or [[String]] - pylon class name from <tt>TransportPylonsComponent &gt;&gt; pylons</tt> class (see Example 4). 0 or \"\" to return all compatible magazines from all pylons",
                "sqf_type": "Number"
            },
            {
                "name": "vehicleClass",
                "description": "aircraft config class",
                "sqf_type": "String"
            },
            {
                "name": "pylon",
                "description": "pylon id or [[String]] - pylon class name from",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "",
            "sqf_type": null
        }
    },
    {
        "name": "getConnectedUAV",
        "description": "Returns UAV if unit has connection to some UAV.",
        "introduced_version": null,
        "syntax": "[[getConnectedUAV]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - the UAV. [[objNull]] if no UAV is connected.",
            "sqf_type": "Object"
        }
    },
    {
        "name": "getContainerMaxLoad",
        "description": "Returns max load value of given container. Currently works only with uniform, vest and backpack classes.",
        "introduced_version": null,
        "syntax": "'''getContainerMaxLoad''' containerClass",
        "parameters": [
            {
                "name": "containerClass",
                "description": "uniform, vest or backpack class",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - load value, -1 if not available.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getCursorObjectParams",
        "description": "Returns object and named selections under cursor and distance to object's surface (to the point cursor points at). If object surface is further away than 50 meters, selections are always an empty array and distance is 1e10 (10^10).",
        "introduced_version": null,
        "syntax": "'''getCursorObjectParams'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - [cursorObject, selections, distance]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getCustomAimCoef",
        "description": "Returns aimPrecision from animation state with custom value that will directly affects weapon sway size and speed.",
        "introduced_version": null,
        "syntax": "'''getCustomAimCoef''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getCustomSoundController",
        "description": "Returns current value set to the controller (see [[setCustomSoundController]])",
        "introduced_version": null,
        "syntax": "'''getCustomSoundController''' [vehicle, controller]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "must be a transport type vehicle (doesn't work on characters or buildings)",
                "sqf_type": "Object"
            },
            {
                "name": "controller",
                "description": "name of custom sound controller. Need to be full string like i.e. \"CustomSoundController1\". Currently you can pick from \"CustomSoundController1\" to \"CustomSoundController32\"",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getCustomSoundControllerCount",
        "description": "Returns current number of custom sound controllers supported by the engine for the given vehicle (currently 32)",
        "introduced_version": null,
        "syntax": "'''getCustomSoundControllerCount''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "must be a transport type vehicle (doesn't work on characters or buildings)",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - number of custom controllers",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getDLCAssetsUsage",
        "description": "Returns an array of the DLC usage times.",
        "introduced_version": null,
        "syntax": "[[getDLCAssetsUsage]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - array of DLC usage informations, containing DLC items in format:<br>",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getDLCAssetsUsageByName",
        "description": "Returns an array with the session and global time the asset has been used.",
        "introduced_version": null,
        "syntax": "[[getDLCAssetsUsageByName]] assetName",
        "parameters": [
            {
                "name": "assetName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - array in format: [sessionTime, totalTime].",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getDLCUsageTime",
        "description": "Returns total time the assets of the given DLC have been used. See [[Arma 3 DLCs Overview]] for a list of DLCs and ids.",
        "introduced_version": null,
        "syntax": "[[getDLCUsageTime]] appId",
        "parameters": [
            {
                "name": "appId",
                "description": "DLC's Steam appId",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "getDLCs",
        "description": "Returns array of appIDs of DLCs.",
        "introduced_version": null,
        "syntax": "[[getDLCs]] filter",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - array of DLC numbers (see above)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getDammage",
        "description": "Returns the object damage in the range from 0 to 1. Alias of [[damage]].",
        "introduced_version": null,
        "syntax": "[[getDammage]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getDescription",
        "description": "Returns the string representation of unit as an four slots array.",
        "introduced_version": null,
        "syntax": "[[getDescription]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "getDir",
        "description": "Returns the object heading in the range 0..360.",
        "introduced_version": null,
        "syntax": "[[getDir]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pos1",
                "description": ", [[Position2D]] or [[Position3D]] - from where",
                "sqf_type": "Object"
            },
            {
                "name": "pos2",
                "description": ", [[Position2D]] or [[Position3D]] - to where",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getDirVisual",
        "description": "Returns object's heading in the range from 0 to 360 in render time scope.",
        "introduced_version": null,
        "syntax": "'''getDirVisual''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getDiverState",
        "description": "Returns [[true]] when object is in diver state i.e. when unit would put diving [[goggles]] on. <br><br>",
        "introduced_version": null,
        "syntax": "[[getDiverState]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] when diving [[goggles]] are visible",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "getEditorCamera",
        "description": "Fetches a reference to the mission editor camera.",
        "introduced_version": null,
        "syntax": "'''getEditorCamera''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "getEditorMode",
        "description": "Returns the current mode of the editor.",
        "introduced_version": null,
        "syntax": "'''getEditorMode''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "getEditorObjectScope",
        "description": "Returns the editor object scope of the specified editor object.",
        "introduced_version": null,
        "syntax": "map '''getEditorObjectScope''' object",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "object",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "getElevationOffset",
        "description": "Returns the map elevation offset from [map]/config.cpp.\n\nReturns 0 if there's no elevationOffset defined in the config of the current world.",
        "introduced_version": null,
        "syntax": "'''getElevationOffset'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - elevation offset of the map",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getEnvSoundController",
        "description": "Returns value of the specified controller.",
        "introduced_version": null,
        "syntax": "position '''getEnvSoundController''' controller",
        "parameters": [
            {
                "name": "position",
                "description": "",
                "sqf_type": "Position"
            },
            {
                "name": "controller",
                "description": "name of environmental variable like \"trees\" or \"houses\"",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getFSMVariable",
        "description": "Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the execFSM command.",
        "introduced_version": null,
        "syntax": "FSMhandle '''getFSMVariable''' name",
        "parameters": [
            {
                "name": "FSMhandle",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "name of the variable",
                "sqf_type": "String"
            },
            {
                "name": "FSMhandle",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "name of the variable",
                "sqf_type": "String"
            },
            {
                "name": "defaultValue",
                "description": "value to return if variable is [[nil]]",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Anything]]",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "getFatigue",
        "description": "Returns fatigue of given unit.",
        "introduced_version": null,
        "syntax": "'''getFatigue''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getFieldManualStartPage",
        "description": "Returns array of the starting topic and hint the given field manual should display.",
        "introduced_version": null,
        "syntax": "[[getFieldManualStartPage]] display",
        "parameters": [
            {
                "name": "display",
                "description": "",
                "sqf_type": "Display"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "getForcedFlagTexture",
        "description": "A getter for [[forceFlagTexture]]. Forced texture is different from your normal flag texture, which can be retrieved with [[flagTexture]]",
        "introduced_version": null,
        "syntax": "[[getForcedFlagTexture]] object",
        "parameters": [
            {
                "name": "object",
                "description": "vehicle, unit of flag pole",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "getFriend",
        "description": "Returns if sides are friendly or hostile. For a value smaller than 0.6 it results in being enemy, otherwise it is friendly. See also [[Side relations]].",
        "introduced_version": null,
        "syntax": "side1 '''getFriend''' side2",
        "parameters": [
            {
                "name": "side1",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "side2",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Number]] - Decimal value between 0.0 to 1.0",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getFuelCargo",
        "description": "Returns the fuel amount (1 is full) in the cargo space of a refueling vehicle.",
        "introduced_version": null,
        "syntax": "'''getFuelCargo''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - fuel cargo value, -1 if fuel cargo is not supported, 0 if the vehicle is ![[alive]] or [[isNull]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getGraphValues",
        "description": "Generate graph y - coordinates of all input values within specific x and y range.",
        "introduced_version": null,
        "syntax": "[[getGraphValues]]",
        "parameters": [
            {
                "name": "graphMinX",
                "description": "minimum x-axis value",
                "sqf_type": "Number"
            },
            {
                "name": "graphMaxX",
                "description": "maximum x-axis value",
                "sqf_type": "Number"
            },
            {
                "name": "graphMinY",
                "description": "minimum y-axis value",
                "sqf_type": "Number"
            },
            {
                "name": "graphMaxY",
                "description": "maximum y-axis value",
                "sqf_type": "Number"
            },
            {
                "name": "valueCount",
                "description": "number of values the returned array should have",
                "sqf_type": "Number"
            },
            {
                "name": "randomOffset",
                "description": "random range for returned y value",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Array]] of [[Number]]s - to format [arrayOfYvalues, arrayOfXvalues]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getGroupIcon",
        "description": "Get group icon properties.",
        "introduced_version": null,
        "syntax": "group '''getGroupIcon''' ID",
        "parameters": [
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            },
            {
                "name": "ID",
                "description": "-",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getGroupIconParams",
        "description": "Returns group icons params used for command bar drawing such as color, text, scale, visibility, waypoint visibility, waypoint color.",
        "introduced_version": null,
        "syntax": "'''getGroupIconParams''' group",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Array]] in format [color, text, scale, visibility, WPvisibility WPcolor], where:\n* color: [[Array]] - icon color in format [r,g,b,a]\n* text: [[String]] - icon text\n* scale: [[Number]] - icon scale\n* visibility: [[Boolean]] - icon visibility\n* WPvisibility: [[Boolean]] - waypoint visibility\n* WPcolor: [[Array]] - waypoint color in format [r,g,b,a]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getGroupIcons",
        "description": "Returns all group icons. [id,icon,[offsetx,offsety],[..],..]",
        "introduced_version": null,
        "syntax": "'''getGroupIcons''' group",
        "parameters": [
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getHideFrom",
        "description": "Returns the [[Position]] where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.",
        "introduced_version": null,
        "syntax": "object '''getHideFrom''' enemy",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "enemy",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [[ASLToATL]] representation of the believed [[aimPos]] of the enemy object",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getHit",
        "description": "Returns selection damage. Same as [[getHitPointDamage]], only the argument is selection part instead of hit point.",
        "introduced_version": null,
        "syntax": "vehicle [[getHit]] selection",
        "parameters": [
            {
                "name": "selection",
                "description": "selection part name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] (prior to Arma 3 v1.93.145625, [[Nothing]] was return when invalid ''selection'' was given)",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getHitIndex",
        "description": "Return current level of damage for a specific Hit Point (specified by its hit part index). All hit points can be obtained with [[getAllHitPointsDamage]] command.\n* 0: no damage\n* 1: full damage",
        "introduced_version": null,
        "syntax": "vehicle '''getHitIndex''' hitPartIndex",
        "parameters": [
            {
                "name": "hitPartIndex",
                "description": "hit part index of the Hit Point",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] (or, prior to Arma 3 v1.93.145625, [[Nothing]] when invalid input is given)",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getHitPointDamage",
        "description": "Return current level of damage for a specific Hit Point (specified by its config class). If you need to get damage of a selection instead of hit point, use [[getHit]].\n* 0: no damage\n* 1: full damage",
        "introduced_version": null,
        "syntax": "vehicle '''getHitPointDamage''' hitPointName",
        "parameters": [
            {
                "name": "hitPointName",
                "description": "name of the Hit Point class",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] (or, prior to Arma 3 v1.93.145625, [[Nothing]] when invalid input is given)",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getItemCargo",
        "description": "Returns all items names and count from ammo box (or any general weapon holder container).",
        "introduced_version": null,
        "syntax": "'''getItemCargo''' box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of Arrays - Format: [[\"5ItemsType1\",\"10ItemsType2\"],[5,10]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getMagazineCargo",
        "description": "Returns all magazines types and count from the cargo space",
        "introduced_version": null,
        "syntax": "[[getMagazineCargo]] object",
        "parameters": [
            {
                "name": "object",
                "description": "Vehicle or ammo box",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of arrays. [[\"5MagsType1\",\"10MagsType2\"],[5,10]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getMarkerColor",
        "description": "Returns marker color for given marker.",
        "introduced_version": null,
        "syntax": "[[getMarkerColor]] markerName",
        "parameters": [
            {
                "name": "markerName",
                "description": "marker name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "getMarkerPos",
        "description": "Returns marker position. See also [[setMarkerPos]].",
        "introduced_version": null,
        "syntax": "[[getMarkerPos]] markerName",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [x,y,0]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getMarkerSize",
        "description": "Returns the size of the given marker. A getter for [[setMarkerSize]] and an alias of [[markerSize]].",
        "introduced_version": null,
        "syntax": "'''getMarkerSize''' markerName",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - in format [a-axis, b-axis], where:\n* a-axis: [[Number]] - 1/2 width of marker\n* b-axis: [[Number]] - 1/2 height of marker",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getMarkerType",
        "description": "Returns the type of a given marker. See [[cfgMarkers]] for a list of standard markers.",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]. See [[cfgMarkers]].\n\nIf the marker does not exist, the returned type is an empty string, ie \"\"",
            "sqf_type": "String"
        }
    },
    {
        "name": "getMass",
        "description": "Returns mass of a PhysX object.",
        "introduced_version": null,
        "syntax": "'''getMass''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getMissionConfig",
        "description": "Returns [[Config]] entry for the given scenario attribute from the 1st tier. The attribute can be config class or config property. If it is defined in multiple places, the command checks them in the following order:\n# External ''[[Description.ext]]'' file\n# [[Eden_Editor:_Scenario_Atttributes|Eden Editor]] scenario attribute\nSo if attribute exists in both places, attribute from [[description.ext]] is used. Previously, scenario attributes were extracted from ''Description.ext'' using [[missionConfigFile]]. That still works, but it ignores attributes set directly in the editor and it should not be used anymore.",
        "introduced_version": null,
        "syntax": "'''getMissionConfig''' attribute",
        "parameters": [
            {
                "name": "attribute",
                "description": "attribute name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Config]]",
            "sqf_type": "Config"
        }
    },
    {
        "name": "getMissionConfigValue",
        "description": "Returns value of the given scenario attribute from the 1st tier. Since only config properties have values, the attribute should be config property. If it is not found or config class is given, the return is [[nil]]. If the attribute defined in multiple places, the command checks them in the following order:\n# External ''[[Description.ext]]'' file\n# [[Eden_Editor:_Scenario_Atttributes|Eden Editor]] scenario attribute\nSo if attribute exists in both places, attribute from [[description.ext]] is used. Previously, scenario attributes were extracted from ''Description.ext'' using [[missionConfigFile]]. That still works, but it ignores attributes set directly in the editor and it should not be used anymore.<br><br>",
        "introduced_version": null,
        "syntax": "'''getMissionConfigValue''' attribute",
        "parameters": [
            {
                "name": "attribute",
                "description": "attribute name",
                "sqf_type": "String"
            },
            {
                "name": "attribute",
                "description": "attribute name",
                "sqf_type": "String"
            },
            {
                "name": "defaultValue",
                "description": "value used when the attribute is undefined",
                "sqf_type": "Any"
            }
        ],
        "returns": {
            "description": "[[Number]], [[String]] or [[Array]], depending on the attribute value type. [[nil|Nil]] when the attribute is undefined.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getMissionDLCs",
        "description": "Returns list of DLCs that are used in the mission. List is created only from units listed in mission.sqm and doesn't detect units created by scripts!",
        "introduced_version": null,
        "syntax": "[[getMissionDLCs]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - list of DLCs detected for the mission",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getMissionLayerEntities",
        "description": "Returns all entities within specific [[Eden Editor]] layer. To be used when the scenario is running, not in the editor workspace.\n\nUseful for disabling / enabling whole parts of the scenario which you add to specific layer while editing.",
        "introduced_version": null,
        "syntax": "[[getMissionLayerEntities]] layerName",
        "parameters": [
            {
                "name": "layerName",
                "description": "Layer name in the editor. If multiple layers with the same name are present in the scenario, the first found one is used.",
                "sqf_type": "String"
            },
            {
                "name": "layerID",
                "description": "Layer ID in the editor.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[get3DENLayerEntities]]",
            "sqf_type": "get3DENLayerEntities"
        }
    },
    {
        "name": "getMissionLayers",
        "description": "Returns a list of all layers created in [[Eden Editor]]. Designed to be used during a scenario. Default layers (BLUFOR, OPFOR...) are not returned.",
        "introduced_version": null,
        "syntax": "[[getMissionLayers]]",
        "parameters": [],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "getMissionPath",
        "description": "Returns mission root plus the filename in a form of filepath to be used with commands requiring absolute path such as [[playSound3D]], [[drawIcon3D]], [[createSimpleObject]], etc. Any leading \"\\\" in the filename will be stripped as the mission root includes one already.",
        "introduced_version": null,
        "syntax": "[[getMissionPath]] filename",
        "parameters": [
            {
                "name": "filename",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]] - absolute path",
            "sqf_type": "String"
        }
    },
    {
        "name": "getModelInfo",
        "description": "Returns object's model info in format [modelName, modelPath, hasSkeleton]. Model path is suitable for use with [[createSimpleObject]] command.",
        "introduced_version": null,
        "syntax": "'''getModelInfo''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [modelName, modelPath, hasSkeleton]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getMousePosition",
        "description": "Returns mouse position in UI coordinates.",
        "introduced_version": null,
        "syntax": "'''getMousePosition'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - position in format [x, y], where x and y are UI coordinates",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getMusicPlayedTime",
        "description": "Returns elapsed time in seconds for currently playing music track.",
        "introduced_version": null,
        "syntax": "[[getMusicPlayedTime]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getNumber",
        "description": "Extract number from config entry.",
        "introduced_version": null,
        "syntax": "'''getNumber''' config",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getObjectArgument",
        "description": "Return name of object argument in mission editor.",
        "introduced_version": null,
        "syntax": "map '''getObjectArgument''' [object, argument]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "argument",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "getObjectChildren",
        "description": "Return a list of all the children of the specified object.",
        "introduced_version": null,
        "syntax": "map '''getObjectChildren''' object",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "object",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getObjectDLC",
        "description": "Returns appID of the DLC the object belongs to or [[nil]] if object is vanilla.",
        "introduced_version": null,
        "syntax": "'''getObjectDLC''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] (or [[Nothing]] if vanilla item)",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getObjectFOV",
        "description": "Returns Field of View of the given object in [[rad]]ians. Static objects return default value, which is 1. FOV of [[objNull]] is 0. Object FOV is indirectly connected with optics magnification or player view zoom, the narrower the angle the greater the zoom.<br><br>",
        "introduced_version": null,
        "syntax": "[[getObjectFOV]] object",
        "parameters": [
            {
                "name": "object",
                "description": "for units it queries unit weapon optics/zoom, for vehicles - vehicle optics/zoom",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - FOV in [[rad]]ians",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getObjectMaterials",
        "description": "Gets all custom materials associated with the object.",
        "introduced_version": null,
        "syntax": "'''getObjectMaterials''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s - array of materials",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getObjectProxy",
        "description": "Return the proxy object associated with the given editor object.",
        "introduced_version": null,
        "syntax": "map '''getObjectProxy''' object",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "object",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "getObjectTextures",
        "description": "Gets all custom textures (hiddenSelectionsTextures) associated with the object. <br> Doesn't work on [[Arma 3 Simple Objects|simple objects]]",
        "introduced_version": null,
        "syntax": "'''getObjectTextures''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s - array of textures",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getObjectType",
        "description": "Returns object type as a number:\n* 1 - Primary - Normal object placed in Visitor, part of landscape\n* 2 - Network - Road placed in Visitor, part of landscape\n* 4 - Temporary - Temporary object (like tracks)\n* 8 - TypeVehicle - Some entity added by game\n* 16 - TypeTempVehicle - Temporary entity\n* 32 - LandDecal - Land decal",
        "introduced_version": null,
        "syntax": "'''getObjectType''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - Object type",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getObjectViewDistance",
        "description": "Gets the values of rendering distances of objects and shadows.",
        "introduced_version": null,
        "syntax": "'''getObjectViewDistance'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - in format [objectDistance, shadowDistance]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getOxygenRemaining",
        "description": "Returns amount of remaining oxygen.",
        "introduced_version": null,
        "syntax": "'''getOxygenRemaining''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getPersonUsedDLCs",
        "description": "Returns a list of all DLCs objects the unit is currently using. For example if a unit is inside a vehicle from DLC, it will return the code of that DLC.",
        "introduced_version": null,
        "syntax": "[[getPersonUsedDLCs]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[getDLCs]], [[getObjectDLC]], [[getMissionDLCs]], [[getDLCAssetsUsageByName]], [[getDLCAssetsUsage]], [[getAssetDLCInfo]]",
            "sqf_type": "getDLCs"
        }
    },
    {
        "name": "getPilotCameraDirection",
        "description": "Returns model space vector of the object airplane or helicopter [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]] .",
        "introduced_version": null,
        "syntax": "'''getPilotCameraDirection''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [x,y,z] - format [[Vector3D]] relative to the model centre (In a similar fashion to [[PositionRelative]]). Returns [0,0,0] if object has no [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]].",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPilotCameraPosition",
        "description": "Returns model space coordinates of the object airplane or helicopter [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]] .",
        "introduced_version": null,
        "syntax": "'''getPilotCameraPosition''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [x,y,z] offset relative to the model centre, format [[PositionRelative]]. Returns [0,0,0] if object has no [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]].",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPilotCameraRotation",
        "description": "Returns rotation (relative to the centered camera position) of the object airplane or helicopter [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]] .",
        "introduced_version": null,
        "syntax": "'''getPilotCameraRotation''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [x,y] - format [yaw (turn), pitch (elevation)]. Positive values are left yaw and down pitch from the center. Returns [0,0] when camera is centered but also if object has no [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]].",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPilotCameraTarget",
        "description": "Returns the target of the object airplane or helicopter [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]] tracking.",
        "introduced_version": null,
        "syntax": "'''getPilotCameraTarget''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [isTracking, targetPosition, targetObject]; returns [false,[0,0,0],<NULL-object>] if camera is not in a tracking mode or if object has no [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]]. \n* isTracking: [[Boolean]] - returns whether the camera is in a tracking mode\n* targetPosition: [[Array]] - format [[PositionASL]], returns the position of the tracked area or object\n* targetObject: [[Object]] - returns the tracked object, [[objNull]] if camera is only tracking an area",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPlateNumber",
        "description": "Get the license plates from any vehicle which has plates configured.",
        "introduced_version": null,
        "syntax": "'''getPlateNumber''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "getPlayerChannel",
        "description": "Returns channel number for given player, '''provided that player is speaking''', otherwise -1. Having mic on is not enough, player has to make a sound. There are several limitations to this command:\n* It does not work on dedicated server, the return is always -1, only client can detect other client talking.\n* Prior to Arma 3 v2.01.146856 did not detect when someone talked on direct chat at all anywhere. \n* The client on which command is executed has to able to receive transmission before the transmission channel can be detected. For example if a player is not in the same group as a speaker and the speaker speaks on Group Channel, the player cannot hear the speaker and therefore cannot detect what channel the speaker is on.\nIn short, this command mimics the speaking icon from the UI. Correspondence between channel and number:\n{",
        "introduced_version": null,
        "syntax": "[[getPlayerChannel]] player",
        "parameters": [
            {
                "name": "player",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - [[Channel IDs|channel ID]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getPlayerScores",
        "description": "* In MP: Returns the unit's table of scores (infantry kills, soft vehicle kills, armor kills, air kills, deaths, total score).\n* In SP: Empty array []",
        "introduced_version": null,
        "syntax": "'''getPlayerScores''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - the score of the given player in format [infantry kills, soft vehicle kills, armor kills, air kills, deaths, total score]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPlayerUID",
        "description": "Return a UniqueID of the given unit (player).",
        "introduced_version": null,
        "syntax": "[[getPlayerUID]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] \"_SP_AI_\" or \"_SP_PLAYER_\" in SP, \"\" or UID in MP.<br>\nThe unique ID may be up to 100 characters long and may contain numbers, uppercase letters and underscores.<br>\nThe value can be used to construct a valid variable name by appending to another valid variable name,<br>\ne.g",
            "sqf_type": "String"
        }
    },
    {
        "name": "getPlayerUIDOld",
        "description": "Returns the old UniqueID of Arma 2 OA of the given unit as string if it is player and empty value if it is AI. The uniqueID may be up to 100 characters long and may contain numbers, uppercase letters and underscores (the value can be used to construct a valid variable name by appending to another valid variable name).",
        "introduced_version": null,
        "syntax": "[[getPlayerUIDOld]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "getPos",
        "description": "Returns object or location position. If the argument is the object, the return value is in format [[PositionAGLS]]. Z value is height over the surface underneath.<br>\nThe alternative syntax gets the position given distance and heading away from provided object or position - the equivalent of [[BIS_fnc_relPos]].",
        "introduced_version": null,
        "syntax": "[[getPos]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "origin",
                "description": ", [[Position2D]] or [[Position3D]]",
                "sqf_type": "Object"
            },
            {
                "name": "distance",
                "description": "distance from position",
                "sqf_type": "Number"
            },
            {
                "name": "heading",
                "description": "in which compass direction",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionAGLS]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPosASL",
        "description": "Returns the object position height above sea level.",
        "introduced_version": null,
        "syntax": "[[Array]]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPosASLVisual",
        "description": "Returns an object's rendered [[PositionASL|3D position ASL]] (z value above sea level) in render time scope. Alias of [[visiblePositionASL]].",
        "introduced_version": null,
        "syntax": "'''getPosASLVisual''' object",
        "parameters": [
            {
                "name": "object",
                "description": ": - name of the object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPosASLW",
        "description": "Returns the object position height above sea surface (waves included).",
        "introduced_version": null,
        "syntax": "'''getPosASLW''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [[PositionASLW]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPosATL",
        "description": "Returns the position of an object relative to the terrain.",
        "introduced_version": null,
        "syntax": "'''getPosATL''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionATL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPosATLVisual",
        "description": "Returns an object's rendered [[PositionATL|3D position ATL]] (z value above ground) in render time scope.",
        "introduced_version": null,
        "syntax": "'''getPosATLVisual''' object",
        "parameters": [
            {
                "name": "object",
                "description": ": - name of the object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionATL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPosVisual",
        "description": "Returns an object's rendered [[Position|3D position]] (z value above sea when over sea, or above ground when over land) in render time scope. Alias of [[visiblePosition]].",
        "introduced_version": null,
        "syntax": "'''getPosVisual''' object",
        "parameters": [
            {
                "name": "object",
                "description": ": - name of the object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionAGLS]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPosWorld",
        "description": "Returns [[PositionWorld]], which is [[PositionASL]] of the model centre [0,0,0] of an object, rather than transformed [[boundingCenter]] or [[Oxygen_2_-_Manual#LandContact|LandContact]] vertices.",
        "introduced_version": null,
        "syntax": "'''getPosWorld''' object",
        "parameters": [
            {
                "name": "object",
                "description": ";",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionWorld]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPosWorldVisual",
        "description": "Returns render version of [[PositionWorld]], which is [[PositionASL]] of the model centre [0,0,0] of an object in render scope, rather than transformed [[boundingCenter]] or [[Oxygen_2_-_Manual#LandContact|LandContact]] vertices.",
        "introduced_version": null,
        "syntax": "[[getPosWorldVisual]] object",
        "parameters": [
            {
                "name": "object",
                "description": ";",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionWorld]] in render scope",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getPylonMagazines",
        "description": "Return array of magazines on pylons",
        "introduced_version": null,
        "syntax": "'''getPylonMagazines''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s (magazine classnames)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getRelDir",
        "description": "Returns direction, which is relative to object's current direction, from given object to another object or position in the range from 0 to 360, the equivalent of [[BIS_fnc_relativeDirTo]]. Taking the current [[direction]] of the object into account.",
        "introduced_version": null,
        "syntax": "object '''getRelDir''' position",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": ", [[Position2D]] or [[Position3D]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getRelPos",
        "description": "Returns position, which is given distance and relative direction away from original object.",
        "introduced_version": null,
        "syntax": "object '''getRelPos''' [distance, direction]",
        "parameters": [
            {
                "name": "object",
                "description": "object",
                "sqf_type": "Object"
            },
            {
                "name": "distance",
                "description": "distance from object",
                "sqf_type": "Number"
            },
            {
                "name": "direction",
                "description": "direction relative to object's current direction",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [x,y,z], where z is land surface in format [[PositionAGL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getRemoteSensorsDisabled",
        "description": "Get status of disabled raycasts for remote entities. See [[disableRemoteSensors]] for detailed description.",
        "introduced_version": null,
        "syntax": "[[getRemoteSensorsDisabled]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "getRepairCargo",
        "description": "Returns the amount (1 is full) of repair resources in the cargo space of a repair vehicle. <br><br>",
        "introduced_version": null,
        "syntax": "'''getRepairCargo''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - repair cargo value, -1 if repair cargo is not supported, 0 if the vehicle is ![[alive]] or [[isNull]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getResolution",
        "description": "Returns an array containing all information about current client screen resolution in format:<br>\n<tt>[screenW, screenH, viewPortW, viewPortH, aspectRatio, uiScale, fovTop, fovLeft, tripleHead]</tt><br>\nWhere:\n* <tt>screenW</tt>: [[Number]] - width of the screen in pixels\n* <tt>screenH</tt>: [[Number]] - height of the screen in pixels\n* <tt>viewPortW</tt>: [[Number]] - width of the '''4:3''' view port in pixels\n* <tt>viewPortH</tt>: [[Number]] - height of the '''4:3''' view port in pixels \n* <tt>aspectRatio</tt>: [[Number]] - screen aspect ratio\n* <tt>uiScale</tt>: [[Number]] - the scale of the UI, which affects view port size:\n: {",
        "introduced_version": null,
        "syntax": "[[getResolution]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - see the description",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getRoadInfo",
        "description": "Returns road info in format [mapType, width, isPedestrian, texture, textureEnd, material, begPos, endPos, isBridge]\n<br><br>",
        "introduced_version": null,
        "syntax": "[[getRoadInfo]] road",
        "parameters": [
            {
                "name": "road",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] in format [mapType, width, isPedestrian, texture, textureEnd, material, begPos, endPos, isBridge], where:\n* mapType: [[String]] - road segment type, could be <tt>\"ROAD\"</tt>, <tt>\"MAIN ROAD\"</tt>, <tt>\"TRACK\"</tt>, <tt>\"TRAIL\"</tt> (see [[nearestTerrainObjects]])\n* width: [[Number]] - road segment width\n* isPedestrian: [[Boolean]] - when [[true]] road is for pedestrian use only\n* texture: [[String]] - road segment surface texture\n* textureEnd: [[String]] - road segment surface texture\n* material: [[String]] - road segment surface material \n* begPos: [[PositionASL]] - start of the road segment\n* endPos: [[PositionASL]] - finish of the road segment\n* isBridge: [[Boolean]] - when [[true]] road segment is a bridge",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getRotorBrakeRTD",
        "description": "Returns if rotor break is on.",
        "introduced_version": null,
        "syntax": "[[getRotorBrakeRTD]] helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] - [[True]] if on, otherwise [[false]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "getShadowDistance",
        "description": "Gets the shadows rendering distance.",
        "introduced_version": null,
        "syntax": "'''getShadowDistance'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getShotParents",
        "description": "Returns shot information [[Array]] for the given projectile in format [vehicle, instigator], where vehicle is the vehicle the shot was fired from, and the instigator is the person who pulled the trigger. If shot was fired by a soldier on foot or in FFV position in vehicle, the soldier is returned for the vehicle.",
        "introduced_version": null,
        "syntax": "[[getShotParents]] projectile",
        "parameters": [
            {
                "name": "projectile",
                "description": "the actual projectile shot",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [vehicle, instigator]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getSlingLoad",
        "description": "Return object which is sling loaded by vehicle",
        "introduced_version": null,
        "syntax": "[[getSlingLoad]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - the sling loaded vehicle. [[objNull]] if nothing is sling loaded.",
            "sqf_type": "Object"
        }
    },
    {
        "name": "getSoundController",
        "description": "Returns value of the given sound controller.",
        "introduced_version": null,
        "syntax": "vehicle '''getSoundController''' controller",
        "parameters": [
            {
                "name": "vehicle",
                "description": "must be a vehicle (does not work on soldiers)",
                "sqf_type": "Object"
            },
            {
                "name": "controller",
                "description": "name of sound controller, for example \"rpm\" or \"thrust\".",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getSoundControllerResult",
        "description": "Returns the calculated value of [[simple expression]] defined in config. Config could be any config entry, even [[missionConfigFile | mission config]] entry. It is more important that the vehicle is a transport and not any object. If the expression contains sound controllers, the controller values will be taken from the given vehicle.",
        "introduced_version": null,
        "syntax": "vehicle '''getSoundControllerResult''' config",
        "parameters": [
            {
                "name": "vehicle",
                "description": "transport vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "config",
                "description": "path to config entry containing the expression",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getSpeed",
        "description": "Get the speed for the given speed mode.\n\nSpeedMode can be:\n*\"AUTO\"\n*\"SLOW\"\n*\"NORMAL\"\n*\"FAST\"",
        "introduced_version": null,
        "syntax": "object '''getSpeed''' speedMode",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "speedMode",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] (m/s)",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getStamina",
        "description": "Get current stamina (~ seconds until depletion)",
        "introduced_version": null,
        "syntax": "'''getStamina''' unit;",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getStatValue",
        "description": "Returns value of the given stat.<br>\nA list of possible StatNames can be found here: [[Arma 3 Stat Names]]",
        "introduced_version": null,
        "syntax": "[[getStatValue]] name",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] (can return [[Nothing]])",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getSubtitleOptions",
        "description": "Returns subtitles settings.",
        "introduced_version": null,
        "syntax": "[[getSubtitleOptions]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - Options in format [subtitles enabled, radio subtitles enabled]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getSuppression",
        "description": "Gets the suppression value for the given unit. Returns varying [[Number]] between 0 and 1, or -1 if suppression is disabled (<tt>[[disableAI]] \"SUPPRESSION\"</tt>) or the suppression value is not available. Suppression is not calculated for player entities and is always 0, unless it is set with [[setSuppression]]. In this case the return value is the set value. Before Arma 3 v1.91.145360 this command could return [[nil]].<br><br>",
        "introduced_version": null,
        "syntax": "'''getSuppression''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - from 0 to 1, or -1 if suppression is not available.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getTerrainGrid",
        "description": "A getter for [[setTerrainGrid]], returns the current terrain grid.",
        "introduced_version": null,
        "syntax": "'''getTerrainGrid'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - terrain grid value",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getTerrainHeightASL",
        "description": "Returns the terrain height above the sea for the given position.",
        "introduced_version": null,
        "syntax": "[[getTerrainHeightASL]] position",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getText",
        "description": "Extracts [[localize]]d text from config entry, if entry is subject to [[localize | localization]], otherwise returns text value. To obtain the translation key itself, see [[getTextRaw]].",
        "introduced_version": null,
        "syntax": "[[getText]] config",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[String]] - text value",
            "sqf_type": "String"
        }
    },
    {
        "name": "getTextWidth",
        "description": "Returns estimated width of the text based on font type and size. Similar to [[ctrlTextWidth]] but doesn't require a control and can be used to estimate text width for any control including buttons. Result does not include left and right margins (hardcoded at 0.008 each).<br/>\nAlways uses unicode (see [[forceUnicode]]).",
        "introduced_version": null,
        "syntax": "text [[getTextWidth]] [font, size]",
        "parameters": [
            {
                "name": "text",
                "description": "text string to measure",
                "sqf_type": "String"
            },
            {
                "name": "font",
                "description": "font type",
                "sqf_type": "String"
            },
            {
                "name": "size",
                "description": "font size",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getTotalDLCUsageTime",
        "description": "Returns total DLC usage time in this game session",
        "introduced_version": null,
        "syntax": "[[getTotalDLCUsageTime]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - time (in seconds?)",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getTrimOffsetRTD",
        "description": "Returns controls trim offset.",
        "introduced_version": null,
        "syntax": "'''getTrimOffsetRTD''' RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - Offsets in format [x,y,z]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getUnitLoadout",
        "description": "Returns a '''[[Unit Loadout Array]]''' with all assigned items, weapons, containers and their stored items. When [[String]] for class name is supplied, the command will search <tt>CfgVehicles</tt> for the given class in order to extract the loadout from config. If [[Config]] is given, it will search given config (including [[missionConfigFile | mission config]]) for the loadout information. In either case, the config should contain the following entries, which is standard for any unit class, for example:",
        "introduced_version": null,
        "syntax": "[[getUnitLoadout]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "fullMagazines",
                "description": "[[true]] to top up used magazines",
                "sqf_type": "Boolean"
            },
            {
                "name": "name",
                "description": "class name (see description)",
                "sqf_type": "String"
            },
            {
                "name": "config",
                "description": "config class (see description)",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "getUnitTrait",
        "description": "Gets the current value of a trait of the given unit.",
        "introduced_version": null,
        "syntax": "unit [[getUnitTrait]] skillName",
        "parameters": [
            {
                "name": "Unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "skillName",
                "description": "Name of the skill",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "* [[Boolean]] or [[Number]] - trait's value\n* [[Nothing]] - if ''unit'' is invalid, e.g an empty vehicle",
            "sqf_type": null
        }
    },
    {
        "name": "getUserMFDText",
        "description": "Returns array of user text variables used in MFD.",
        "introduced_version": null,
        "syntax": "[[getUserMFDText]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getUserMFDValue",
        "description": "Returns array of user text variables used in MFD.",
        "introduced_version": null,
        "syntax": "'''getUserMFDValue''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "a vehicle with MFD",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Number]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getVariable",
        "description": "Returns the value of variable in the variable space assigned to various data types.\nAll available data types combinations:\n{",
        "introduced_version": null,
        "syntax": "varspace [[getVariable]] name",
        "parameters": [
            {
                "name": "varspace",
                "description": ", [[Object]], [[Display]], [[Control]], [[Group]], [[Location]], [[Task]], [[Team Member]], [[Display]], [[Control]]",
                "sqf_type": "Namespace"
            },
            {
                "name": "name",
                "description": "variable name that was defined in [[setVariable]]",
                "sqf_type": "String"
            },
            {
                "name": "varspace",
                "description": ", [[Object]], [[Display]], [[Control]], [[Group]], [[Location]], [[Task]], [[Team Member]], [[Display]], [[Control]]",
                "sqf_type": "Namespace"
            },
            {
                "name": "name",
                "description": "Variable name that was defined in [[setVariable]]",
                "sqf_type": "String"
            },
            {
                "name": "defaultValue",
                "description": "Value to return if variable doesn't exist",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Anything]] or [[Nothing]] if the variable doesn't exist",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "getVehicleCargo",
        "description": "Get a list of vehicles loaded as cargo inside this vehicle. The returned array is in the order the cargo vehicles were added to containing vehicle.",
        "introduced_version": null,
        "syntax": "[[getVehicleCargo]] storingVehicle",
        "parameters": [
            {
                "name": "storingVehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - vehicles loaded in storingVehicle, in order of their loading",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getWPPos",
        "description": "Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.",
        "introduced_version": null,
        "syntax": "'''getWPPos''' [group, index]",
        "parameters": [
            {
                "name": "group",
                "description": "the group/unit, of which you want to select a waypoint",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Position3D]]. \nThe returned position equals [0,0,0], if the selected waypoint doesn't exist.",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getWeaponCargo",
        "description": "Returns all weapons types and count from the cargo space",
        "introduced_version": null,
        "syntax": "[[getWeaponCargo]] object",
        "parameters": [
            {
                "name": "object",
                "description": "object to check",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [all_types_array, all_counts_array]. Eg: [[\"a\", \"b\"], [3, 2]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "getWeaponSway",
        "description": "Returns current size of weapon sway of a given unit, in radians",
        "introduced_version": null,
        "syntax": "[[getWeaponSway]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]: weapon sway",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getWingsOrientationRTD",
        "description": "Returns orientation of horizontal stabilizers.",
        "introduced_version": null,
        "syntax": "[[getWingsOrientationRTD]] RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "getWingsPositionRTD",
        "description": "Returns position of stabilizers.",
        "introduced_version": null,
        "syntax": "[[getWingsPositionRTD]] RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "glanceAt",
        "description": "Control what the unit(s) is/are glancing at (target or [[Position]]). If target is used, it will get revealed fully.\n\nHow frequently the unit(s) is/are glancing there depends on behaviour.",
        "introduced_version": null,
        "syntax": "unit(s) '''glanceAt''' position",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "globalChat",
        "description": "Types text to the global radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see [[remoteExec]])",
        "introduced_version": null,
        "syntax": "unitName [[globalChat]] chatText",
        "parameters": [
            {
                "name": "unitName",
                "description": "unit transmitting message",
                "sqf_type": "Object"
            },
            {
                "name": "chatText",
                "description": "message to transmit",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "globalRadio",
        "description": "Sends the audio message to the global radio channel. The message is defined in CfgRadio in the [[description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see [[remoteExec]]).\n<br><br>Note:  When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.",
        "introduced_version": null,
        "syntax": "unit '''globalRadio''' radioName",
        "parameters": [
            {
                "name": "unit",
                "description": "unit to transmit",
                "sqf_type": "Object"
            },
            {
                "name": "radioName",
                "description": "class name from CfgRadio",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "goggles",
        "description": "Returns name of currently used goggles (for NVGoggles use [[hmd]]).",
        "introduced_version": null,
        "syntax": "'''goggles''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "goto",
        "description": "Break script flow and go to given label (defined by '''#''' - '''NOT''' to be confused with [[SQF syntax|SQF]]'s [[a_hash_b|hash sign]]!)",
        "introduced_version": null,
        "syntax": "[[goto]] label",
        "parameters": [
            {
                "name": "label",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "group",
        "description": "Returns the group a unit is assigned to.",
        "introduced_version": null,
        "syntax": "'''group''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Group]] -  \nFor dead units, the returned group equals [[grpNull]].",
            "sqf_type": "Group"
        }
    },
    {
        "name": "groupChat",
        "description": "Types text to the group radio channel. Must have assigned \"ItemRadio\" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see [[remoteExec]])",
        "introduced_version": null,
        "syntax": "unitName [[groupChat]] chatText",
        "parameters": [
            {
                "name": "unitName",
                "description": "unit transmitting message",
                "sqf_type": "Object"
            },
            {
                "name": "chatText",
                "description": "message to transmit",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "groupFromNetId",
        "description": "Get group with given unique ID. For objects use [[objectFromNetId]]. As this command is MP only, you can use [[BIS_fnc_groupFromNetId]], which extends the use to SP as well.",
        "introduced_version": null,
        "syntax": "'''groupFromNetId''' id",
        "parameters": [
            {
                "name": "id",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Group]]",
            "sqf_type": "Group"
        }
    },
    {
        "name": "groupIconSelectable",
        "description": "Returns whether or not group icons raise [[onGroupIconClick]], [[onGroupIconOverEnter]] and [[onGroupIconOverLeave]] events.",
        "introduced_version": null,
        "syntax": "'''groupIconSelectable'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] - [[true]] is selectable",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "groupIconsVisible",
        "description": "Returns array with group icons visibility. A getter for [[setGroupIconsVisible]]",
        "introduced_version": null,
        "syntax": "'''groupIconsVisible'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - [visibleOnMap, visibleOnHUD]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "groupId",
        "description": "Returns group name.",
        "introduced_version": null,
        "syntax": "'''groupId''' group",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "groupOwner",
        "description": "Returns the [[Multiplayer_Scripting#Machine_network_ID | machine network ID]] of the client to which the group is local. This command only works when called from the server. When called from a client, it always returns 0.",
        "introduced_version": null,
        "syntax": "'''groupOwner''' group",
        "parameters": [
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "groupRadio",
        "description": "Sends the audio message to the group radio channel. Must have assigned \"ItemRadio\" to send or receive the transmission. The message is defined in CfgRadio in the [[description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see [[remoteExec]]).\n<br><br>Note:  When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.",
        "introduced_version": null,
        "syntax": "unit '''groupRadio''' radioName",
        "parameters": [
            {
                "name": "unit",
                "description": "unit to transmit",
                "sqf_type": "Object"
            },
            {
                "name": "radioName",
                "description": "class name from CfgRadio",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "groupSelectUnit",
        "description": "Selects a unit from player's group. If player is the leader, the effect of this command is similar to player pressing F1, F2, F3... buttons to highlight units in his squad, after which the unit command menu is shown. If leader is AI, player will get usual communication menu to interact with the leader.",
        "introduced_version": null,
        "syntax": "player '''groupSelectUnit''' [unit, select]",
        "parameters": [
            {
                "name": "player",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "select",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "groupSelectedUnits",
        "description": "Returns selected units in source group for normal commanding mode (individual units). For the High Command equivalent, see [[hcSelected]].",
        "introduced_version": null,
        "syntax": "'''groupSelectedUnits''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "grpNull",
        "description": "A non-existing [[Group]]. To compare non-existent groups use [[isNull]] or [[isEqualTo]]:\n* <tt>[[grpNull]]",
        "introduced_version": null,
        "syntax": "'''grpNull'''",
        "parameters": [],
        "returns": {
            "description": "[[Group]]",
            "sqf_type": "Group"
        }
    },
    {
        "name": "gunner",
        "description": "Returns the gunner of a vehicle.",
        "introduced_version": null,
        "syntax": "[[Object]]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] -  \nThe person sitting in the gunner place is returned. If vehicle is not a vehicle but a person, the person is returned.",
            "sqf_type": "Object"
        }
    },
    {
        "name": "gusts",
        "description": "Return the current gusts value. Scale is 0 to 1.",
        "introduced_version": null,
        "syntax": "'''gusts'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "halt",
        "description": "This command was meant to break the script into debugger, however currently it doesn't do anything except displaying and logging the following error: <tt>Error Debugger breakpoint hit</tt>.",
        "introduced_version": null,
        "syntax": "'''halt'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "handgunItems",
        "description": "Returns array with all items assigned to the [[handgunWeapon]] except magazines. Use [[handgunMagazine]] command for the latter. This command is used for infantry weapons only.",
        "introduced_version": null,
        "syntax": "'''handgunItems''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - [silencer, laserpointer/flashlight, optics, bipod]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "handgunMagazine",
        "description": "Collects all loaded [[magazines]] from all [[handgunWeapon]] muzzles and returns them in [[Array]], otherwise it returns []. This command is used for infantry weapons only.",
        "introduced_version": null,
        "syntax": "'''handgunMagazine''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "handgunWeapon",
        "description": "Returns the name of a unit's handgun (an empty string if there is none).",
        "introduced_version": null,
        "syntax": "'''handgunWeapon''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "handsHit",
        "description": "Checks if a soldier's hands are hit, which results in inaccurate aiming.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] -  \nIf the hands aren't damaged, the returned value is 0. If the hands are hit or the unit is dead, the returned value is 1.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "hasInterface",
        "description": "Returns true if the computer has an interface (a real player). False for a dedicated server or for a headless client.",
        "introduced_version": null,
        "syntax": "[[hasInterface]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "hasPilotCamera",
        "description": "Returns true if the object airplane or helicopter has a [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]].",
        "introduced_version": null,
        "syntax": "'''hasPilotCamera''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[bool]]",
            "sqf_type": "bool"
        }
    },
    {
        "name": "hasWeapon",
        "description": "Checks if a unit has the given weapon in hands or on back/in holster. Weapons inside unit containers such as vest and backpack are not counted.",
        "introduced_version": null,
        "syntax": "unitName '''hasWeapon''' weaponName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "the name of the weapon to check for.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] -  \nReturns true if the unit has the weapon, false if not.",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "hcAllGroups",
        "description": "Returns selected groups in [[High Command|high command]].",
        "introduced_version": null,
        "syntax": "'''hcAllGroups''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "hcGroupParams",
        "description": "Returns parameters describing group in [[High Command|high command]] bar. Return value is array in format [groupName, teamName] or [] if error. Possible values for team name:\n* <tt>\"teammain\"</tt> (default)\n* <tt>\"teamred\"</tt>\n* <tt>\"teamgreen\"</tt>\n* <tt>\"teamblue\"</tt>\n* <tt>\"teamyellow\"</tt>",
        "introduced_version": null,
        "syntax": "unit '''hcGroupParams''' group",
        "parameters": [
            {
                "name": "unit",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "hcLeader",
        "description": "Returns group's [[High Command|high command]] commander.",
        "introduced_version": null,
        "syntax": "'''hcLeader''' group",
        "parameters": [
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "hcRemoveAllGroups",
        "description": "Remove all groups from unit's [[High Command|high command]] bar.",
        "introduced_version": null,
        "syntax": "'''hcRemoveAllGroups''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hcRemoveGroup",
        "description": "Removes group from unit's [[High Command|high command]] bar.",
        "introduced_version": null,
        "syntax": "unit '''hcRemoveGroup''' group",
        "parameters": [
            {
                "name": "unit",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hcSelectGroup",
        "description": "Select given group in [[High Command|high command]] bar.",
        "introduced_version": null,
        "syntax": "unit '''hcSelectGroup''' array",
        "parameters": [
            {
                "name": "unit",
                "description": "HC Owner",
                "sqf_type": "Object"
            },
            {
                "name": "array",
                "description": "of [[Group|groups]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hcSelected",
        "description": "Returns selected groups in [[High Command|high command]].",
        "introduced_version": null,
        "syntax": "'''hcSelected''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "hcSetGroup",
        "description": "Add group to unit's [[High Command|high command]] bar.",
        "introduced_version": null,
        "syntax": "unit '''hcSetGroup''' [group, groupName, team]",
        "parameters": [
            {
                "name": "unit",
                "description": "the leader",
                "sqf_type": "Object"
            },
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "groupName",
                "description": "(Optional)",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hcShowBar",
        "description": "Shows or hides [[High Command|high command]] bar. There must be some groups under HC command to show HC bar.<br><br>",
        "introduced_version": null,
        "syntax": "'''hcShowBar''' bool",
        "parameters": [
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]] (prior to Arma 3 v1.93.145657 this command returned [[Object]] of [[objNull | null]] value)",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hcShownBar",
        "description": "Return true if the [[High Command|high command]] bar is shown/active.",
        "introduced_version": null,
        "syntax": "'''hcShownBar'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "headgear",
        "description": "Returns headgear of unit.",
        "introduced_version": null,
        "syntax": "'''headgear''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "hideBody",
        "description": "Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes [[grpNull]], the body gets deleted and becomes [[objNull]]. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.",
        "introduced_version": null,
        "syntax": "'''hideBody''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "person",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hideObject",
        "description": "Hide entity. Can be used on soldiers and vehicles, also on static objects.",
        "introduced_version": null,
        "syntax": "'''hideObject''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "hidden",
                "description": "[[true]]->hidden; [[false]]->visible",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hideObjectGlobal",
        "description": "This command is designed for MP. Hides object on all connected clients as well as JIP. Call on the <u>server only</u>. Can be used on static objects. In SP this command behaves just like [[hideObject]].",
        "introduced_version": null,
        "syntax": "'''hideObjectGlobal''' object",
        "parameters": [
            {
                "name": "object",
                "description": "object to hide",
                "sqf_type": "Object"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "hidden",
                "description": "[[true]]->hidden; [[false]]->visible",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hideSelection",
        "description": "Hides or enables the given selection for the [[createSimpleObject | simple object]]",
        "introduced_version": null,
        "syntax": "object '''hideSelection''' [selection, hidden]",
        "parameters": [
            {
                "name": "selection",
                "description": "simple object",
                "sqf_type": "Object"
            },
            {
                "name": "selection",
                "description": "selection name",
                "sqf_type": "String"
            },
            {
                "name": "hidden",
                "description": "[[true]] to hide, [[false]] to show",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hint",
        "description": "Outputs a hint message to the right of the screen (left of the screen in",
        "introduced_version": null,
        "syntax": "[[hint]] message",
        "parameters": [
            {
                "name": "message",
                "description": "or [[Structured Text]] - the message to display.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hintC",
        "description": "Displays attractive hint in the center of the screen. Player control is taken away until \"Continue\" is pressed.",
        "introduced_version": null,
        "syntax": "[[hintC]] content",
        "parameters": [
            {
                "name": "content",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "title",
                "description": "message title",
                "sqf_type": "String"
            },
            {
                "name": "content",
                "description": ", [[Structured Text]], [[Array]] of [[String]]s or [[Array]] of [[Structured Text]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "hintCadet",
        "description": "Shows a text hint only when in [[cadetMode]].\n\nThe text can contain several lines. \\n is used to indicate the end of a line.",
        "introduced_version": null,
        "syntax": "'''hintCadet''' text",
        "parameters": [
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hintSilent",
        "description": "Same as [[hint]], but without a sound.",
        "introduced_version": null,
        "syntax": "[[hintSilent]] text",
        "parameters": [
            {
                "name": "text",
                "description": "or [[Structured Text]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "hmd",
        "description": "Returns class name of currently used Head Mounted Display. Returns an empty string if the slot is empty.",
        "introduced_version": null,
        "syntax": "'''hmd''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "hostMission",
        "description": "Host the mp mission described by config class. Should be called as reaction to some UI action in some dialog.<br>\nFor example you can start a MP scenario from a button. It creates a host and takes you to the lobby with the scenario loaded.<br>\nYou need to provide the display which is active when the hostMission command is called.",
        "introduced_version": null,
        "syntax": "[[hostMission]] [pConfig, pDisplay]",
        "parameters": [
            {
                "name": "pConfig",
                "description": "",
                "sqf_type": "Config"
            },
            {
                "name": "pDisplay",
                "description": "",
                "sqf_type": "Display"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "htmlLoad",
        "description": "Load [[HTML File Format|HTML]] from file or Uri using given control. File path is relative to current mission dir or an absolute path (with drive letter etc.). The command is subject to restrictions, imposed by [[CfgCommands]] class.",
        "introduced_version": null,
        "syntax": "control [[htmlLoad]] filename",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "filename",
                "description": "local file name or remote file URL",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "humidity",
        "description": "Returns the current humidity value. 0 is no humidity and 1 is 100% humidity. Humidity value quickly changes from 0 to 1 when rain starts, then slowly changes from 1 to 0 when rain stops.",
        "introduced_version": null,
        "syntax": "'''humidity'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "image",
        "description": "Creates a structured text containing the given image. Use [[setAttributes]] to set additional [[Structured_Text#Attributes | attributes]] on the image.",
        "introduced_version": null,
        "syntax": "'''image''' filename",
        "parameters": [
            {
                "name": "filename",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "importAllGroups",
        "description": "Imports all groups into the RTE.",
        "introduced_version": null,
        "syntax": "'''importAllGroups''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "importance",
        "description": "Returns a location's importance value.",
        "introduced_version": null,
        "syntax": "'''importance''' location",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "inArea",
        "description": "Checks whether given position is inside given area. The area is usually a rectangle or an ellipse defined similar to [[triggerArea]] format. Hence argument for this command could be a trigger, a marker, a location or an array in format [center, a, b, angle, isRectangle, c]. This command also supports hexagon area which can be created from ellipse when both a and b are negative. Hexagon ellipses are also supported by both marker creation and [[drawEllipse]]. <br><br>\nAlternatively, use [[inAreaArray]] to check multiple positions/objects within area.",
        "introduced_version": null,
        "syntax": "position [[inArea]] trigger",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Object]] - position in format [[Position3D]], [[Position2D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "trigger",
                "description": "existing trigger",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "or [[Object]] - position in format [[Position3D]], [[Position2D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "marker",
                "description": "existing marker",
                "sqf_type": "String"
            },
            {
                "name": "position",
                "description": "or [[Object]] - position in format [[Position3D]], [[Position2D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "location",
                "description": "existing location",
                "sqf_type": "Location"
            },
            {
                "name": "position",
                "description": "or [[Object]] - position in format [[Position3D]], [[Position2D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "center",
                "description": "or [[Object]] - center of the area in format [[Position3D]], [[Position2D]], [[Object]] or [[Group]]",
                "sqf_type": "Array"
            },
            {
                "name": "a",
                "description": "x axis (x / 2)",
                "sqf_type": "Number"
            },
            {
                "name": "b",
                "description": "y axis (y / 2)",
                "sqf_type": "Number"
            },
            {
                "name": "angle",
                "description": "rotation angle",
                "sqf_type": "Number"
            },
            {
                "name": "isRectangle",
                "description": "[[true]] if rectangle, [[false]] if ellipse",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "inAreaArray",
        "description": "Filters given list of [[Object]]s and/or [[Position]]s in relation to the given area, defined by a trigger, marker, location or array. Returns array of [[Object]]s and/or [[Position]]s from the list that are inside the area",
        "introduced_version": null,
        "syntax": "positions '''inAreaArray''' trigger",
        "parameters": [
            {
                "name": "positions",
                "description": "[[Object]]s and/or [[Position]]s to check",
                "sqf_type": "Array"
            },
            {
                "name": "trigger",
                "description": "trigger with given area",
                "sqf_type": "Object"
            },
            {
                "name": "positions",
                "description": "[[Object]]s and/or [[Position]]s to check",
                "sqf_type": "Array"
            },
            {
                "name": "marker",
                "description": "marker with given area",
                "sqf_type": "String"
            },
            {
                "name": "positions",
                "description": "[[Object]]s and/or [[Position]]s to check",
                "sqf_type": "Array"
            },
            {
                "name": "location",
                "description": "location with given area",
                "sqf_type": "Location"
            },
            {
                "name": "positions",
                "description": "[[Object]]s and/or [[Position]]s to check",
                "sqf_type": "Array"
            },
            {
                "name": "center",
                "description": "center of the area in format [[Position3D]], [[Position2D]]",
                "sqf_type": "Array"
            },
            {
                "name": "a",
                "description": "x axis (x / 2)",
                "sqf_type": "Number"
            },
            {
                "name": "b",
                "description": "y axis (y / 2)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]: [[Object]]s and/or [[Position]]s inside the trigger area",
            "sqf_type": "Array"
        }
    },
    {
        "name": "inGameUISetEventHandler",
        "description": "Sets given event handler of in-game UI. If EH function returns [[true]], performed action is overridden. Event handlers available are:\n* \"PrevAction\" - mouse scroll up\n* \"Action\" - action key press\n* \"NextAction\" - mouse scroll down\nThis is \"set\" type EH, which means it will replace previously set EH of the same type. So to remove EH, set another one with empty string \"\" for the function.\n<br><br>\nSince Arma 3 v1.49.131743 this EH returns array of params for selected/activated action in ''_this'' variable:\n* 0: [[Object]] - target object to which action is attached\n* 1: [[Object]] - caller object, basically [[player]]\n* 2: [[Number]] - index of the action in action menu (0 - top most)\n* 3: [[String]] - engine based action name (\"User\" for user added actions)\n* 4: [[String]] - [[localize]]d action plain text as seen by the caller\n* 5: [[Number]] - action ''priority'' value\n* 6: [[Boolean]] - action ''showWindow'' value\n* 7: [[Boolean]] - action ''hideOnUse'' value\n* 8: [[String]] - action ''shortcut'' name or \"\"\n* 9: [[Boolean]] - action menu visibility (on first scroll or action press the menu is still invisible, so no action is performed, only menu is shown). See also: [[isActionMenuVisible]] \n* 10: [[String]] - EH event name",
        "introduced_version": null,
        "syntax": "'''inGameUISetEventHandler''' [handlerName, function]",
        "parameters": [
            {
                "name": "handlerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "function",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "inPolygon",
        "description": "Checks whether position is inside given polygon",
        "introduced_version": null,
        "syntax": "position '''inPolygon''' polygon",
        "parameters": [
            {
                "name": "position",
                "description": "format [[Position3D]]",
                "sqf_type": "Array"
            },
            {
                "name": "polygon",
                "description": "array of [[Position3D]] positions in format: [position1, position2...., positionN]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "inRangeOfArtillery",
        "description": "Returns true if all given units are able to fire at given position with given magazineType.",
        "introduced_version": null,
        "syntax": "pos '''inRangeOfArtillery'''",
        "parameters": [
            {
                "name": "pos",
                "description": "",
                "sqf_type": "Position"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "incapacitatedState",
        "description": "Returns the incapacitated state of the given unit.",
        "introduced_version": null,
        "syntax": "'''incapacitatedState''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "independent",
        "description": "Pre-defined variable for the independent [[Side|side]].\n<br> Alias for [[resistance]].",
        "introduced_version": null,
        "syntax": "'''independent'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "inflame",
        "description": "Control fireplace burning. Set inflame to [[true]] (on) or [[false]] (off).",
        "introduced_version": null,
        "syntax": "fireplace '''inflame''' burn",
        "parameters": [
            {
                "name": "fireplace",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "burn",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "inflamed",
        "description": "Checks if fireplace is inflamed (burning) or not. To check if a unit is receiving damage from fire, use [[isBurning]] command.",
        "introduced_version": null,
        "syntax": "'''inflamed''' fireplace",
        "parameters": [
            {
                "name": "fireplace",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "infoPanel",
        "description": "Returns information about what is currently displayed on given player's info panel.<br>\nReturns [\"EmptyDisplay\",\"EmptyDisplayComponent\"] when no panel is open.",
        "introduced_version": null,
        "syntax": "[[infoPanel]] infoPanelId",
        "parameters": [
            {
                "name": "infoPanelId",
                "description": "info panel classname, or \"left\" or \"right\"",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [componentClass, componentType]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "infoPanelComponentEnabled",
        "description": "Controls availability of component to given object info panel.",
        "introduced_version": null,
        "syntax": "unit [[infoPanelComponentEnabled]] [panelID, componentClassOrType]",
        "parameters": [
            {
                "name": "unit",
                "description": "the concerned vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "panelID",
                "description": "\"left\" or \"right\" can be used as panel names",
                "sqf_type": "String"
            },
            {
                "name": "componentClassOrType",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "the concerned vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "turret index",
                "sqf_type": "Array"
            },
            {
                "name": "panelID",
                "description": "\"left\" or \"right\" can be used as panel names",
                "sqf_type": "String"
            },
            {
                "name": "componentClassOrType",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if component was successfully enabled on the panel, [[false]] otherwise (e.g. component is not available for the object)",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "infoPanelComponents",
        "description": "Returns array of all components available to given object info panel.",
        "introduced_version": null,
        "syntax": "unit [[infoPanelComponents]] panelID",
        "parameters": [
            {
                "name": "unit",
                "description": "the concerned vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "panelID",
                "description": "\"left\" or \"right\" can be used as panel names",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "the concerned vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "turret index",
                "sqf_type": "Array"
            },
            {
                "name": "panelID",
                "description": "\"left\" or \"right\" can be used as panel names",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [className, componentType, isAccessible]:\n* className: [[String]] - component classname as defined in object/vehicle config\n* componentType: [[String]] - componentType - component type\n* isAccessible: [[Boolean]] - boolean flag that shows if component is currently accessible (lack of required item can make it temporarily inaccessible)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "infoPanels",
        "description": "Returns array all info panels configured for given object or object and turret path.",
        "introduced_version": null,
        "syntax": "[[infoPanels]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "the concerned vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "unit",
                "description": "the concerned vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "turret index",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "inheritsFrom",
        "description": "Returns base entry of config entry.",
        "introduced_version": null,
        "syntax": "'''inheritsFrom''' config",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Config]]",
            "sqf_type": "Config"
        }
    },
    {
        "name": "initAmbientLife",
        "description": "Initialises the ambient life on [[local]] client from <tt>CfgWorlds >> worldName >> AmbientA3</tt>. Has no effect on dedicated server or headless client.",
        "introduced_version": null,
        "syntax": "'''initAmbientLife'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "inputAction",
        "description": "Return the state of input devices mapped to given input action.\n<br>\nFor Arma 3 inputActions and its bindings see: [[",
        "introduced_version": null,
        "syntax": "'''inputAction''' name",
        "parameters": [
            {
                "name": "name",
                "description": "name of the action",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "insertEditorObject",
        "description": "Insert an object to the editor and assign arguments. Create script is,not called. Returns the ID of the new EditorObject. Subtype class is,optional.",
        "introduced_version": null,
        "syntax": "map '''insertEditorObject''' [type,value,[name1,value1,...],subtype class]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "intersect",
        "description": "Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. ''lodName'' could be one of the following: \n* \"FIRE\"\n* \"VIEW\"\n* \"GEOM\"\n* \"IFIRE\" - (\"I\" stands for Indirect, almost the same as FIRE)\n* \"PHYSX\" - PhysX geometry LOD (since Arma 3 v2.01.146666)",
        "introduced_version": null,
        "syntax": "[object, lodName] '''intersect''' [begPos, endPos]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "lodName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "begPos",
                "description": "format [[PositionAGL]]",
                "sqf_type": "Array"
            },
            {
                "name": "endPos",
                "description": "format [[PositionAGL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of intersections in format: [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "is3DEN",
        "description": "Returns true if the [[Eden Editor]] is currently being used. [[true]] when inside editor environment, [[false]] when outside of editor environment. (see also [[is3DENMultiplayer]], [[is3DENPreview]])",
        "introduced_version": null,
        "syntax": "'''is3DEN'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "is3DENMultiplayer",
        "description": "Returns [[true]] if the [[Eden Editor]] is in multiplayer mode. Returns [[true]] in the following cases:\n* Multiplayer Preview launched directly from [[3DEN]] - [[true]] in preview and only for the creator\n* MP mission is chosen for editing when creating a server: <tt>Multiplayer - Server Browser - Host Server</tt>. When 3D EDITOR button is clicked for selected mission and 3DEN is launched, command returns [[true]] within the editor environment. (see also [[is3DEN]], [[is3DENPreview]])",
        "introduced_version": null,
        "syntax": "'''is3DENMultiplayer'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isAbleToBreathe",
        "description": "If unit is diving and doesn't have a re-breather, it returns [[false]]. Diving means the unit's head is underwater. If unit is underwater and has a re-breather, the command returns [[true]].",
        "introduced_version": null,
        "syntax": "'''isAbleToBreathe''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isActionMenuVisible",
        "description": "Returns [[true]] if scroll menu is visible.",
        "introduced_version": null,
        "syntax": "[[isActionMenuVisible]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isAgent",
        "description": "Check if team member is an agent.",
        "introduced_version": null,
        "syntax": "'''isAgent''' teamMember",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isAimPrecisionEnabled",
        "description": "Returns true if procedural aiming precision affects weapon sway.",
        "introduced_version": null,
        "syntax": "'''isAimPrecisionEnabled''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "Unit which should be checked",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - True if affected, false if not",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isArray",
        "description": "Check if config entry represents array.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isAutoHoverOn",
        "description": "Return [[true]] if vehicle has enabled auto hover. (always returns false if the vehicle can't set auto hover)",
        "introduced_version": null,
        "syntax": "'''isAutoHoverOn''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isAutoStartUpEnabledRTD",
        "description": "Returns state of automatic start up action.",
        "introduced_version": null,
        "syntax": "[[isAutoStartUpEnabledRTD]] helicopter",
        "parameters": [
            {
                "name": "helicopter",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "isAutoTrimOnRTD",
        "description": "Returns state of auto trim functionality.",
        "introduced_version": null,
        "syntax": "[[isAutoTrimOnRTD]] helicopter",
        "parameters": [
            {
                "name": "helicopter",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "isAutonomous",
        "description": "Returns whether the UAV is in autonomous mode or not.",
        "introduced_version": null,
        "syntax": "[[isAutonomous]] uav",
        "parameters": [
            {
                "name": "uav",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isAutotest",
        "description": "Returns true if game was started with autotest parameter",
        "introduced_version": null,
        "syntax": "[[isAutotest]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isBleeding",
        "description": "Returns whether the unit is bleeding.",
        "introduced_version": null,
        "syntax": "'''isBleeding''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isBurning",
        "description": "Returns whether the unit is burning.\nThis returns true only if unit is damaged by nearby fire, it does '''not''' check whether a fireplace is burning, use [[inflamed]] command for that.",
        "introduced_version": null,
        "syntax": "'''isBurning''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isClass",
        "description": "Check if config entry represents config class.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isCollisionLightOn",
        "description": "Returns [[true]] if vehicle collision lights are on otherwise [[false]].",
        "introduced_version": null,
        "syntax": "'''isCollisionLightOn''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isCopilotEnabled",
        "description": "Returns true if copilots actions are enabled.",
        "introduced_version": null,
        "syntax": "'''isCopilotEnabled''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isDLCAvailable",
        "description": "Returns true if the DLC is marked as available. (Steam)",
        "introduced_version": null,
        "syntax": "[[isDLCAvailable]] appid",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isDamageAllowed",
        "description": "A getter for [[allowDamage]] command. The command indicates if damage is allowed at current [[local]]ity, hence local effect of the command. A complete solution for being able to tell whether or not an object can be damaged at current locality looks like this:\n<code>_canBeDamaged",
        "introduced_version": null,
        "syntax": "[[isDamageAllowed]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isDedicated",
        "description": "Return [[true]] if the machine (executing the command) is a dedicated multiplayer server. In single player returns [[false]].",
        "introduced_version": null,
        "syntax": "'''isDedicated'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isEngineOn",
        "description": "Returns [[true]] if engine is on, [[false]] if it is off.",
        "introduced_version": null,
        "syntax": "[[isEngineOn]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isEqualTo",
        "description": "Performs strict comparison between var1 and var2 and returns [[true]] if equal, otherwise [[false]]. Strict means that it would check that both arguments are of the same data type and then compare the values.<br><br>\nSome differences between [[isEqualTo]] and [[==]]:\n* It performs case sensitive comparison on [[String]]s\n* It doesn't throw error when comparing different types, i.e. (\"eleven\" [[isEqualTo]] 11)\n* It can compare [[Array]]s, [[Script]]s and [[Boolean]]s ([[alive]] [[player]] [[isEqualTo]] [[true]])\n* It can compare non-existent game objects ([[grpNull]] [[isEqualTo]] [[grpNull]])\n* It can compare [[Namespace]]s (''As of Arma 3 v1.47'')\n* It is slightly faster than [[==]], especially when comparing [[String]]s <br><br>",
        "introduced_version": null,
        "syntax": "val1 '''isEqualTo''' val2",
        "parameters": [
            {
                "name": "val1",
                "description": "",
                "sqf_type": "Anything"
            },
            {
                "name": "val2",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isEqualType",
        "description": "Compares 2 values by their type. A much faster alternative to [[typeName]] a",
        "introduced_version": null,
        "syntax": "val1 '''isEqualType''' val2",
        "parameters": [
            {
                "name": "val1",
                "description": "",
                "sqf_type": "Anything"
            },
            {
                "name": "val2",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isEqualTypeAll",
        "description": "Compares types of all elements of an array to the type of a single value.",
        "introduced_version": null,
        "syntax": "arr '''isEqualTypeAll''' val",
        "parameters": [
            {
                "name": "arr",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "val",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isEqualTypeAny",
        "description": "Compares type of given value to every type in the given array and if match is found, [[true]] is returned.",
        "introduced_version": null,
        "syntax": "val '''isEqualTypeAny''' types",
        "parameters": [
            {
                "name": "val",
                "description": "",
                "sqf_type": "Anything"
            },
            {
                "name": "types",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isEqualTypeArray",
        "description": "Compares types of all elements of one array to types of all elements of another array.",
        "introduced_version": null,
        "syntax": "arr1 '''isEqualTypeArray''' arr2",
        "parameters": [
            {
                "name": "arr1",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "arr2",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isEqualTypeParams",
        "description": "Compares types of all elements of input array to types of all elements of template array. Similar to [[isEqualTypeArray]] however this command is designed for fast validation of functions params, so there are differences:\n* Input can be anything but will be expected to be an [[Array]], otherwise [[false]] is returned\n* Input array can be longer but not shorter than template array, will return [[false]] if shorter\n* [[nil]] could be used in template type array as a wild card to allow any type match",
        "introduced_version": null,
        "syntax": "input '''isEqualTypeParams''' template",
        "parameters": [
            {
                "name": "input",
                "description": "could be value of any type, but only type [[Array]] will be validated",
                "sqf_type": "Anything"
            },
            {
                "name": "template",
                "description": "array of expected types",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isFilePatchingEnabled",
        "description": "Returns [[true]] if file patching is enabled otherwise [[false]]",
        "introduced_version": null,
        "syntax": "'''isFilePatchingEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isFlashlightOn",
        "description": "Returns true if there is a linked and enabled flashlight on a given weapon.",
        "introduced_version": null,
        "syntax": "unit '''isFlashlightOn''' weapon",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isFlatEmpty",
        "description": "Checks given position against given filter params. Filter includes checks for:\n* If there are any objects closer than given distance from given position (in 2D)\n* If the area around position is flat enough to match given gradient\n* If the given position is over water or land\n* If the given position is over shore line\nThe gradient seems to correlate with general hill steepness: 0.1 (10%) ~6\u00b0, 0.5 (50%) ~27\u00b0, 1.0 (100%) ~45\u00b0, etc.",
        "introduced_version": null,
        "syntax": "position [[isFlatEmpty]] [minDistance, mode, maxGradient, maxGradientRadius, overLandOrWater, shoreLine, ignoreObject]",
        "parameters": [
            {
                "name": "position",
                "description": "position in format [[PositionAGL]]",
                "sqf_type": "Array"
            },
            {
                "name": "minDistance",
                "description": "(Optional, default -1) minimum (2D) distance from other objects (range 0..50). -1 to ignore proximity check",
                "sqf_type": "Number"
            },
            {
                "name": "mode",
                "description": "(Optional, default -1) position check mode ('''ALWAYS USE DEFAULT VALUE''')",
                "sqf_type": "Number"
            },
            {
                "name": "maxGradient",
                "description": "(Optional, default -1) maximum terrain steepness allowed. -1 to ignore",
                "sqf_type": "Number"
            },
            {
                "name": "maxGradientRadius",
                "description": "(Optional, default 1) how far to extend gradient check",
                "sqf_type": "Number"
            },
            {
                "name": "ignoreObject",
                "description": "(Optional, default [[objNull]]) object to ignore in proximity checks. [[objNull]] to ignore",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - Empty array [] if check failed or [[PositionASL]] if succeded. Resulting position will be original [[PositionAGL]] + [[getTerrainHeightASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "isForcedWalk",
        "description": "Returns [[true]] if player is forced to walk with [[forceWalk]].",
        "introduced_version": null,
        "syntax": "'''isForcedWalk''' unitName",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isFormationLeader",
        "description": "Returns true if the specified unit is subgroup leader.",
        "introduced_version": null,
        "syntax": "'''isFormationLeader''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "Unit being checked.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if unit is subgroup leader.",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isGameFocused",
        "description": "Returns [[false]] if the game window lost focus, due to user Alt+Tab-ing for example.",
        "introduced_version": null,
        "syntax": "[[isGameFocused]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isGamePaused",
        "description": "Returns [[true]] if the game simulation is paused due to some system event like a dialog or pause menu or when user has Alt+Tab-ed (except when -nopause start up param is used). Relevant to SP, in MP simulation does not get paused. \n<br><br>",
        "introduced_version": null,
        "syntax": "[[isGamePaused]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isGroupDeletedWhenEmpty",
        "description": "Checks if the given group marked for auto-deletion when empty. See [[deleteGroupWhenEmpty]].",
        "introduced_version": null,
        "syntax": "'''isGroupDeletedWhenEmpty''' group",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] the group is marked for auto-deletion when empty",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isHidden",
        "description": "Return whether the person is hidden (reached the hiding position). For command that tests general visibility of an object use [[isObjectHidden]]",
        "introduced_version": null,
        "syntax": "'''isHidden''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isIRLaserOn",
        "description": "Returns [[true]] if there is a linked and enabled IR on the given weapon.",
        "introduced_version": null,
        "syntax": "unit '''isIRLaserOn''' weapon",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isInRemainsCollector",
        "description": "Checks if unit or vehicle is queued for disposal after death.",
        "introduced_version": null,
        "syntax": "'''isInRemainsCollector''' remain",
        "parameters": [
            {
                "name": "remain",
                "description": "vehicle or unit",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isInstructorFigureEnabled",
        "description": "Returns the status of INSTRUCTOR FIGURE setting in UI (OPTIONS >> GAME >> GENERAL >> INSTRUCTOR FIGURE).",
        "introduced_version": null,
        "syntax": "'''isInstructorFigureEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isKeyActive",
        "description": "Checks whether the given key is active in the current user profile.\n\nSee keys, keysLimit and doneKeys in the [[Description.ext#keys|description.ext]] file of the missions.",
        "introduced_version": null,
        "syntax": "'''isKeyActive''' keyName",
        "parameters": [
            {
                "name": "keyName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isKindOf",
        "description": "Checks whether the object is (a subtype) of the given type. While main and alternative syntaxes support only '''CfgVehicles''', '''CfgAmmo''' and '''CfgNonAIVehicles''', alternative syntax 2 allows to specify any config, including [[missionConfigFile|mission config]].",
        "introduced_version": null,
        "syntax": "object [[isKindOf]] typeName",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "typeName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "typeName1",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "typeName2",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "typeName1",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "typeName2",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "targetConfig",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isLaserOn",
        "description": "Returns true if the vehicle has its laser turned on. Not to be confused with [[isIRLaserOn]] which is for units",
        "introduced_version": null,
        "syntax": "'''isLaserOn''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]: True when laser is on, otherwise false",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isLightOn",
        "description": "Returns [[true]] if vehicle headlights are on otherwise [[false]].",
        "introduced_version": null,
        "syntax": "[[isLightOn]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle with headlights",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "vehicle with search light on a turret",
                "sqf_type": "Object"
            },
            {
                "name": "turret",
                "description": "turret path",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isLocalized",
        "description": "Checks whether given string name is [[localize]]d.",
        "introduced_version": null,
        "syntax": "'''isLocalized''' stringName",
        "parameters": [
            {
                "name": "stringName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isManualFire",
        "description": "Returns [[true]] if manual fire is on. Manual fire could either be selected in vehicle action menu (if available) or with [[action]] \"ManualFire\" and \"ManualFireCancel\". Always returns [[false]] for a soldier.",
        "introduced_version": null,
        "syntax": "'''isManualFire''' vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isMarkedForCollection",
        "description": "Checks whether the object is marked for weapons collection.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isMultiplayer",
        "description": "Return true if multiPlayer.",
        "introduced_version": null,
        "syntax": "'''isMultiplayer'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isMultiplayerSolo",
        "description": "Returns [[true]] when playing a game in '''solo multiplayer''' (for example Apex coop campaign PLAY SOLO option).",
        "introduced_version": null,
        "syntax": "'''isMultiplayerSolo'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isNil",
        "description": "Tests whether the variable given by its name is [[nil]] or undefined, or whether the given expression evaluates to [[nil]] or [[Nothing]].",
        "introduced_version": null,
        "syntax": "[[isNil]] variableName",
        "parameters": [
            {
                "name": "variableName",
                "description": "name of a [[missionNamespace]] variable (e.g \"someVar\") or a local variable (e.g \"_someVar\")",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if variable is [[nil]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isNull",
        "description": "Checks whether the tested item is null.<br>\nWhich null type the item has to be equal to depends on the type of game entity tested:\n\n{",
        "introduced_version": null,
        "syntax": "[[isNull]] entity",
        "parameters": [
            {
                "name": "entity",
                "description": ", [[Control]], [[Display]], [[Group]], [[Location]], [[Task]], [[Script]], [[Config]] or [[Diary Record]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isNumber",
        "description": "Check if config entry represents number.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isObjectHidden",
        "description": "Checks visibility of a given object on the local machine.",
        "introduced_version": null,
        "syntax": "'''isObjectHidden''' object",
        "parameters": [
            {
                "name": "object",
                "description": "object to test",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if hidden, [[false]] if visible",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isObjectRTD",
        "description": "Returns true if RTD model is loaded.",
        "introduced_version": null,
        "syntax": "[[isObjectRTD]] helicopter",
        "parameters": [
            {
                "name": "helicopter",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isOnRoad",
        "description": "Checks if given position is inside road segment. Same as [[roadAt]], only return is boolean instead of road object.",
        "introduced_version": null,
        "syntax": "'''isOnRoad''' position",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] (especially on bridges) or (since Arma 3 v1.99.146460) [[Position2D]], in which case Z will be automatically deduced as the height of the road surface",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isPipEnabled",
        "description": "Returns true if Picture in Picture (Render to Texture) is enabled.",
        "introduced_version": null,
        "syntax": "'''isPipEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isPlayer",
        "description": "Checks if given person is [[player]]. Returns [[true]] for headless clients as well.<br><br>",
        "introduced_version": null,
        "syntax": "'''isPlayer''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isRealTime",
        "description": "Returns true if the mission editor is operating in real time mode.",
        "introduced_version": null,
        "syntax": "'''isRealTime''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isRemoteExecuted",
        "description": "Returns [[true]] if the code context is being remote executed by [[remoteExec]] or [[remoteExecCall]]. In SP always returns [[false]]. See also [[isRemoteExecutedJIP]]",
        "introduced_version": null,
        "syntax": "'''isRemoteExecuted'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isRemoteExecutedJIP",
        "description": "Returns [[true]] if the code context is being remote executed from the JIP queue by [[remoteExec]] or [[remoteExecCall]] (when JIP param was set). It is a subset of [[isRemoteExecuted]]:\n* Normal remote execution: \n** [[isRemoteExecuted]] - [[true]]\n** [[isRemoteExecutedJIP]] - [[false]]\n* Remote execution from JIP queue: \n** [[isRemoteExecuted]] - [[true]]\n** [[isRemoteExecutedJIP]] - [[true]]\nIn SP always returns [[false]].",
        "introduced_version": null,
        "syntax": "'''isRemoteExecutedJIP'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isSensorTargetConfirmed",
        "description": "Returns if given unit is confirmed target for given side.",
        "introduced_version": null,
        "syntax": "unit '''isSensorTargetConfirmed''' side",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[True]] if confirmed target, otherwise [[false]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isServer",
        "description": "Returns [[true]] if the machine (executing the command) is the server in a multiplayer game or is running single player. It will return [[true]] for both dedicated and player-hosted server.",
        "introduced_version": null,
        "syntax": "[[isServer]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isShowing3DIcons",
        "description": "Returns true if the editor is set to draw 3D icons.",
        "introduced_version": null,
        "syntax": "'''isShowing3DIcons''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isSimpleObject",
        "description": "Returns [[true]] if given object is [[createSimpleObject|simple object]]",
        "introduced_version": null,
        "syntax": "'''isSimpleObject''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isSprintAllowed",
        "description": "Returns true if player is allowed to sprint",
        "introduced_version": null,
        "syntax": "'''isSprintAllowed''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isStaminaEnabled",
        "description": "Check if stamina depletion is enabled",
        "introduced_version": null,
        "syntax": "'''isStaminaEnabled''' unit;",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isSteamMission",
        "description": "Returns true if the current mission is a Steam Workshop mission.",
        "introduced_version": null,
        "syntax": "'''isSteamMission'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isStreamFriendlyUIEnabled",
        "description": "Returns the status of STREAM FRIENDLY UI setting in UI (OPTIONS >> GAME >> GENERAL >> STREAM FRIENDLY UI).",
        "introduced_version": null,
        "syntax": "'''isStreamFriendlyUIEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isStressDamageEnabled",
        "description": "Returns [[true]] if stress damage is enabled in the game settings. A getter for [[enableStressDamage]].",
        "introduced_version": null,
        "syntax": "'''isStressDamageEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] Returns true if enabled, otherwise false",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isText",
        "description": "Check if config entry represents text.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isTouchingGround",
        "description": "Returns true if object is touching the ground.",
        "introduced_version": null,
        "syntax": "'''isTouchingGround''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isTurnedOut",
        "description": "Returns [[true]] if given unit is turned out, otherwise [[false]]. The output changes to [[true]] after unit finished turning out, however will change to [[false]] almost immediately after unit is ordered to turn in.",
        "introduced_version": null,
        "syntax": "'''isTurnedOut''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "unit on turn(in/out) enabled turret",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isTutHintsEnabled",
        "description": "Returns the status of TUTORIAL HINTS setting in UI (OPTIONS >> GAME >> GENERAL >> TUTORIAL HINTS).",
        "introduced_version": null,
        "syntax": "'''isTutHintsEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isUAVConnectable",
        "description": "Returns true if UAV is connectable by AV terminal(s).",
        "introduced_version": null,
        "syntax": "object [[isUAVConnectable]] [uav, checkAllItems]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "uav",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            },
            {
                "name": "checkAllItems",
                "description": "[[true]] to check all terminals in unit's inventory, [[false]] to only check assigned terminal.",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isUAVConnected",
        "description": "Returns true if UAV is connected to some terminal.",
        "introduced_version": null,
        "syntax": "[[isUAVConnected]] uav",
        "parameters": [
            {
                "name": "uav",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isUIContext",
        "description": "Returns [[true]] if the script originated from some UI control event, for example from \"onButtonDown\" EH. Exists within parent scope and immediate child scopes.",
        "introduced_version": null,
        "syntax": "'''isUIContext'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isUniformAllowed",
        "description": "Check whether given uniform can be dressed by target soldier.",
        "introduced_version": null,
        "syntax": "unit [[isUniformAllowed]] type",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isVehicleCargo",
        "description": "Despite a misleading name, returns the vehicle that is transporting given vehicle in cargo. If the given vehicle is not in vehicle cargo, [[objNull]] is returned.",
        "introduced_version": null,
        "syntax": "'''isVehicleCargo''' cargo",
        "parameters": [
            {
                "name": "cargo",
                "description": "vehicle in cargo",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - transporting vehicle",
            "sqf_type": "Object"
        }
    },
    {
        "name": "isVehicleRadarOn",
        "description": "Returns true if vehicle has active sensors on.",
        "introduced_version": null,
        "syntax": "[[isVehicleRadarOn]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle on which check is performed",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isVehicleSensorEnabled",
        "description": "Returns class name (to identify list based on component name) and info if given sensor is enabled",
        "introduced_version": null,
        "syntax": "vehicle '''isVehicleSensorEnabled''' componentName",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "isWalking",
        "description": "Returns [[true]] if walk is '''toggled''' (default W+S in",
        "introduced_version": null,
        "syntax": "[[isWalking]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isWeaponDeployed",
        "description": "Returns true if weapon is currently deployed.",
        "introduced_version": null,
        "syntax": "[[isWeaponDeployed]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "isWeaponRested",
        "description": "Returns true if weapon is currently rested.",
        "introduced_version": null,
        "syntax": "[[isWeaponRested]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "itemCargo",
        "description": "Get array with items from ammo box (or any general weapon holder container).",
        "introduced_version": null,
        "syntax": "'''itemCargo''' object",
        "parameters": [
            {
                "name": "object",
                "description": "Vehicle or ammo box",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - Format: [\"ItemType1\",\"ItemType2\",\"ItemType3\"...]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "items",
        "description": "Returns an array of names of all unit's stored items, including [[weapons]] but excluding [[magazines]] (see [[itemsWithMagazines]]) and [[assignedItems]].",
        "introduced_version": null,
        "syntax": "[[items]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "itemsWithMagazines",
        "description": "Returns combined array including all unit's stored [[items]] and all unit's stored [[magazines]] and all unit's '''stored''' [[weapons]]. Loaded magazines such as [[currentMagazine]], [[primaryWeaponMagazine]], [[secondaryWeaponMagazine]], [[handgunMagazine]], [[binocularMagazine]] as well as [[assignedItems]] are excluded.",
        "introduced_version": null,
        "syntax": "'''itemsWithMagazines''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "join",
        "description": "Join all units in the array to given group. \n\nMaximum number of group members is:\n* OFP: 12\n* Arma: 144\n* Arma 2: ?\n* Arma 3: \"unlimited\" (3000+)\n* VBS 2: \"unlimited\" (260+)\n\nTo have a group member leave a group, join him with the [[grpNull]] group (e.g. <tt>[guy1] [[join]] [[grpNull]]</tt>), but '''beware''', as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.",
        "introduced_version": null,
        "syntax": "unitArray '''join''' group",
        "parameters": [
            {
                "name": "unitArray",
                "description": "units to join group",
                "sqf_type": "Array"
            },
            {
                "name": "group",
                "description": "or [[Object]]",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "joinAs",
        "description": "Joins the unit to the given group, if position id is available, this one is used.",
        "introduced_version": null,
        "syntax": "unit '''joinAs''' [group, id]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "id",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "joinAsSilent",
        "description": "Joins the unit to the given group, if position id is available, this one is used. Avoid any radio communication related to joining.",
        "introduced_version": null,
        "syntax": "unit '''joinAsSilent''' [group, id]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "id",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "joinSilent",
        "description": "Join all units in the array to given group silently (without radio message). To have a group member leave a group, join him with the [[grpNull]] group (e.g. <tt>[guy1] [[joinSilent]] [[grpNull]]</tt>), but '''beware''', as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.",
        "introduced_version": null,
        "syntax": "unitArray '''joinSilent''' group",
        "parameters": [
            {
                "name": "unitArray",
                "description": "units to join group",
                "sqf_type": "Array"
            },
            {
                "name": "group",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "joinString",
        "description": "Joins ''array'' into [[String]] with provided ''separator''. Array can be of mixed types, all elements will be converted to [[String]] prior to joining, but the fastest operation is on the array of [[Strings]].",
        "introduced_version": null,
        "syntax": "array '''joinString''' separator",
        "parameters": [
            {
                "name": "array",
                "description": "array of [[Anything]]",
                "sqf_type": "Array"
            },
            {
                "name": "separator",
                "description": "separator used to join array elements.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "kbAddDatabase",
        "description": "Register knowledge base database to given person. See [[Conversations]] for more details.",
        "introduced_version": null,
        "syntax": "person [[kbAddDatabase]] fileName",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "fileName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "kbAddDatabaseTargets",
        "description": "Register target list knowledge base database to given person. See [[Conversations]] for more details.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "fileName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "kbAddTopic",
        "description": "Register conversation topic to given person. See [[Conversations]] for more details.",
        "introduced_version": null,
        "syntax": "person [[kbAddTopic]] [topicName, conversationFile, fsmFile, eventHandler]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "topicName",
                "description": "the topic id for further reference",
                "sqf_type": "String"
            },
            {
                "name": "conversationFile",
                "description": ".bikb file path",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "kbHasTopic",
        "description": "Check if conversation topic was registered to given person. See [[Conversations]] for more details.",
        "introduced_version": null,
        "syntax": "person [[kbHasTopic]] topicName",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "topicName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "kbReact",
        "description": "Pass a non-verbal communication to the receiver. This command does '''as if''' the sentence was said and triggers the reaction scripts (AI FSM or player's conversation EH). See [[Conversations]] for more details.",
        "introduced_version": null,
        "syntax": "person [[kbReact]] [receiver, topicName, sentenceID(, argumentArray1, argumentArray2, \u2026)]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "receiver",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "topicName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "sentenceID",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "kbRemoveTopic",
        "description": "Unregister conversation topic from given person. See [[Conversations]] for more details.",
        "introduced_version": null,
        "syntax": "person [[kbRemoveTopic]] topicName",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "topicName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "kbTell",
        "description": "Make the person tell to the receiver the sentence. See [[Conversations]] for more details.",
        "introduced_version": null,
        "syntax": "person [[kbTell]] [receiver, topicName, sentenceClass(, argumentArray1, argumentArray2, (\u2026), forceRadio)]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "receiver",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "topicName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "sentenceClass",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "kbWasSaid",
        "description": "Check if given item was said by person to someone. See [[Conversations]] for more details.",
        "introduced_version": null,
        "syntax": "person [[kbWasSaid]] [receiver, topic, sentenceID, maxAge]",
        "parameters": [
            {
                "name": "person",
                "description": "who said the item",
                "sqf_type": "Object"
            },
            {
                "name": "receiver",
                "description": "receiver of the sentence",
                "sqf_type": "Object"
            },
            {
                "name": "topic",
                "description": "name of the topic used in [[kbAddTopic]]",
                "sqf_type": "String"
            },
            {
                "name": "sentenceID",
                "description": "id of sentence that we want to check",
                "sqf_type": "String"
            },
            {
                "name": "maxAge",
                "description": "time in seconds. [[kbWasSaid]] will check whether the sentence was said in last '''max. age''' seconds",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "keyImage",
        "description": "Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.",
        "introduced_version": null,
        "syntax": "'''keyImage''' dikCode",
        "parameters": [
            {
                "name": "dikCode",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "keyName",
        "description": "Returns the name of a button (on the keyboard, mouse or joystick) with the given code.",
        "introduced_version": null,
        "syntax": "'''keyName''' dikCode",
        "parameters": [
            {
                "name": "dikCode",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "knowsAbout",
        "description": "Checks if a group or a side knows about target.\n* Enemy knowledge is instantly shared among the group units\n* Units in the same group always perfectly know about each others\n* AI knowledge cannot check beyond current [[viewDistance]] and it resets to zero as soon as the target's distance is over it<br>Note: neither fog nor daylight affect this behaviour\n* Losing sight of a target for more than 120 seconds resets its [[knowsAbout]] to zero as well\n* '''Magic number''' is the value that must be reached for a unit to shoot at an enemy (used by \"Detected by\" triggers as well):\n:{",
        "introduced_version": null,
        "syntax": "who [[knowsAbout]] target",
        "parameters": [
            {
                "name": "who",
                "description": ", [[Group]] or [[Side]] - if a unit, unit's [[group]] is considered; if a vehicle, vehicle commander's [[group]] is used.",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] in the range of 0..4, where 4 is maximum knowledge.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "land",
        "description": "Force helicopter landing. Landing mode may be: \n\n* \"LAND\" (complete stop)\n* \"GET IN\" (hovering very low, for another unit to get in)\n* \"GET OUT\" (hovering low,for another unit to get out)\n* \"NONE\" (cancel a landing) ''Available since ArmA 2 57463 build.''",
        "introduced_version": null,
        "syntax": "helicopter '''land''' mode",
        "parameters": [
            {
                "name": "helicopter",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mode",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "landAt",
        "description": "Order an AI airplane to land at a given airport.\n'''Id''' is the number to identify which map airport you want the airplane to land at. See [[Arma: Airport IDs]] for more information.",
        "introduced_version": null,
        "syntax": "plane [[landAt]] id",
        "parameters": [
            {
                "name": "plane",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "id",
                "description": "([[Arma: Airport IDs|airport index]])",
                "sqf_type": "Number"
            },
            {
                "name": "plane",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "airportObject",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "landResult",
        "description": "Return the result of helicopter landing position searching (performed, after land command).",
        "introduced_version": null,
        "syntax": "'''landResult''' helicopter",
        "parameters": [
            {
                "name": "helicopter",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] - Result, can be:\n*\"Found\" (Position found)\n*\"NotFound\" (Position not found)\n*\"NotReady\" (Position searching is still in progess\n*\" \" (Empty string when wrong was argument)",
            "sqf_type": "String"
        }
    },
    {
        "name": "language",
        "description": "Returns current game language.",
        "introduced_version": null,
        "syntax": "[[language]]",
        "parameters": [],
        "returns": {
            "description": "[[String]] - See [[Stringtable.xml#Supported_languages|supported languages]] for possible values",
            "sqf_type": "String"
        }
    },
    {
        "name": "laserTarget",
        "description": "Returns laser target object created by given unit (vehicle or soldier) when using a laser targeting device.",
        "introduced_version": null,
        "syntax": "[[laserTarget]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - laser target or [[objNull]] if no laser target exists",
            "sqf_type": "Object"
        }
    },
    {
        "name": "lbAdd",
        "description": "Adds an item with the given text to the listbox or combobox with id idc of the topmost user [[dialog]].\n<br>\nIt returns the index of the newly added item.",
        "introduced_version": null,
        "syntax": "[[lbAdd]] [idc, text]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - row index",
            "sqf_type": "Number"
        }
    },
    {
        "name": "lbClear",
        "description": "Clear all items in listbox or combobox with id idc of topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "[[lbClear]] idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbColor",
        "description": "Returns the text color of the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]].\n<br>\nThe color is returned in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "'''lbColor''' [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Color|Color (RGBA)]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lbColorRight",
        "description": "Returns the text color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user [[dialog]].\n<br>\nThe color is returned in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "'''lbColorRight''' [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Color|Color (RGBA)]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lbCurSel",
        "description": "Returns the index of the selected item of the listbox, combobox or toolbox with id idc of the topmost user [[dialog]]. For listbox  LB_MULTI (multi-selection) use [[lbSelection]].",
        "introduced_version": null,
        "syntax": "'''lbCurSel''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "lbData",
        "description": "Returns the additional text (invisible) in an item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lbDelete",
        "description": "Removes the item with the given index from the listbox or combobox/toolbox with id idc of the topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''lbDelete''' [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbIsSelected",
        "description": "Checks whether or not given row of the given listbox is selected.",
        "introduced_version": null,
        "syntax": "control '''lbIsSelected''' index",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "lbPicture",
        "description": "Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''lbPicture''' [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "idc of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lbPictureRight",
        "description": "Returns the right picture name of the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''lbPictureRight''' [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "idc of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lbSelection",
        "description": "Returns [[Array]] of selected rows indices in the given listbox. If listbox is of style LB_MULTI (multi-selection) the array will contain multiple elements, otherwise only a single element. For single selection listbox one can also use [[lbCurSel]]. See also [[lbIsSelected]], [[lbSetSelected]]",
        "introduced_version": null,
        "syntax": "'''lbSelection''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lbSetColor",
        "description": "Sets the color of the item (left) with the given index of the listbox or combobox with id idc of the topmost user [[dialog]] to color.\n<br>\nColour is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "'''lbSetColor'''  [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetColorRight",
        "description": "Sets the color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user [[dialog]] to color.\n<br>\nColour is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "'''lbSetColorRight'''  [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetCurSel",
        "description": "Selects the item with the given index in the listbox, listnbox, combobox, xcombobox, xlistbox<br>",
        "introduced_version": null,
        "syntax": "'''lbSetCurSel''' [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetData",
        "description": "Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]] to the given data.",
        "introduced_version": null,
        "syntax": "'''lbSetData''' [idc, index, data]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "data",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "data",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetPicture",
        "description": "Sets the picture in the item (left) with the given index of the listbox or combobox with id idc of the topmost user [[dialog]]. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).<br>\nIn Arma 3 it might be necessary to set the color of the picture as well with [[lbSetPictureColor]] as default [0,0,0,0] color makes picture invisible.",
        "introduced_version": null,
        "syntax": "'''lbSetPicture''' [idc, index, name]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetPictureColor",
        "description": "Sets the color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
        "introduced_version": null,
        "syntax": "'''lbSetPictureColor''' [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetPictureColorDisabled",
        "description": "Sets the disabled color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
        "introduced_version": null,
        "syntax": "'''lbSetPictureColorDisabled''' [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetPictureColorSelected",
        "description": "Sets the selected color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
        "introduced_version": null,
        "syntax": "'''lbSetPictureColorSelected''' [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetPictureRight",
        "description": "Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]]. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory).<br>\nIn Arma 3 it might be necessary to set the color of the picture as well with [[lbSetPictureRightColor]] as default [0,0,0,0] color makes picture invisible.",
        "introduced_version": null,
        "syntax": "'''lbSetPictureRight''' [idc, index, name]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetPictureRightColor",
        "description": "Sets the color of the second (right aligned) picture of the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
        "introduced_version": null,
        "syntax": "'''lbSetPictureRightColor''' [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetPictureRightColorDisabled",
        "description": "Sets the disabled color of second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
        "introduced_version": null,
        "syntax": "'''lbSetPictureRightColorDisabled''' [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetPictureRightColorSelected",
        "description": "Sets the selected color of the second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format [[Color|Color (RGBA)]]. Color which consists from only zeros means disable this override.",
        "introduced_version": null,
        "syntax": "'''lbSetPictureRightColorSelected''' [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetSelectColor",
        "description": "Sets the select color of the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]] to color.\n<br>\nColour is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "[[lbSetSelectColor]]  [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetSelectColorRight",
        "description": "Sets the select color of the of the secondary text (right aligned) of the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]] to color.\n<br>\nColour is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "[[lbSetSelectColorRight]]  [idc, index, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetSelected",
        "description": "Sets the selection state of the given row of the given listbox of style LB_MULTI. The command has to be called for every row which is needed to be selected in multi-selection listbox. For single selection listbox use [[lbSetCurSel]] instead.",
        "introduced_version": null,
        "syntax": "control '''lbSetSelected''' [index, selected]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "selected",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetText",
        "description": "Sets the text on the left side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.",
        "introduced_version": null,
        "syntax": "'''lbSetText''' [idc, index, name]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetTextRight",
        "description": "Sets the text on the right side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.",
        "introduced_version": null,
        "syntax": "control '''lbSetTextRight''' [index, name]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetTooltip",
        "description": "Sets tooltip for item with given index of the listbox or combobox with id idc of the topmost user dialog to the given data.",
        "introduced_version": null,
        "syntax": "'''lbSetTooltip''' [idc, index, tooltip]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "tooltip",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "tooltip",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSetValue",
        "description": "Sets the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]] to the given value.",
        "introduced_version": null,
        "syntax": "'''lbSetValue''' [idc, index, value]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSize",
        "description": "Return number of items of listbox or combobox with id idc of topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''lbSize''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "lbSort",
        "description": "Sorts listbox entries alphabetically ascending by their [[lbText]].",
        "introduced_version": null,
        "syntax": "[[lbSort]] control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "sortOrder",
                "description": "\"ASC\": ascending, \"DESC\": descending",
                "sqf_type": "String"
            },
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "sortOrder",
                "description": "\"ASC\": ascending, \"DESC\": descending",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbSortByValue",
        "description": "Sorts the ListBox entries by [[lbValue]]. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value.",
        "introduced_version": null,
        "syntax": "'''lbSortByValue''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lbText",
        "description": "Returns the shown text in the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "[[lbText]] [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lbTextRight",
        "description": "Returns the shown right text in the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''lbTextRight''' [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lbValue",
        "description": "Returns the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''lbValue''' [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "leader",
        "description": "Returns the group leader for the given unit or group. For dead units, objNull is returned.",
        "introduced_version": null,
        "syntax": "[[Object]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "leaderboardDeInit",
        "description": "Deletes internal class for the leaderboard with given name. Returns true if the board has been found and deinitialized.",
        "introduced_version": null,
        "syntax": "[[leaderboardDeInit]] boardName",
        "parameters": [
            {
                "name": "boardName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "leaderboardGetRows",
        "description": "Returns an array with values for the given leaderboard, the array is in format:",
        "introduced_version": null,
        "syntax": "[[leaderboardGetRows]] boardName",
        "parameters": [
            {
                "name": "boardName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "leaderboardInit",
        "description": "Initialize the leaderboard structure for board with given name. Returns true if board is already initialized.",
        "introduced_version": null,
        "syntax": "[[leaderboardInit]] boardName",
        "parameters": [
            {
                "name": "boardName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "leaderboardRequestRowsFriends",
        "description": "Requests given leaderboard to download friends rows from the given leaderboard",
        "introduced_version": null,
        "syntax": "[[leaderboardRequestRowsFriends]]  boardName",
        "parameters": [
            {
                "name": "boardName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "leaderboardRequestRowsGlobal",
        "description": "Requests given leaderboard to download values from global table.",
        "introduced_version": null,
        "syntax": "[[leaderboardRequestRowsGlobal]] [leaderboard, offset, rows]",
        "parameters": [
            {
                "name": "leaderboard",
                "description": "Name of the leaderboard",
                "sqf_type": "String"
            },
            {
                "name": "offset",
                "description": "Defines how many rows are skipped",
                "sqf_type": "Number"
            },
            {
                "name": "rows",
                "description": "Defines how many rows are requested",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "leaderboardRequestRowsGlobalAroundUser",
        "description": "Requests given leaderboard to download values around the user position in the table.",
        "introduced_version": null,
        "syntax": "[[leaderboardRequestRowsGlobalAroundUser]] [leaderboard, offset, rows]",
        "parameters": [
            {
                "name": "leaderboard",
                "description": "Name of the leaderboard",
                "sqf_type": "String"
            },
            {
                "name": "offset",
                "description": "Offset from user position.",
                "sqf_type": "Number"
            },
            {
                "name": "rows",
                "description": "Defines how many rows are requested",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "leaderboardState",
        "description": "returns state of the board with given name. 0: Busy (async. operation in progress); 1: Async. operation ended with success; 2: Async. operation ended with error; 3: Invalid board (bad board name, not initialized etc.).",
        "introduced_version": null,
        "syntax": "'''leaderboardState''' boardname",
        "parameters": [
            {
                "name": "boardname",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "leaderboardsRequestUploadScore",
        "description": "Starts async. operation to upload score to board with given name, value always overwrite the current value in the board. The details array is optional. The board has to be initialized before the call.",
        "introduced_version": null,
        "syntax": "'''leaderboardsRequestUploadScore''' [boardName, score, [details]]",
        "parameters": [
            {
                "name": "boardname",
                "description": "-",
                "sqf_type": "String"
            },
            {
                "name": "score",
                "description": "-",
                "sqf_type": "Number"
            },
            {
                "name": "details",
                "description": "(optional) -",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "leaderboardsRequestUploadScoreKeepBest",
        "description": "Starts async. operation to upload score to board with given name, value is only stored to board if it is better than one already in the board. The details array is optional. The board has to be initialized before the call.",
        "introduced_version": null,
        "syntax": "'''leaderboardsRequestUploadScoreKeepBest''' [boardName, score, [details]]",
        "parameters": [
            {
                "name": "boardname",
                "description": "-",
                "sqf_type": "String"
            },
            {
                "name": "score",
                "description": "-",
                "sqf_type": "Number"
            },
            {
                "name": "details",
                "description": "(optional) -",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "leaveVehicle",
        "description": "Ceases the using of the vehicle by a group and unassigns vehicle from the group. If the argument is a single unit, the vehicle will be unassigned from unit's group. After vehicle is unassigned from the group, each individual crew member then unassigned from the vehicle.\n<br><br>In short the command could be hypothetically presented as:<br>\n<tt>[[leaveVehicle]]",
        "introduced_version": null,
        "syntax": "group '''leaveVehicle''' vehicle",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Object]], in which case, object's [[Group]] is used",
                "sqf_type": "Group"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "libraryCredits",
        "description": "Returns the credits for the libraries used by the game.",
        "introduced_version": null,
        "syntax": "'''libraryCredits'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - [array1, array2, (..), arrayN] all under the form [libraryName, credits]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "libraryDisclaimers",
        "description": "Returns the library disclaimers.",
        "introduced_version": null,
        "syntax": "'''libraryDisclaimers'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - [array1] - ''only has one element at the moment, but this number might grow''",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lifeState",
        "description": "Returns the life state of the given unit.\n{",
        "introduced_version": null,
        "syntax": "[[lifeState]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lightAttachObject",
        "description": "Attach light to given object at given position on object.",
        "introduced_version": null,
        "syntax": "light [[lightAttachObject]] [object, position]",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lightDetachObject",
        "description": "Detach light from object.",
        "introduced_version": null,
        "syntax": "[[lightDetachObject]] light",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lightIsOn",
        "description": "Check if lampost is on (shining).",
        "introduced_version": null,
        "syntax": "[[lightIsOn]] lamppost",
        "parameters": [
            {
                "name": "lamppost",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] - Can be one of:\n* '''\"ON\"''' - light is on\n* '''\"OFF\"''' - light is off\n* '''\"AUTO\"''' - applicable only to the light of type \"StreetLamp\" and is only on during the night.\n* '''\"ERROR\"''' - if command fails",
            "sqf_type": "String"
        }
    },
    {
        "name": "lightnings",
        "description": "Return the current lightnings value.",
        "introduced_version": null,
        "syntax": "'''lightnings'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "limitSpeed",
        "description": "Limit speed of given vehicle or person to given value (in km/h).",
        "introduced_version": null,
        "syntax": "objectName '''limitSpeed''' speed",
        "parameters": [
            {
                "name": "objectName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "speed",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lineBreak",
        "description": "Creates a structured text containing a line break.",
        "introduced_version": null,
        "syntax": "[[lineBreak]]",
        "parameters": [],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "lineIntersects",
        "description": "Checks for object intersection with a virtual line between two positions. Returns true if intersects with an object.\n\n<br><br>'''NOTE:''' Doesn't work under water. Max harcoded distance is 1000m.",
        "introduced_version": null,
        "syntax": "'''lineIntersects''' [begPos, endPos, objIgnore1, objIgnore2]",
        "parameters": [
            {
                "name": "begPos",
                "description": "",
                "sqf_type": "PositionASL"
            },
            {
                "name": "endPos",
                "description": "",
                "sqf_type": "PositionASL"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - true if intersection",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "lineIntersectsObjs",
        "description": "Returns list of objects intersected by given line from ''begPos'' to ''endPos''.",
        "introduced_version": null,
        "syntax": "'''lineIntersectsObjs''' [begPos, endPos, withObj, ignoreObj, sortByDistance, flags]",
        "parameters": [
            {
                "name": "begPos",
                "description": "virtual line start",
                "sqf_type": "PositionASL"
            },
            {
                "name": "endPos",
                "description": "virtual line end",
                "sqf_type": "PositionASL"
            },
            {
                "name": "withObj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "ignoreObj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "sortByDistance",
                "description": "[[true]]: furthest object first, closest object last; [[false]]: unsorted",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object|Objects]] - intersecting objects",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lineIntersectsSurfaces",
        "description": "Returns list of intersections with surfaces from ''begPosASL'' to ''endPosASL''. If there is ground intersection, it is also included. Works on units. Works underwater. Doesn't return intersection with sea surface. Hardcoded max distance: 5000m. By default, for speed purposes, command will return only 1st intersection with unique objects. Since Arma 3 v1.69.140138, this could be tweaked with an optional param.",
        "introduced_version": null,
        "syntax": "'''lineIntersectsSurfaces''' [begPosASL, endPosASL, ignoreObj1, ignoreObj2, sortMode, maxResults, LOD1, LOD2, returnUnique]",
        "parameters": [
            {
                "name": "begPosASL",
                "description": "virtual line start",
                "sqf_type": "PositionASL"
            },
            {
                "name": "endPosASL",
                "description": "virtual line end",
                "sqf_type": "PositionASL"
            }
        ],
        "returns": {
            "description": "[[Array]] of intersections in format [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lineIntersectsWith",
        "description": "Returns objects intersecting with the virtual line from ''begPos'' to ''endPos''. By default resulting array of intersecting objects is unsorted. To sort by distance set ''sortByDistance'' param to [[true]]. <br><br>",
        "introduced_version": null,
        "syntax": "'''lineIntersectsWith''' [begPos, endPos, objIgnore1, objIgnore2, sortByDistance]",
        "parameters": [
            {
                "name": "begPos",
                "description": "virtual line start",
                "sqf_type": "PositionASL"
            },
            {
                "name": "endPos",
                "description": "virtual line end",
                "sqf_type": "PositionASL"
            }
        ],
        "returns": {
            "description": "[[Array]] - intersecting objects",
            "sqf_type": "Array"
        }
    },
    {
        "name": "linearConversion",
        "description": "Converts given value from given \"from\" range to wanted \"to\" range. If clipping is set to [[true]], the resulting value is guaranteed to be within \"to\" range no matter what.<br><br> Say given range is 0 to 1 and wanted range is 0 to 100 (percent calculation). Given value 0.55 then will be <br><tt>[[linearConversion]] [0,1,0.55,0,100]; //55</tt><br> but if given value is 1.1<br><tt>[[linearConversion]] [0,1,1.1,0,100,[[false]]]; //110</tt><br> or if clipping is [[true]]  <br><tt>[[linearConversion]] [0,1,1.1,0,100,[[true]]]; //100</tt>",
        "introduced_version": null,
        "syntax": "'''linearConversion''' [minFrom, maxFrom, value, minTo, maxTo, clip]",
        "parameters": [
            {
                "name": "minFrom",
                "description": "start \"from\" range",
                "sqf_type": "Number"
            },
            {
                "name": "maxFrom",
                "description": "end \"from\" range",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "given value from \"from\" range",
                "sqf_type": "Number"
            },
            {
                "name": "minTo",
                "description": "start \"to\" range",
                "sqf_type": "Number"
            },
            {
                "name": "maxTo",
                "description": "end \"to\" range",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] - respectful value from \"to\" range",
            "sqf_type": "Number"
        }
    },
    {
        "name": "linkItem",
        "description": "Create and assign item to the correct slot. If there is an item in the targeted slot, it gets replaced.",
        "introduced_version": null,
        "syntax": "unit '''linkItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "list",
        "description": "List of units that would activate given [[Triggers|Trigger]].\n\nIt returns nothing before the simulation started, i.e. in (undelayed) init.sqf files. Returns a '''[[Array#Array_references|pointer]]''' to the trigger's list after the simulation started.<br>Since this is just a ''reference'' this means that the value in your local variable will change as the content of the trigger area changes. To permanently copy the returned list to a different variable, use _mylist",
        "introduced_version": null,
        "syntax": "[[Array]]",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] or [[Nothing]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "listObjects",
        "description": "Return the list of all objects of given type.",
        "introduced_version": null,
        "syntax": "map '''listObjects''' type",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "type",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "listRemoteTargets",
        "description": "Return list of datalink targets and time for which they will be/were known",
        "introduced_version": null,
        "syntax": "'''listRemoteTargets''' side",
        "parameters": [
            {
                "name": "side",
                "description": "side",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Array]] containing [target name, last detected time]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "listVehicleSensors",
        "description": "Returns an array of the sensors in the given vehicle's config (configfile >> CfgVehicles >> vehicle >> Components >> SensorsManagerComponent >> Components).",
        "introduced_version": null,
        "syntax": "'''listVehicleSensors''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lnbAddArray",
        "description": "Adds list of rows of strings.",
        "introduced_version": null,
        "syntax": "'''lnbAddArray''' [idc, [[[text,text],[value,..],[data,..]],[[text,text],[value,..],[data,..]],]]",
        "parameters": [
            {
                "name": "idc",
                "description": "or [[Control]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] - index",
            "sqf_type": "Number"
        }
    },
    {
        "name": "lnbAddColumn",
        "description": "Adds an column at given position. It returns the index of the newly added column.",
        "introduced_version": null,
        "syntax": "_ctrl [[lnbAddColumn]] position",
        "parameters": [
            {
                "name": "position",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] or [[nil]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "lnbAddRow",
        "description": "Adds a row of strings.",
        "introduced_version": null,
        "syntax": "[[lnbAddRow]] [idc, data]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "data",
                "description": "of [[String]]s",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "data",
                "description": "of [[String]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]] - Row index",
            "sqf_type": "Number"
        }
    },
    {
        "name": "lnbClear",
        "description": "Clears all items in the given listbox or combobox.",
        "introduced_version": null,
        "syntax": "[[lnbClear]] idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbColor",
        "description": "Returns the text color of the item with the given position of the 2D listbox. The color is returned in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "[[lnbColor]] [idc, [row, column]]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lnbColorRight",
        "description": "Returns the right color of given row.",
        "introduced_version": null,
        "syntax": "[[lnbColorRight]] [idc, [row, column]]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "lnbCurSelRow",
        "description": "Returns the index of the selected row id 2D listbox.",
        "introduced_version": null,
        "syntax": "[[lnbCurSelRow]] idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "lnbData",
        "description": "Returns the additional text (invisible) in an item with the given position of the 2D listbox.",
        "introduced_version": null,
        "syntax": "[[lnbData]] [idc, [row, column]]",
        "parameters": [
            {
                "name": "idc",
                "description": "or [[Control]]",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lnbDeleteColumn",
        "description": "Removes column with given index from ListNBox control.",
        "introduced_version": null,
        "syntax": "[[lnbDeleteColumn]] [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbDeleteRow",
        "description": "Removes row with the given index from the given listbox or combobox.",
        "introduced_version": null,
        "syntax": "_ctrl [[lnbDeleteRow]] row",
        "parameters": [
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbGetColumnsPosition",
        "description": "Returns relative screen X of ListNBox control columns position [0.1,0.3,0.6...]. Use [[lnbSetColumnsPos]] to set positions.",
        "introduced_version": null,
        "syntax": "[[lnbGetColumnsPosition]] _ctrl",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lnbPicture",
        "description": "Returns the picture name or path of the item with the given position of the 2D listbox.",
        "introduced_version": null,
        "syntax": "'''lnbPicture''' [idc, [row, column]]",
        "parameters": [
            {
                "name": "idc",
                "description": "Number of [[Control]]",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "Index of Row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of Column",
                "sqf_type": "Number"
            },
            {
                "name": "Control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "Index of Row in given Control",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of Column in given Control",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lnbPictureRight",
        "description": "Returns the right picture of given row. The ''column'' parameter does not matter.",
        "introduced_version": null,
        "syntax": "[[lnbPictureRight]] [idc, [row, column]]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "lnbSetColor",
        "description": "Sets the color of the item with the given position of the 2D listbox. Color is in format [[Color|Color (RGBA)]].",
        "introduced_version": null,
        "syntax": "[[lnbSetColor]] [idc, [row, column], color]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "in format [r,g,b,a]",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "in format [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSetColorRight",
        "description": "Sets the right color.",
        "introduced_version": null,
        "syntax": "[[lnbSetColorRight]] [idc, [row, column], color]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "Color RGBA",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "Color RGBA",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "lnbSetColumnsPos",
        "description": "Sets relative screen X for ListNBox control columns positions. Setter for [[lnbGetColumnsPosition]].",
        "introduced_version": null,
        "syntax": "[[lnbSetColumnsPos]] [idc, positions]",
        "parameters": [
            {
                "name": "idc",
                "description": "idc of the control",
                "sqf_type": "Number"
            },
            {
                "name": "positions",
                "description": "positions of the columns",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "lnb control",
                "sqf_type": "Control"
            },
            {
                "name": "positions",
                "description": "positions of the columns",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSetCurSelRow",
        "description": "Selects the row with the given index of the 2D listbox.",
        "introduced_version": null,
        "syntax": "[[lnbSetCurSelRow]] [idc, index]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSetData",
        "description": "Sets the additional text (invisible) on the item with the given position of the 2D listbox.",
        "introduced_version": null,
        "syntax": "[[lnbSetData]] [idc, [row, column], data]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "data",
                "description": "The invisible text to add",
                "sqf_type": "String"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "data",
                "description": "The invisible text to add",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSetPicture",
        "description": "* Sets the picture in the item with the given position of the 2D listbox.\n* Name is the picture name.\n* The picture is searched in the mission, directory, the dtaExt subdirectory of the campaign directory, and the dtaExt directory and the data bank (or directory).",
        "introduced_version": null,
        "syntax": "[[lnbSetPicture]] [idc, [row, column], picturePathOrName]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "picturePathOrName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "Row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "Column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "picturePathOrName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSetPictureColor",
        "description": "Sets the cell picture's colour.",
        "introduced_version": null,
        "syntax": "[[lnbSetPictureColor]] [idc, [row, column], colour]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "lnbSetPictureColorSelected",
        "description": "Sets the cell picture's colour on cell selection.",
        "introduced_version": null,
        "syntax": "[[lnbSetPictureColorSelected]] [idc, [row, column], colour]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "0-based index (first row is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "0-based index (first row is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "lnbSetPictureRight",
        "description": "Sets the cell's right-picture. The picture is set to the end of the '''row''', the ''column'' parameter does not matter.",
        "introduced_version": null,
        "syntax": "[[lnbSetPictureRight]] [idc, [row, column], path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "0-based index (first row is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "the picture's file path",
                "sqf_type": "String"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "0-based index (first row is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "the picture's file path",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSetText",
        "description": "Sets the text in the item with the given position of the 2D listbox.",
        "introduced_version": null,
        "syntax": "[[lnbSetText]] [idc, [row, column], data]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "data",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "data",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSetTextRight",
        "description": "Sets cell's right-aligned text. Does not replace [[lnbText|cell's text]].",
        "introduced_version": null,
        "syntax": "[[lnbSetTextRight]] [idc, [row, column], text]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "0-based index (first column is 0, second is 1, etc)",
                "sqf_type": "Number"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "lnbSetTooltip",
        "description": "Sets tooltip on the item with the given row and column of the 2D listbox.<br><br>",
        "introduced_version": null,
        "syntax": "[[lnbSetTooltip]] [idc, [row, column], text]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "pretty much always 0, see description note",
                "sqf_type": "Number"
            },
            {
                "name": "text",
                "description": "tooltip to add",
                "sqf_type": "String"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "pretty much always 0, see description note",
                "sqf_type": "Number"
            },
            {
                "name": "text",
                "description": "tooltip to add",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSetValue",
        "description": "Sets the additional '''integer''' value in the item with the position index of the 2D listbox.",
        "introduced_version": null,
        "syntax": "[[lnbSetValue]] [idc, [row, column], value]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSize",
        "description": "Returns size of 2D listbox or combobox as [rows, columns].",
        "introduced_version": null,
        "syntax": "[[lnbSize]] controlOrIDC",
        "parameters": [
            {
                "name": "controlOrIDC",
                "description": "or [[Number]] - Control or control's IDC",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]] - in format [rows, columns]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lnbSort",
        "description": "Sorts given multicolumn listbox by [[lnbText]] in given column in ascending or descending order.",
        "introduced_version": null,
        "syntax": "'''lnbSort''' [idc, column, reversed]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbSortByValue",
        "description": "Sorts given multicolumn listbox by [[lnbValue]] in given column in ascending or descending order.",
        "introduced_version": null,
        "syntax": "'''lnbSortByValue''' [idc, column, reversed]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lnbText",
        "description": "Returns the shown text in the item with the given position of the given 2D listbox.",
        "introduced_version": null,
        "syntax": "control [[lnbText]] [row,column]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "lnbValue",
        "description": "Returns the additional integer value in the item with the given position of the 2D listbox.",
        "introduced_version": null,
        "syntax": "[[lnbValue]] [idc, [row, column]]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "load",
        "description": "Returns current sum of mass from items stored in all unit's containers. Load is calculated by the following formula:\n<code>_loadPlayer",
        "introduced_version": null,
        "syntax": "'''load''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "loadAbs",
        "description": "Returns current sum of mass from items stored in all unit's containers, linked items and weapons.",
        "introduced_version": null,
        "syntax": "'''loadAbs''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "loadBackpack",
        "description": "Returns current percentage of mass from items stored in a backpack relative to the maximum capacity of the backpack.<br>\nIt is equivalent to this formula:\n<code>_loadBackpack",
        "introduced_version": null,
        "syntax": "[[loadBackpack]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "loadFile",
        "description": "Return content of given filename as string. If you plan to [[compile]] said string, be aware that the file shouldn't contain comments or [[compile]] will throw an error. If there are comments, use [[preprocessFile]]/[[preprocessFileLineNumbers]] instead. <br><br>",
        "introduced_version": null,
        "syntax": "[[loadFile]] fileName",
        "parameters": [
            {
                "name": "fileName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "loadGame",
        "description": "Loads game from the last autosave made with [[saveGame]]. If no autosave exists, restarts the mission. When used in campaign it will also deduct 1 life, defined in:<br>\n<tt>[[campaignConfigFile]] / \"Campaign\" / &lt;battle&gt; / &lt;mission&gt; / \"lives\"</tt><br><br>",
        "introduced_version": null,
        "syntax": "'''loadGame'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "loadIdentity",
        "description": "Loads person's identity from [[Objects.sav]] file in campaign directory (from entry name).",
        "introduced_version": null,
        "syntax": "person '''loadIdentity''' name",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "loadMagazine",
        "description": "Initiates the loading action on given weapon of the turret of a transport. So the new magazine is not available instantly, yet according to the reloadTime.<br>\nThe turret has to be manned. One can also change the magazine if its respective weapon is not selected.",
        "introduced_version": null,
        "syntax": "transport [[loadMagazine]] [turretPath, weaponName, magazineName]",
        "parameters": [
            {
                "name": "transport",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "weaponName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "magazineName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "loadOverlay",
        "description": "Creates the load overlay dialog for the specified type of overlay.",
        "introduced_version": null,
        "syntax": "map '''loadOverlay''' config",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "config",
                "description": "-",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "loadStatus",
        "description": "Loads object's properties from [[Objects.sav]] file in campaign directory (from entry name).",
        "introduced_version": null,
        "syntax": "obj '''loadStatus''' entryName",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "entryName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "loadUniform",
        "description": "Returns current percentage of mass from items stored in a uniform relative to the maximum capacity of the uniform. <br>\nIt is equivalent to this formula:\n<code>_loadUniform",
        "introduced_version": null,
        "syntax": "'''loadUniform''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "loadVest",
        "description": "Returns current percentage of mass from items stored in a vest relative to the maximum capacity of the vest. <br>\nIt is equivalent to this formula:\n<code>_loadVest",
        "introduced_version": null,
        "syntax": "'''loadVest''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "local",
        "description": "Check if given unit is local on the computer in Multiplayer games - see [[Multiplayer Scripting#Locality|Multiplayer Scripting - Locality]].<br>\nThis can be used to determine on which computer some code must be run. In Single player all objects are local.",
        "introduced_version": null,
        "syntax": "[[local]] object",
        "parameters": [
            {
                "name": "object",
                "description": "or [[Group]] (since Arma 3 v1.31.127204)",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "localize",
        "description": "Used to internationalise text messages. A string is returned from [[Stringtable.csv]] (or [[Stringtable.xml]]) which corresponds to the ''stringName''.<br>\nIf the key couldn't be found, an empty string (",
        "introduced_version": null,
        "syntax": "[[localize]] stringName",
        "parameters": [
            {
                "name": "stringName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]] - text found in corresponding entry in stringtable file",
            "sqf_type": "String"
        }
    },
    {
        "name": "locationNull",
        "description": "A non-existing [[Location]]. To compare non-existent locations use [[isNull]] or [[isEqualTo]]:\n* <tt>[[locationNull]]",
        "introduced_version": null,
        "syntax": "'''locationNull'''",
        "parameters": [],
        "returns": {
            "description": "[[Location]]",
            "sqf_type": "Location"
        }
    },
    {
        "name": "locationPosition",
        "description": "Returns the [[Position|position]] of a location. If the location is attached to an object, that object's position is returned.",
        "introduced_version": null,
        "syntax": "'''locationPosition''' location",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [x,y,z], where z is <tt>-1 * [[getTerrainHeightASL]]</tt> at the location",
            "sqf_type": "Array"
        }
    },
    {
        "name": "lock",
        "description": "Lock vehicle (disable mounting / dismounting) for player.\nThis command will remove user get in/get out actions but will not stop player getting into or out of vehicle via script commands (e.g [[moveInCargo]]).<br><br>",
        "introduced_version": null,
        "syntax": "vehicleName [[lock]] locked",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "locked",
                "description": "[[true]] to lock, [[false]] to unlock",
                "sqf_type": "Boolean"
            },
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lockCameraTo",
        "description": "Lock/Unlock stabilized camera (in vanilla used currently only for UAVs) to target.",
        "introduced_version": null,
        "syntax": "vehicle [[lockCameraTo]] [target, turretPath]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "UAV",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "or [[PositionASL]] - use [[objNull]] for unlocking",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "path to the turret with required camera",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lockCargo",
        "description": "Lock all cargo positions of a vehicle or lock by index.\nThis command will remove user \"get in\" action (not get out) but will also stop player getting into vehicle via script commands (e.g [[moveInCargo]]) unlike [[lock]] command.",
        "introduced_version": null,
        "syntax": "vehicle [[lockCargo]] lock",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "lock",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "lock",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lockDriver",
        "description": "Lock the driver position of the vehicle. This command must be executed where vehicle is [[local]]. This command will remove user get in action (not get out) but will also stop player getting into vehicle via script commands unlike [[lock]] command",
        "introduced_version": null,
        "syntax": "vehicle '''lockDriver''' lock",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "lock",
                "description": "-",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lockIdentity",
        "description": "Locks the identity of a person. This will disable default identity.",
        "introduced_version": null,
        "syntax": "'''lockIdentity''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]], if it was applied",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "lockTurret",
        "description": "Lock the gunner position of the vehicle turret. This command must be executed where vehicle is [[local]]. This command will remove user get in action (not get out) but will also stop player getting into vehicle via script commands unlike [[lock]] command",
        "introduced_version": null,
        "syntax": "vehicle '''lockTurret''' [turret path,lock]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lockWP",
        "description": "Disable switching to next waypoint (current waypoint will never complete while lockwp is used). Sometimes used during cut-scenes.",
        "introduced_version": null,
        "syntax": "groupName '''lockWP''' lock",
        "parameters": [
            {
                "name": "groupName",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "lock",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "locked",
        "description": "Check if [[vehicle]] is locked. If it is locked, [[Object#Person|Persons]] cannot mount / dismount without order.",
        "introduced_version": null,
        "syntax": "[[locked]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "* [[Number]] - since",
            "sqf_type": null
        }
    },
    {
        "name": "lockedCargo",
        "description": "Check whether cargo position of the vehicle is locked.",
        "introduced_version": null,
        "syntax": "vehicle '''lockedCargo''' cargoIndex",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "cargoIndex",
                "description": "-",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "lockedDriver",
        "description": "Check whether driver position of the vehicle turret is locked.",
        "introduced_version": null,
        "syntax": "'''lockedDriver''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "lockedTurret",
        "description": "Check whether gunner position of the vehicle turret is locked.",
        "introduced_version": null,
        "syntax": "vehicle '''lockedTurret''' turretPath",
        "parameters": [
            {
                "name": "vehicle",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "-",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "log",
        "description": "Base-10 logarithm of x.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "logEntities",
        "description": "Creates a log file containing the list of all game entities in scene. \n<br>File is created in the same directory as [[Crash_Files|.rpt file]]. \n<br>Special: BattlEye's RCON variant of this command is #logEntities (see also [[Multiplayer_Server_Commands]])",
        "introduced_version": null,
        "syntax": "'''logEntities'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "logNetwork",
        "description": "Registers new log file recording a network traffic and returns handle of the log. The log file is saved inside the Arma 3 root folder.",
        "introduced_version": null,
        "syntax": "[[logNetwork]] logFile",
        "parameters": [
            {
                "name": "logFile",
                "description": "Where to store the log",
                "sqf_type": "String"
            },
            {
                "name": "filter",
                "description": "of [[String|strings]] - ????",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]] - handle for the logging",
            "sqf_type": "Number"
        }
    },
    {
        "name": "logNetworkTerminate",
        "description": "Terminates a network log file started with [[logNetwork]] with the given handle",
        "introduced_version": null,
        "syntax": "'''logNetworkTerminate''' handle",
        "parameters": [
            {
                "name": "handle",
                "description": "handle to terminate (created with [[logNetwork]])",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lookAt",
        "description": "Control what the unit(s) is/are looking at (target or [[Position]]). If target is used, it will get revealed fully.",
        "introduced_version": null,
        "syntax": "unit(s) '''lookAt''' position",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "lookAtPos",
        "description": "Point the camera and center the map on the position.",
        "introduced_version": null,
        "syntax": "map '''lookAtPos''' position",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "position",
                "description": "-",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "magazineCargo",
        "description": "Get array with magazines from ammo box (or any general weapon holder container).",
        "introduced_version": null,
        "syntax": "'''magazineCargo''' object",
        "parameters": [
            {
                "name": "object",
                "description": "Vehicle or ammo box",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - Format: [\"MagType1\",\"MagType1\",\"MagType2\"...]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazineTurretAmmo",
        "description": "Returns ammo count of given type from given turret",
        "introduced_version": null,
        "syntax": "vehicle [[magazineTurretAmmo]] [magazineClass, turretPath]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "magazines",
        "description": "Returns array of type names of all vehicle's magazines.\n\nWhen applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use [[currentMagazine]] to get this information for a currently loaded magazine.",
        "introduced_version": null,
        "syntax": "'''magazines''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "unit or vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "unit or vehicle.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesAllTurrets",
        "description": "Returns all magazines (including empty) from all vehicle turrets (including driver turret [-1]) and their ammo counts.",
        "introduced_version": null,
        "syntax": "'''magazinesAllTurrets''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle with turrets",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - in the following format: [",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesAmmo",
        "description": "Returns array of arrays of all vehicle's magazines and their ammo count (also works on supply boxes). When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use [[magazinesAmmoFull]] to return all magazines.\n\n<br><br>'''Output format''':\n\n<br>[[magazine1],[magazine2],[magazine3]...[magazineN]]\n\n<br><br>'''Magazine format''':\n\n<br>0: Magazine class name\n\n<br>1: Magazine current ammo count",
        "introduced_version": null,
        "syntax": "[[magazinesAmmo]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "unit or vehicle or container. When transport is supplied, the command returns vehicle's magazines not the cargo. When container is supplied, the command behaves identically to [[magazinesAmmoCargo]]",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "unit or vehicle.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesAmmoCargo",
        "description": "Returns an array of subarrays with the type names and ammo left of all the vehicle's cargo or container magazines.",
        "introduced_version": null,
        "syntax": "'''magazinesAmmoCargo''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesAmmoFull",
        "description": "Returns array of arrays of all vehicle's magazines with extended information about them. Magazine type is available for loaded magazines only, otherwise it is -1.\n\n\n<br><br>'''Output format''':\n<br>[[magazine1],[magazine2],[magazine3]...[magazineN]]\n\n<br><br>'''Magazine format''':\n<br>0: Magazine class name\n<br>1: Magazine current ammo count\n<br>2: Magazine state (true - loaded, false - not loaded)\n<br>3: Magazine type (-1 - n/a, 0 - grenade, 1 - primary weapon mag, 2 - handgun mag, 4 - secondary weapon mag, 4096 - binocular weapon mag, 65536 - vehicle mag)\n<br>4: Magazine location (\"Vest\", \"Uniform\", \"Backpack\", \"\") or corresponding [[currentMuzzle]] <br><br>",
        "introduced_version": null,
        "syntax": "[[magazinesAmmoFull]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "unit or vehicle.",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "unit or vehicle.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesDetail",
        "description": "Returns an array of strings with description of all vehicle's magazines, their ammo count (current/default) and their ids. \n\nWhen applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use [[currentMagazineDetail]] to get this information for a currently loaded magazine.",
        "introduced_version": null,
        "syntax": "'''magazinesDetail''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "unit or vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "unit or vehicle.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesDetailBackpack",
        "description": "Returns an array with the type names of all the unit's backpack magazines.",
        "introduced_version": null,
        "syntax": "'''magazinesDetailBackpack''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unit",
                "description": "unit",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesDetailUniform",
        "description": "Returns an array with the type names of all the unit's uniform magazines.",
        "introduced_version": null,
        "syntax": "'''magazinesDetailUniform''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unit",
                "description": "unit",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesDetailVest",
        "description": "Returns an array with the type names of all the unit's vest magazines.",
        "introduced_version": null,
        "syntax": "'''magazinesDetailVest''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unit",
                "description": "unit",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "magazinesTurret",
        "description": "Returns all magazines of given turret. Use turret path [-1] for driver's turret. Alternatively, use [[magazinesAllTurrets]].",
        "introduced_version": null,
        "syntax": "vehicle '''magazinesTurret''' turretPath",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "turret path",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String|Strings]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "mapAnimAdd",
        "description": "Add next frame to map animation.",
        "introduced_version": null,
        "syntax": "[[mapAnimAdd]] [time, zoom, position]",
        "parameters": [
            {
                "name": "time",
                "description": "animation duration in seconds",
                "sqf_type": "Number"
            },
            {
                "name": "zoom",
                "description": "range from 0.01 (max. zoom) to 1 (zoomed out)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "mapAnimClear",
        "description": "Clear map animation.",
        "introduced_version": null,
        "syntax": "'''mapAnimClear'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "mapAnimCommit",
        "description": "Play map animation.",
        "introduced_version": null,
        "syntax": "'''mapAnimCommit'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "mapAnimDone",
        "description": "Check if map animation is finished.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "mapCenterOnCamera",
        "description": "<tt>ctrl [[mapCenterOnCamera]] enable</tt> syntax enables/disables continuous centering of the main map type control on the camera position. Needs to be executed once.<br>\n<tt>[[mapCenterOnCamera]] ctrl</tt> syntax centers mini map type control on camera. The command returns world position of the camera. Needs to be executed each frame (preferably inside onDraw EH).",
        "introduced_version": null,
        "syntax": "mainmap '''mapCenterOnCamera''' enable",
        "parameters": [
            {
                "name": "mainmap",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "minimap",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "mapGridPosition",
        "description": "Returns the map grid position of an object or position.<br>\nThe format is determined by the Grid format specified in the CfgWorlds for the current world. Eg: \"024577\" or \"De82\" or similar.",
        "introduced_version": null,
        "syntax": "[[mapGridPosition]] param",
        "parameters": [
            {
                "name": "param",
                "description": "or [[Position]] - determines reference position",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] - grid position",
            "sqf_type": "String"
        }
    },
    {
        "name": "markAsFinishedOnSteam",
        "description": "Marks current mission as finished on Steam. Returns true if Steam query is successfully started or false otherwise.",
        "introduced_version": null,
        "syntax": "'''markAsFinishedOnSteam'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "markerAlpha",
        "description": "Gets the marker alpha. See [[setMarkerAlpha]].",
        "introduced_version": null,
        "syntax": "'''markerAlpha''' markerName",
        "parameters": [
            {
                "name": "markerName",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "markerBrush",
        "description": "Gets the marker brush. See [[setMarkerBrush]].",
        "introduced_version": null,
        "syntax": "'''markerBrush''' name",
        "parameters": [
            {
                "name": "name",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "markerColor",
        "description": "Returns marker color for given marker. See also [[setMarkerColor]].",
        "introduced_version": null,
        "syntax": "[[markerColor]] markerName",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "markerDir",
        "description": "Get marker direction.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "markerPos",
        "description": "Returns marker position. See also [[setMarkerPos]].",
        "introduced_version": null,
        "syntax": "[[markerPos]] markerName",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "preserveElevation",
                "description": "(Optional, default [[false]])",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [x, y, '''0''']",
            "sqf_type": "Array"
        }
    },
    {
        "name": "markerShape",
        "description": "Gets the marker shape. See [[setMarkerShape]] for a list of strings that can be returned. Possible return values:\n* <tt>\"ICON\"</tt>\n* <tt>\"RECTANGLE\"</tt>\n* <tt>\"ELLIPSE\"</tt>\n* <tt>\"POLYLINE\"</tt>\n* <tt>\"ERROR\"</tt>",
        "introduced_version": null,
        "syntax": "'''markerShape''' name",
        "parameters": [
            {
                "name": "name",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "markerSize",
        "description": "Returns marker size. This command is identical to [[getMarkerSize]].",
        "introduced_version": null,
        "syntax": "'''markerSize''' markerName",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - in format [a-axis, b-axis], where:\n* a-axis: [[Number]] - 1/2 width of marker\n* b-axis: [[Number]] - 1/2 height of marker",
            "sqf_type": "Array"
        }
    },
    {
        "name": "markerText",
        "description": "Get marker text.",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "markerType",
        "description": "Get type of marker. Note: This function is identical to [[getMarkerType]]. See [[cfgMarkers]] for a list of standard markers.",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]. See [[cfgMarkers]].",
            "sqf_type": "String"
        }
    },
    {
        "name": "matrixMultiply",
        "description": "Returns resulting matrix from the [https://en.wikipedia.org/wiki/Matrix_multiplication multiplication] of two matrices. First matrix must be of the size n \u2715 '''k''', while the second must be of the size '''k''' \u2715 m, i.e <tt>columns</tt> matrix1",
        "introduced_version": null,
        "syntax": "matrix1 [[matrixMultiply]] matrix2",
        "parameters": [
            {
                "name": "matrix1",
                "description": "matrix of the size <tt>n</tt>''(rows)'' \u2715 <tt>k</tt>''(columns)''",
                "sqf_type": "Array"
            },
            {
                "name": "matrix2",
                "description": "matrix of the size <tt>k</tt>''(rows)'' \u2715 <tt>m</tt>''(columns)''",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - resulting matrix of the size <tt>n</tt>''(rows)'' \u2715 <tt>m</tt>''(columns)''",
            "sqf_type": "Array"
        }
    },
    {
        "name": "matrixTranspose",
        "description": "Returns [https://en.wikipedia.org/wiki/Transpose transposed] version of the given matrix. The matrix is an [[Array]] of rows. Each row is an [[Array]] of corresponding column values for the row. The minimum number of rows is 1.\n<br><br>\n[[Image:matrixTranspose.jpg|500px]]\n<br><br>",
        "introduced_version": null,
        "syntax": "[[matrixTranspose]] matrix",
        "parameters": [
            {
                "name": "matrix",
                "description": "given matrix",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - transposed matrix",
            "sqf_type": "Array"
        }
    },
    {
        "name": "max",
        "description": "The greater of a,b",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "a",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "b",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "members",
        "description": "Return a list of members in given team.",
        "introduced_version": null,
        "syntax": "'''members''' team",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "menuAction",
        "description": "Returns action stored in item on given path in [[CT_MENU_STRIP]] control.",
        "introduced_version": null,
        "syntax": "[[menuAction]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]] - Action",
            "sqf_type": "String"
        }
    },
    {
        "name": "menuAdd",
        "description": "Adds new submenu entry into item on given path.",
        "introduced_version": null,
        "syntax": "[[menuAdd]] [idc, path, text]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "Path where the items should be added",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "Displayed name for the entry",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "menuChecked",
        "description": "Returns if item on given path is checked or not.",
        "introduced_version": null,
        "syntax": "[[menuChecked]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "Path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "menuClear",
        "description": "Removes all entries from given menu strip.",
        "introduced_version": null,
        "syntax": "[[menuClear]] idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuCollapse",
        "description": "Collapses item on given path and all its children.",
        "introduced_version": null,
        "syntax": "[[menuCollapse]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuData",
        "description": "Returns data stored in menu entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuData]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "menuDelete",
        "description": "Deletes menu entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuDelete]] [idc,path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuEnable",
        "description": "Enables disabled menu entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuEnable]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuEnabled",
        "description": "Returns if menu entry on given path is enabled or not.",
        "introduced_version": null,
        "syntax": "[[menuEnabled]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "menuExpand",
        "description": "Expands given menu entry on given path and all its parents so entry is visible.",
        "introduced_version": null,
        "syntax": "[[menuExpand]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuHover",
        "description": "Returns path to menu entry mouse is currently hovering over.",
        "introduced_version": null,
        "syntax": "[[menuHover]] idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "menuPicture",
        "description": "Returns picture set into item on given path.",
        "introduced_version": null,
        "syntax": "[[menuPicture]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "menuSetAction",
        "description": "Sets new action into menu entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuSetAction]] [idc, path, action]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "action",
                "description": "Expression that should be executed when entry is clicked",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "action",
                "description": "Expression that should be executed when entry is clicked",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuSetCheck",
        "description": "Sets item on given path to be checked or not. By default menu strip entries are not checkable. Once this command was executed, an entry can be become checked and unchecked. If an entry is checked is indicated by a tick to the left of the entry's text. Setting an entry to be checkable will overwrite set picture with [[menuSetPicture]].",
        "introduced_version": null,
        "syntax": "[[menuSetCheck]] [idc, path, checked]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "checked",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "checked",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuSetData",
        "description": "Sets data into menu entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuSetData]] [idc, path, data]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "data",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "data",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuSetPicture",
        "description": "Sets new picture into menu entry on given path. The picture will be replaced by a tick if the entry was set to checkable with [[menuSetCheck]].",
        "introduced_version": null,
        "syntax": "[[menuSetPicture]] [idc, path, picture]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "picture",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "picture",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuSetValue",
        "description": "Sets new value into menu entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuSetValue]] [idc, path, value]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuShortcut",
        "description": "Returns shortcut related to menu entry on given path. Returns the shortcut in form of a bitflag. To get the shortcut text use [[menuShortcutText]] command.",
        "introduced_version": null,
        "syntax": "[[menuShortcut]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "menuShortcutText",
        "description": "Returns a string containing shortcut text for menu item on the given path.",
        "introduced_version": null,
        "syntax": "[[menuShortcutText]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "menuSize",
        "description": "Returns how many sub entries is in item on given path.",
        "introduced_version": null,
        "syntax": "[[menuSize]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "menuSort",
        "description": "Sorts subentries of item on given path by their text.",
        "introduced_version": null,
        "syntax": "[[menuSort]] [idc, path, AtoZ]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "AtoZ",
                "description": "[[True]] to sort from A to Z, [[false]] to sort from Z to A",
                "sqf_type": "Boolean"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "AtoZ",
                "description": "[[True]] to sort from A to Z, [[false]] to sort from Z to A",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "menuText",
        "description": "Returns current text set in menu entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuText]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "menuURL",
        "description": "Returns current URL set in entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuURL]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "menuValue",
        "description": "Returns current value set in menu entry on given path.",
        "introduced_version": null,
        "syntax": "[[menuValue]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "min",
        "description": "The smaller of a,b",
        "introduced_version": null,
        "syntax": "a '''min''' b",
        "parameters": [
            {
                "name": "a",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "b",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "mineActive",
        "description": "Checks if the given mine is active.",
        "introduced_version": null,
        "syntax": "'''mineActive''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "mineDetectedBy",
        "description": "Returns [[true]] if mine has been detected by a given side",
        "introduced_version": null,
        "syntax": "mine '''mineDetectedBy''' faction",
        "parameters": [
            {
                "name": "mine",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "faction",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "missileTarget",
        "description": "Returns a guided missile's target.",
        "introduced_version": null,
        "syntax": "[[missileTarget]] munition",
        "parameters": [
            {
                "name": "munition",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "missileTargetPos",
        "description": "Returns a guided missile's target position.",
        "introduced_version": null,
        "syntax": "[[missileTargetPos]] munition",
        "parameters": [
            {
                "name": "munition",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - position in format [[PositionASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "missionConfigFile",
        "description": "Return root of mission [[Description.ext]] entries hierarchy.\n<br><br>",
        "introduced_version": null,
        "syntax": "'''missionConfigFile'''",
        "parameters": [],
        "returns": {
            "description": "[[Config]]",
            "sqf_type": "Config"
        }
    },
    {
        "name": "missionDifficulty",
        "description": "Return difficulty that has been forced for this mission, returns -1 if difficulty is not forced and it is used one from player's options.",
        "introduced_version": null,
        "syntax": "[[missionDifficulty]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "missionName",
        "description": "Return currently loaded mission file (path to mission.pbo, relative to game exe).",
        "introduced_version": null,
        "syntax": "[[missionName]]",
        "parameters": [],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "missionNamespace",
        "description": "Returns the global namespace attached to mission.",
        "introduced_version": null,
        "syntax": "'''missionNamespace'''",
        "parameters": [],
        "returns": {
            "description": "[[Namespace]]",
            "sqf_type": "Namespace"
        }
    },
    {
        "name": "missionStart",
        "description": "Returns date and time when mission started in format <tt>[year, month, day, hour, minute, second]</tt> in MP, which differs from [[date]] format only by seconds. In SP returns <tt>[0,0,0,0,0,0]</tt>.\n<br><br>",
        "introduced_version": null,
        "syntax": "[[missionStart]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - real local date and time (similar to [[date]] format but with seconds)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "missionVersion",
        "description": "Returns the version of the current mission.\n* Mission from the [[2D Editor]]: 12\n* Mission from the [[Eden Editor]]: 15 and higher (for example current version for [[Eden Editor]] mission in Arma 3 v1.57 is 51)",
        "introduced_version": null,
        "syntax": "'''missionVersion'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]: SQM version",
            "sqf_type": "Number"
        }
    },
    {
        "name": "mod",
        "description": "Remainder of a divided by b.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "a",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "b",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "modParams",
        "description": "Returns list of mod parameters according to given options, values are in same order as the given options. Available options are:\n{",
        "introduced_version": null,
        "syntax": "[[modParams]] [modClass, options]",
        "parameters": [
            {
                "name": "modClass",
                "description": "class name of the mod",
                "sqf_type": "String"
            },
            {
                "name": "options",
                "description": "see description",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - retrieved requested data on success or empty array []",
            "sqf_type": "Array"
        }
    },
    {
        "name": "modelToWorld",
        "description": "Translates relative position from object model space into world position.<br>\nThis command will take into account [[vectorUp]] of the object when calculating relative coordinates.\nFor ASL version see [[modelToWorldWorld]]",
        "introduced_version": null,
        "syntax": "model [[modelToWorld]] position",
        "parameters": [
            {
                "name": "model",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "[x,y,z] offset relative to the model centre, format [[PositionRelative]]",
                "sqf_type": "Position"
            }
        ],
        "returns": {
            "description": "[[Array]] - translated world position, format [[PositionAGL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "modelToWorldVisual",
        "description": "Converts position from object model space to world space in render time scope. For ASL version see [[modelToWorldVisualWorld]].",
        "introduced_version": null,
        "syntax": "object '''modelToWorldVisual''' modelPos",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "modelPos",
                "description": "in format [[PositionRelative]] ([x,y,z] offset relative to the model centre)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - world position in format [[PositionAGL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "modelToWorldVisualWorld",
        "description": "Converts position from object model space to world space in render time.",
        "introduced_version": null,
        "syntax": "obj '''modelToWorldVisualWorld''' modelPos",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "modelPos",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - World position in format [[PositionASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "modelToWorldWorld",
        "description": "Converts position from object model space to world space (usable by [[setPosWorld]] for example).",
        "introduced_version": null,
        "syntax": "obj [[modelToWorldWorld]] modelPos",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "modelPos",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]:",
            "sqf_type": "Array"
        }
    },
    {
        "name": "moonIntensity",
        "description": "Returns the intensity of the moon's brightness in range 0...1.",
        "introduced_version": null,
        "syntax": "'''moonIntensity'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "moonPhase",
        "description": "Returns the phase of the in-game Moon on the given date in range 0...1, where 0 - new Moon, 1 - full Moon. According to this command the fullest Moon in Arma 3 at midnight is on <tt>[[setDate]] [4804,7,13,0,0];</tt> Use [[Arma_3_Utilities#Moon_Phases|Moon Phase Utility]] to find out date for a mission with desired moon.",
        "introduced_version": null,
        "syntax": "'''moonPhase''' date",
        "parameters": [
            {
                "name": "date",
                "description": "required date in [[date]] format",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "morale",
        "description": "Checks a current morale level of the unit (-1..+1).",
        "introduced_version": null,
        "syntax": "'''morale''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "move",
        "description": "Let group move to given position. Active waypoints will be ignored when command is used.",
        "introduced_version": null,
        "syntax": "group [[move]] position",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "move3DENCamera",
        "description": "When useOffset is [[true]], camera will move to the position + defined offset in config and '''target''' the position. If useOffset is false, the camera will be moved exactly to the provided position without changing the rotation of the camera. Default camera offset: <tt>[0,-25,25]</tt>",
        "introduced_version": null,
        "syntax": "'''move3DENCamera''' [position,useOffset]",
        "parameters": [
            {
                "name": "position",
                "description": "",
                "sqf_type": "Position"
            },
            {
                "name": "useOffset",
                "description": "true if camera should use offset (defined in [[configFile]] >> \"Cfg3DEN\" >> \"Camera\" >> \"moveOffset\")",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveInAny",
        "description": "Moves unit to the first available seat in a vehicle. The order of priorities is the same order used in squad command when you order subordinates to get in vehicle to any position and is the same order used in Zeus when you drag units to a vehicle. <br><br>Seat assignment seems to use the following priority logic: \ndriver ([[moveInDriver]]) -> commander turret ([[moveInCommander]]) -> gunner turret ([[moveInGunner]]) -> remaining turrets ([[moveInTurret]]) -> cargo ([[moveInCargo]]).<br><br>\n'''NOTE''': This command will move player into the [[locked]] vehicle or seat just as well.",
        "introduced_version": null,
        "syntax": "unit '''moveInAny''' vehicle",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success, [[false]] on failure",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "moveInCargo",
        "description": "Move soldier into vehicle cargo position (Immediate, no animation).",
        "introduced_version": null,
        "syntax": "unitName [[moveInCargo]] vehicle",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "CargoIndex",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveInCommander",
        "description": "Move soldier into vehicle commander position (Immediate, no animation).",
        "introduced_version": null,
        "syntax": "unitName '''moveInCommander''' vehicle",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveInDriver",
        "description": "Moves soldier into vehicle driver position (immediate, no animation).",
        "introduced_version": null,
        "syntax": "unit '''moveInDriver''' vehicle",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveInGunner",
        "description": "Move soldier into vehicle gunner position (Immediate, no animation).",
        "introduced_version": null,
        "syntax": "unitName '''moveInGunner''' vehicle",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveInTurret",
        "description": "Moves the soldier into the vehicle's turret. (Immediately, without animation). ''turret path'' is an array of positions inside a turret, or positions inside a turret of a turret.\n<br>\n<br>[0] means first turret.\n<br>[0,0] means first turret of first turret.\n<br>[0,1] means second turret of first turret.\n<br>[1] means second turret.\n<br>[1,0] means first turret of the second turret.\n<br>[2,0] means first turret of third turret.\n<br>And so on ...",
        "introduced_version": null,
        "syntax": "unitName '''moveInTurret''' [vehicle, turretPath]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "see Description.",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveObjectToEnd",
        "description": "Shifts an editor object to the end of the objects array. This means,that the object will be drawn last (after all other objects).",
        "introduced_version": null,
        "syntax": "map '''moveObjectToEnd''' object",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "object",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveOut",
        "description": "Moves the soldier out of the vehicle.\n<br><br>\nNotes:\n* Works for both AI and player entities\n* AI unit gets back in - unless is under player command or combined with other sqf commands ([[orderGetIn]] false, [[allowGetIn]] false or [[leaveVehicle]])\n* Respects the vehicle's lock state (same as [[Arma_3_Actions#Eject|action \"Eject\"]]) - unlike [[doGetOut]], [[commandGetOut]]. It will work for [[player]] entities regardless though\n* Still executes when the vehicle is moving/flying (same as [[Arma_3_Actions#Eject|action \"Eject\"]]) - unlike [[doGetOut]], [[commandGetOut]]\n* Without vehicle's position's get out animation - unlike [[Arma_3_Actions#Eject|action eject]], [[doGetOut]], [[commandGetOut]]\n* Immediately - unlike [[Arma_3_Actions#Eject|action eject]], [[doGetOut]], [[commandGetOut]]\n* Works also on dead units (same as [[Arma_3_Actions#Eject|action \"Eject\"]] (but one after another)) - unlike [[doGetOut]], [[commandGetOut]]\n* Does not work for UAV crew\n* Does not work for [[remoteControl]]'ed units\n* Works on [[setUnconscious|unconscious]] (same as [[Arma_3_Actions#Eject|action \"Eject\"]] (but one after another)) - unlike [[doGetOut]], [[commandGetOut]] (unless AI under player command)",
        "introduced_version": null,
        "syntax": "'''moveOut''' soldier",
        "parameters": [
            {
                "name": "soldier",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveTime",
        "description": "Returns the current time of the most important RTM animation currently being played on the soldier.",
        "introduced_version": null,
        "syntax": "'''moveTime''' soldier",
        "parameters": [
            {
                "name": "soldier",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "moveTo",
        "description": "Low level command to person to move to given position.",
        "introduced_version": null,
        "syntax": "person [[moveTo]] position",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "PositionATL"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "moveToCompleted",
        "description": "Check if latest low level moveTo command is finished.",
        "introduced_version": null,
        "syntax": "'''moveToCompleted''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "moveToFailed",
        "description": "Check if latest low level moveTo command failed.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "musicVolume",
        "description": "Returns the current music volume (set by [[fadeMusic]])",
        "introduced_version": null,
        "syntax": "'''musicVolume'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "nMenuItems",
        "description": "Returns the total number of user-added menu items belonging to the given menu.",
        "introduced_version": null,
        "syntax": "map '''nMenuItems''' menuName",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "menuName",
                "description": "\"file\" or \"view\"",
                "sqf_type": "String"
            },
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "name",
        "description": "When argument is [[Object]], the command returns the name given to a unit using the [[setIdentity]] instruction or selected randomly by the game engine if [[setIdentity]] has not been used on the unit. If used on vehicle, name of first crew member (in order commander, driver, gunner). If used on an object, \"Error: No unit\" is being returned.<br>\nWhen argument is [[Location]], the location's name is returned. To return the textual value of a location use [[text]] command instead.<br><br>",
        "introduced_version": null,
        "syntax": "[[name]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "nameSound",
        "description": "Returns the nameSound of a person.",
        "introduced_version": null,
        "syntax": "'''nameSound''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "nearEntities",
        "description": "[[Image:sphere_radius.jpg|right|200px]]\nFinds entities inside a sphere with the given radius. If the alternative syntax is used, only entities of given types or subtypes are listed. Entities returned are not sorted by distance. This command doesn't return dead entities or entities inside vehicles. If you need to return those, use [[entities]] command.<br><br>",
        "introduced_version": null,
        "syntax": "position [[nearEntities]] radius",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]] - center of the sphere",
                "sqf_type": "Object"
            },
            {
                "name": "radius",
                "description": "radius of the sphere",
                "sqf_type": "Number"
            },
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]] - center of the sphere",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "or [[Array]] of [[String|Strings]] - type(s) to search for",
                "sqf_type": "String"
            },
            {
                "name": "radius",
                "description": "radius of the sphere",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object|Objects]] - not sorted",
            "sqf_type": "Array"
        }
    },
    {
        "name": "nearObjects",
        "description": "Find objects (Units, Vehicles, Dead, Map Objects) in a sphere with given radius. The first object in the returned array is ''not'' necessarily the closest one. If you need returned objects to be sorted by distance, use [[nearestObjects]]. If typeName is given, only objects of given type (or its subtype) are listed.",
        "introduced_version": null,
        "syntax": "position [[nearObjects]] radius",
        "parameters": [
            {
                "name": "position",
                "description": ", [[Position2D]] or [[Object]]",
                "sqf_type": "Position"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "position",
                "description": ", [[Position2D]] or [[Object]]",
                "sqf_type": "PositionAGL"
            },
            {
                "name": "typeName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "nearObjectsReady",
        "description": "Check whether all data are loaded to nearObjects will return in reasonable time.",
        "introduced_version": null,
        "syntax": "position '''nearObjectsReady''' radius",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Object"
            },
            {
                "name": "radius",
                "description": "-",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "nearRoads",
        "description": "Find the road segments within the circle of given radius.",
        "introduced_version": null,
        "syntax": "pos '''nearRoads''' radius",
        "parameters": [
            {
                "name": "pos",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]], center of search radius",
                "sqf_type": "Object"
            },
            {
                "name": "radius",
                "description": "search radius in meters",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object]]s - road segments within radius",
            "sqf_type": "Array"
        }
    },
    {
        "name": "nearSupplies",
        "description": "Find supplies (weapon holders, ammo crates, fuel feeds, other units) in the sphere with given radius.",
        "introduced_version": null,
        "syntax": "origin '''nearSupplies''' radius",
        "parameters": [
            {
                "name": "origin",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Object"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of [[Object]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "nearTargets",
        "description": "Returns a list of targets within the defined range. \"Targets\" are not restricted to enemy units.",
        "introduced_version": null,
        "syntax": "unit '''nearTargets''' range",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "range",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - nested; consisting of:\n*0: Position (perceived, includes judgment and memory errors),\n*1: Type (perceived, gives only what was recognized),\n*2: Side (perceived side),\n*3: Subjective Cost (positive for enemies, more positive for more important or more dangerous \nenemies),\n*4: Object (object type, can be used to get more information if needed)\n*5: (since build 5209:) position accuracy (assumed accuracy of the perceived position)\n\n'''for each recognized target'''",
            "sqf_type": "Array"
        }
    },
    {
        "name": "nearestBuilding",
        "description": "Finds the nearest building to a given object or position. A \"building\" is defined as an object that is of class \"House\" and contains a path LOD.",
        "introduced_version": null,
        "syntax": "'''nearestBuilding''' position",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "nearestLocation",
        "description": "Return the closest location of specified class to a given position.<br>Checked range is unlimited (i.e. covers the whole map).",
        "introduced_version": null,
        "syntax": "[[nearestLocation]] [position, locationClass]",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Object"
            },
            {
                "name": "locationClass",
                "description": "of a location class name. If \"\" is supplied, any nearest location is returned. See [[Location#Location Types|Location Types]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Location]]",
            "sqf_type": "Location"
        }
    },
    {
        "name": "nearestLocationWithDubbing",
        "description": "Find the nearest location having a non-empty speech.",
        "introduced_version": null,
        "syntax": "[[nearestLocationWithDubbing]] position",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Location]]",
            "sqf_type": "Location"
        }
    },
    {
        "name": "nearestLocations",
        "description": "Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest.",
        "introduced_version": null,
        "syntax": "[[nearestLocations]] [position, [locationType1, locationType2, ...], radius, sortPosition]",
        "parameters": [
            {
                "name": "position",
                "description": "[[Position2D]], [[Position3D]] or [[Object]]",
                "sqf_type": "Array"
            },
            {
                "name": "locationTypeX",
                "description": "[[Location#Location Types|location type]] name, e.g \"NameCity\"",
                "sqf_type": "String"
            },
            {
                "name": "radius",
                "description": "maximum distance from the given position that returned locations may be, in meters.",
                "sqf_type": "Number"
            },
            {
                "name": "sortPosition",
                "description": "(Optional) [[Position2D]], [[Position3D]] or [[Object]] - results will be sorted from the distance to given ''sortPosition'' (nearest to farthest still)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Location|locations]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "nearestObject",
        "description": "Returns the nearest object of given type (or inherited classes) to given position within a sphere. Hardcoded radius is 50 meters. Unlike with [[nearestObjects]], where distance is measured in 2D space, [[nearestObject]] will be closest object in 3D space.",
        "introduced_version": null,
        "syntax": "[[nearestObject]] [position, type]",
        "parameters": [
            {
                "name": "type",
                "description": "type of object (see [[typeOf]], [[CfgVehicles|class type]])",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "type of object (see [[typeOf]], [[CfgVehicles|class type]])",
                "sqf_type": "String"
            },
            {
                "name": "id",
                "description": "object Visitor id",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Object]] - Nearest object, [[objNull]] otherwise",
            "sqf_type": "Object"
        }
    },
    {
        "name": "nearestObjects",
        "description": "Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. Alternatively, you can use [[nearObjects]] command, which doesn't sort results.\n<br><br>\nA list of ClassName types (e.g <tt>Tank</tt>) can be found in [[:Category:CfgVehicles|CfgVehicles]].\n<br><br>",
        "introduced_version": null,
        "syntax": "[[nearestObjects]] [position, types, radius, 2Dmode]",
        "parameters": [
            {
                "name": "position",
                "description": "or [[Array]] in format [[PositionAGL]] or [[Position2D]] - where to find objects, center position.",
                "sqf_type": "Object"
            },
            {
                "name": "types",
                "description": "list of class name of the objects to search for. Use an empty array",
                "sqf_type": "Array"
            },
            {
                "name": "radius",
                "description": "range from center position to search for objects.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of objects",
            "sqf_type": "Array"
        }
    },
    {
        "name": "nearestTerrainObjects",
        "description": "Returns a list of nearest terrain objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered according to 3D distance to the object (i.e. the closest one will be first in the array). \nIn contrast to [[nearestObjects]] this command returns terrain placed objects like trees, rocks and buildings which don't necessarily need an associated config class.<br><br>\nPossible type names:<tt>\"TREE\", \"SMALL TREE\", \"BUSH\", \"BUILDING\", \"HOUSE\", \"FOREST BORDER\", \"FOREST TRIANGLE\", \"FOREST SQUARE\", \"CHURCH\", \"CHAPEL\", \"CROSS\", \"BUNKER\", \"FORTRESS\", \"FOUNTAIN\", \"VIEW-TOWER\", \"LIGHTHOUSE\", \"QUAY\", \"FUELSTATION\", \"HOSPITAL\", \"FENCE\", \"WALL\", \"HIDE\", \"BUSSTOP\", \"ROAD\", \"FOREST\", \"TRANSMITTER\", \"STACK\", \"RUIN\", \"TOURISM\", \"WATERTOWER\", \"TRACK\", \"MAIN ROAD\", \"ROCK\", \"ROCKS\", \"POWER LINES\", \"RAILWAY\", \"POWERSOLAR\", \"POWERWAVE\", \"POWERWIND\", \"SHIPWRECK\", \"TRAIL\"</tt>\n<br><br>\nSince Arma 3 v1.61.136035 it is possible to switch the sorting algorithm off by providing optional param, which significantly increases the performance of this command, especially if the search is performed with large radius.\n<br>\nSince Arma 3 v1.65.138818 it is possible to switch search and sorting mode between 2D and 3D.\n<br>\nSince Arma 3 v1.99.146404 this command also returns missing roads: <tt>\"ROAD\", \"MAIN ROAD\", \"TRACK\", \"TRAIL\"</tt> \n<br><br>",
        "introduced_version": null,
        "syntax": "[[nearestTerrainObjects]] [position, types, radius, sort, 2Dmode]",
        "parameters": [
            {
                "name": "position",
                "description": ", [[PositionAGL]] or [[Position2D]] - where to find objects, center position",
                "sqf_type": "Object"
            },
            {
                "name": "types",
                "description": "list of types of the objects to search for. <tt>[]</tt> to search without filters",
                "sqf_type": "Array"
            },
            {
                "name": "radius",
                "description": "range from center position to search for objects",
                "sqf_type": "Number"
            },
            {
                "name": "sort",
                "description": "(Optional, default [[true]]) sort objects by distance to the center or not (''Available since Arma 3 v1.61.136035'')",
                "sqf_type": "Boolean"
            },
            {
                "name": "2Dmode",
                "description": "(Optional, default [[false]]) the object search and sorting mode: [[true]] - 2D, [[false]] - 3D (''Available since Arma 3 v1.65.138818'')",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of terrain objects",
            "sqf_type": "Array"
        }
    },
    {
        "name": "needReload",
        "description": "Return how much vehicle wants to reload its weapons.",
        "introduced_version": null,
        "syntax": "'''needReload''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] Range: 0-1, 0: full mag, 1: empty mag",
            "sqf_type": "Number"
        }
    },
    {
        "name": "netId",
        "description": "Unique ID of object or group.  As this command is MP only, you can use [[BIS_fnc_netId]], which extends the use to SP as well. See also: [[BIS_fnc_objectVar]]",
        "introduced_version": null,
        "syntax": "'''netId''' var",
        "parameters": [
            {
                "name": "var",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "netObjNull",
        "description": "A non-existing network object.",
        "introduced_version": null,
        "syntax": "[[netObjNull]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] - always returns [[false]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "newOverlay",
        "description": "Creates the new overlay dialog for the specified type of overlay.",
        "introduced_version": null,
        "syntax": "map '''newOverlay''' config",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "config",
                "description": "-",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "nextMenuItemIndex",
        "description": "Returns the next available menu item index.",
        "introduced_version": null,
        "syntax": "'''nextMenuItemIndex''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "nextWeatherChange",
        "description": "Return the remaining time (in seconds) over which the current weather change will occur.\n<br>\nWhen a weather change finishes, the game engine will automatically generate a new random weather change over a realistic time period (minimum of 90 minutes).",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "nil",
        "description": "Nil value. This value can be used to undefine existing [[Variables|variables]].",
        "introduced_version": null,
        "syntax": "[[nil]]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "not",
        "description": "'''not''' a is exactly the same as [[!]]a",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "a",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "numberOfEnginesRTD",
        "description": "Returns the number of engines a helicopter has.",
        "introduced_version": null,
        "syntax": "[[numberOfEnginesRTD]] helicopterRTD",
        "parameters": [
            {
                "name": "helicopterRTD",
                "description": "helicopter",
                "sqf_type": "ObjectRTD"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "numberToDate",
        "description": "Convert float number to a date.",
        "introduced_version": null,
        "syntax": "'''numberToDate''' [year,time]",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "objNull",
        "description": "A non-existent [[Object]]. To compare non-existent objects use [[isNull]] or [[isEqualTo]]:\n* <tt>[[objNull]]",
        "introduced_version": null,
        "syntax": "'''objNull'''",
        "parameters": [],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "objStatus",
        "description": "Sets the status of an objective that was defined in [[Briefing.html|briefing.html]].\n\nStatus may be one of:\n* \"ACTIVE\"\n* \"FAILED\"\n* \"DONE\"\n* \"HIDDEN\"\n\nTo refer to an objective that is named \"OBJ_1\", for example, use only the index number in this command (i.e. \"1\" objStatus \"HIDDEN\").",
        "introduced_version": null,
        "syntax": "objectivenumber '''objStatus''' status",
        "parameters": [
            {
                "name": "objectivenumber",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "status",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "objectCurators",
        "description": "Returns array with all curators which can edit given object.",
        "introduced_version": null,
        "syntax": "'''objectCurators''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "objectFromNetId",
        "description": "Get object with given unique ID. If object is a [[group]] use [[groupFromNetId]]. As this command is MP only, you can use [[BIS_fnc_objectFromNetId]], which extends the use to SP as well.",
        "introduced_version": null,
        "syntax": "'''objectFromNetId''' id",
        "parameters": [
            {
                "name": "id",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "objectParent",
        "description": "Returns parent of an object if the object is proxy, otherwise [[objNull]]. In case of backpack, the parent is a weaponholder or a cargo space of a vehicle or the unit carrying it. Unit in a vehicle will return the vehicle as parent.<br><br>\nAnother good use of [[objectParent]] is when a static weapon is known and one needs to check if it is assembled or not. <tt>[[objectParent]] _staticWeapon</tt> will return [[objNull]] if weapon is unpacked, or backpack object if packed.<br><br>\n[[Image:objectParent.jpg|600px]]\n<br><br>",
        "introduced_version": null,
        "syntax": "'''objectParent''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "onBriefingGear",
        "description": "Select a sound declared in the [[Description.ext#Sound|Description.ext]] of the mission to be played the first time the [[Briefing.html#Gear|Gear tab]] is selected in the [[Briefing.html|briefing]].",
        "introduced_version": null,
        "syntax": "'''onBriefingGear''' soundName",
        "parameters": [
            {
                "name": "soundName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onBriefingGroup",
        "description": "Select a sound declared in the [[Description.ext#Sound|Description.ext]] of the mission to be played the first time the [[Briefing.html#Group|Group tab]] is selected in the [[Briefing.html|briefing]].",
        "introduced_version": null,
        "syntax": "'''onBriefingGroup''' soundName",
        "parameters": [
            {
                "name": "soundName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onBriefingNotes",
        "description": "Select a sound declared in the [[Description.ext#Sound|Description.ext]] of the mission to be played the first time the [[Briefing.html#Notes|Notes tab]] is selected in the [[Briefing.html|briefing]].",
        "introduced_version": null,
        "syntax": "'''onBriefingNotes''' soundName",
        "parameters": [
            {
                "name": "soundName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onBriefingPlan",
        "description": "Select a sound declared in the [[Description.ext#Sound|Description.ext]] of the mission to be played the first time the [[Briefing.html#Plan|Plan tab]] is selected in the [[Briefing.html|briefing]].",
        "introduced_version": null,
        "syntax": "'''onBriefingPlan''' soundName",
        "parameters": [
            {
                "name": "soundName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onBriefingTeamSwitch",
        "description": "Select a sound defined in the [[Description.ext#CfgSounds|CfgSounds]] of the mission to be played the first time the TeamSwitch tab is selected in the [[Briefing.html|briefing]].",
        "introduced_version": null,
        "syntax": "[[onBriefingTeamSwitch]] soundName",
        "parameters": [
            {
                "name": "soundName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onCommandModeChanged",
        "description": "Defines code performed when hc command mode changes either because of (Left Ctrl + Space) shortcut or [[hcShowBar]] scripting command. Groups hc mode must contain at least one group for this command to work (see [[High Command]]). Attached code receives ''_isHighCommand'' boolean.",
        "introduced_version": null,
        "syntax": "'''onCommandModeChanged''' code",
        "parameters": [
            {
                "name": "code",
                "description": "or [[String]] -",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onDoubleClick",
        "description": "Defines an action performed when the user double clicks on the map. Command receives:,_pos array position,_units array selected units,_shift,_alt bool key state",
        "introduced_version": null,
        "syntax": "map '''onDoubleClick''' command",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "command",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onEachFrame",
        "description": "Runs given statement every frame.",
        "introduced_version": null,
        "syntax": "[[onEachFrame]] statement",
        "parameters": [
            {
                "name": "statement",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onGroupIconClick",
        "description": "Defines an action performed when player clicked on group marker (3D or in a map). The code executed once. This EH, unlike [[onGroupIconOverEnter]] and [[onGroupIconOverLeave]], has one more param which returns 1 if RMB was pressed, 0 otherwise. <br><br>",
        "introduced_version": null,
        "syntax": "'''onGroupIconClick''' command",
        "parameters": [
            {
                "name": "command",
                "description": "or [[Code]] - script",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onGroupIconOverEnter",
        "description": "Defines an action performed when player moves pointer over group marker (3D or in a map). The code will execute continuously while pointer is over icon. <br><br>",
        "introduced_version": null,
        "syntax": "'''onGroupIconOverEnter''' command",
        "parameters": [
            {
                "name": "command",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onGroupIconOverLeave",
        "description": "Defines an action performed when pointer, previously positioned over icon, is moved away from it (3D or in a map). The code is executed once.<br><br>",
        "introduced_version": null,
        "syntax": "'''onGroupIconOverLeave''' command",
        "parameters": [
            {
                "name": "command",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onHCGroupSelectionChanged",
        "description": "Defines an action performed when [[High Command|high command]] group selection has been changed.\n<br>\nCommand receives 2 variables:\n*_group: [[Group]] - last selected/deselected group\n*_isSelected: [[Boolean]] - new selection state of the specific group\n\nThe code is executed on every [[High Command|hc]] group selection change until it is\n* removed via <code>[[onHCGroupSelectionChanged]] \"\";</code> or <code>[[onHCGroupSelectionChanged]] {};</code>\n* or replaced by <code>[[onHCGroupSelectionChanged]] \"SomeOtherCommand(s)\";</code> or <code>[[onHCGroupSelectionChanged]] {SomeOtherCommand(s)};</code>",
        "introduced_version": null,
        "syntax": "'''onHCGroupSelectionChanged''' command",
        "parameters": [
            {
                "name": "command",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onMapSingleClick",
        "description": "Define action performed when user clicks in map by executing command string. The code is executed on every click, until the '''command''' is \n* removed via '''onMapSingleClick''' \"\", or\n* replaced by '''onMapSingleClick''' \"SomeOtherCommand(s)\"\n\nthe string receives 5 (localised in scope) variables:\n* _this: [[Anything]] - Params passed to onMapSingleClick\n* _pos: [[Array]] - Clicked position\n* _units: [[Array]] - Units which were selected (via function keys) '''before''' opening the map (''may be non-functional in Arma'')\n* _shift: [[Boolean]] - Whether <Shift> was pressed when clicking on the map\n* _alt: [[Boolean]] - Whether <Alt> was pressed when clicking on the map\n\nIn Arma 3 the code should return [[true]] only if you wish to override default engine handling of the mouse click on map (see example #4)<br> For older games, when click is processed, code should ultimately return [[true]] back to the engine. If [[false]] is returned, default processing by the game engine is done. Return value of any other type (including [[Nothing]]) is an error. In such case default processing by the game engine is done, and error message may be displayed.\n\n<br><br>",
        "introduced_version": null,
        "syntax": "[[onMapSingleClick]] command",
        "parameters": [
            {
                "name": "command",
                "description": "or [[Code]]",
                "sqf_type": "String"
            },
            {
                "name": "params",
                "description": "",
                "sqf_type": "Anything"
            },
            {
                "name": "command",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onPlayerConnected",
        "description": "This command will execute attached code whenever a player is connected to a MP session. The code will receive a number of special variables:\n* '''_id''': [[Number]] - is the unique DirectPlay ID. Quite useless as the number is too big for in-built string representation and gets rounded. It is also the same id used for user placed markers.\n* '''_uid''': [[String]] - is [[getPlayerUID]] of the joining player. In Arma 3 it is also the same as Steam ID.\n* '''_name''': [[String]] - is [[profileName]] of the joining player.\n* '''_jip''': (''since Arma 3 v1.49'') [[Boolean]] - is a flag that indicates whether or not the player joined after the mission has started ('''J'''oined '''I'''n '''P'''rogress). [[true]] when the player is [[JIP]], otherwise [[false]].\n* '''_owner''': (''since Arma 3 v1.49'') [[Number]] - is [[owner]] id of the joining player. Can be used for kick or ban purposes or just for [[publicVariableClient]].\n* '''_idstr''': (''since Arma 3 v1.95'') [[String]] - same as <tt>_id</tt> but in string format, so could be exactly compared to [[allMapMarkers | user marker]] ids.<br><br>",
        "introduced_version": null,
        "syntax": "[[onPlayerConnected]] code",
        "parameters": [
            {
                "name": "code",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onPlayerDisconnected",
        "description": "This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:\n\n* '''_id''': [[Number]] - is the unique DirectPlay ID. Quite useless as the number is too big for in-built string representation and gets rounded. It is also the same id used for user placed markers.\n* '''_uid''': [[String]] - is [[getPlayerUID]] of the leaving player. In Arma 3 it is also the same as Steam ID.\n* '''_name''': [[String]] - is [[profileName]] of the leaving player.\n* '''_jip''': (''since Arma 3 v1.49'') [[Boolean]] - is a flag that indicated whether or not the player joined after the mission has started ('''J'''oined '''I'''n '''P'''rogress). [[true]] - if the player was JIP, otherwise [[false]].\n* '''_owner''': (''since Arma 3 v1.49'') [[Number]] - is [[owner]] id of the leaving player. Can be used for kick or ban purposes or just for [[publicVariableClient]].\n* '''_idstr''': (''since Arma 3 v1.95'') [[String]] - same as <tt>_id</tt> but in string format, so could be exactly compared to [[allMapMarkers | user marker]] ids.<br><br>",
        "introduced_version": null,
        "syntax": "'''onPlayerDisconnected''' code",
        "parameters": [
            {
                "name": "code",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onPreloadFinished",
        "description": "Defines an action performed after the preload screen finished. Preload event occurs after briefing screen on mission start.<br><br>",
        "introduced_version": null,
        "syntax": "'''onPreloadFinished''' command",
        "parameters": [
            {
                "name": "command",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onPreloadStarted",
        "description": "Defines an action performed just before the preload screen started. Preload event occurs after briefing screen on mission start.<br><br>",
        "introduced_version": null,
        "syntax": "'''onPreloadStarted''' command",
        "parameters": [
            {
                "name": "command",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "onShowNewObject",
        "description": "Defines an action performed when the user right clicks on the map and,selects New Object. Set to empty for default behavior. Command receives:,_pos array position,",
        "introduced_version": null,
        "syntax": "map '''onShowNewObject''' command",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "command",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Any]]",
            "sqf_type": "Any"
        }
    },
    {
        "name": "onTeamSwitch",
        "description": "Defines an action performed when the team switch is finished.\nCommandset receives the following special variables: ''_from'' object previous unit, ''_to'' object current unit.\nConsecutive use of onTeamSwitch command will overwrite previously set commandset.",
        "introduced_version": null,
        "syntax": "[[onTeamSwitch]] commandset",
        "parameters": [
            {
                "name": "commandset",
                "description": "or [[Code]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "openCuratorInterface",
        "description": "Force opens curator interface.",
        "introduced_version": null,
        "syntax": "'''openCuratorInterface'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "openDLCPage",
        "description": "Opens a Steam page of the app with given appId. Only works for known appId (game + linked DLCs)",
        "introduced_version": null,
        "syntax": "[[openDLCPage]] dlcID",
        "parameters": [
            {
                "name": "dlcID",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - result",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "openDSInterface",
        "description": "Opens MP interface. <br><br>",
        "introduced_version": null,
        "syntax": "'''openDSInterface'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "openMap",
        "description": "Opens or closes in-game map.<br><br>",
        "introduced_version": null,
        "syntax": "[[openMap]] show",
        "parameters": [
            {
                "name": "show",
                "description": "if [[true]] opens map, if [[false]] closes map, provided it is not ''forced''",
                "sqf_type": "Boolean"
            },
            {
                "name": "show",
                "description": "if [[true]] opens map, if [[false]] closes map, provided it is not ''forced''.",
                "sqf_type": "Boolean"
            },
            {
                "name": "forced",
                "description": "if [[true]] keeps map from closing when map is open.",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - equivalent of [[visibleMap]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "openSteamApp",
        "description": "Opens a Steam application, returns false if it wasn't possible to run the application.",
        "introduced_version": null,
        "syntax": "[[openSteamApp]] appID",
        "parameters": [
            {
                "name": "appID",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "openYoutubeVideo",
        "description": "Opens Steam overlay with given YT video. Video URL is the end part of the YT URL, starting with '''watch?v",
        "introduced_version": null,
        "syntax": "'''openYoutubeVideo''' youTubeUrl",
        "parameters": [
            {
                "name": "youTubeUrl",
                "description": "for parameters see: https://developers.google.com/youtube/player_parameters",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "opfor",
        "description": "Pre-defined variable for the opfor [[Side|side]].\n<br> Alias for [[east]].",
        "introduced_version": null,
        "syntax": "'''opfor'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "orderGetIn",
        "description": "Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything.\n<br><br>\nNotes:\n* The command has no affect on AI lead by a player Group Leader (GL)\n* A vehicle needs be assigned via [[addVehicle]] or assignAsXXX or moveInXXX first for the command to have any effect. [[orderGetIn]] [[true]] makes the AI to board the vehicle. Or the AI GL orders them due to other means (ie getIn, guard waypoints).\n* However one can initially set [[orderGetIn]] [[false]], add one or more vehicles and only once/when the AI is to enter, you set [[orderGetIn]] [[true]]  for AI to start moving to the vehicle(s) or getting in the vehicle(s).\n* [[orderGetIn]] [[false]] makes AI also leave a vehicle when inside already. However it does not affect [[assignedVehicleRole]] nor [[assignedVehicle]]. Only [[leaveVehicle]] will remove both\n* [[orderGetIn]] [[false]] even makes AI eject while the vehicle positions are locked (([[lockDriver]], [[lockTurret]], [[lockCargo]] - however [[orderGetIn]] [[true]] will not override the position lock to make them enter\n* AI units on the way to enter the vehicle won't stop on the way if [[orderGetIn]] [[false]] set but continue to the vehicle and just stop short without entering - [[allowGetIn]] false instead will make the AI stop instantly (same as [[unassignVehicle]] when combined with [[orderGetIn]] [[false]])\n* One can combine [[orderGetIn]] [[false]] and [[allowGetIn]] [[false]] to manage when exactly AI is to enter vehicles\n* [[orderGetIn]] is persistent/a general group behavior setting - don't forget previous changes with future vehicle use!\n* If you want to make a vehicle no longer used by a group, you need to remove the vehicle from the group's vehicle pool via [[leaveVehicle]].",
        "introduced_version": null,
        "syntax": "unitArray '''orderGetIn''' order",
        "parameters": [
            {
                "name": "unitArray",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "order",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "overcast",
        "description": "Return the current overcast level. Zero is clear skies, one is maximum cloud cover.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "overcastForecast",
        "description": "Return the overcast forecast.",
        "introduced_version": null,
        "syntax": "'''overcastForecast'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "owner",
        "description": "On server machine, returns the [[Multiplayer_Scripting#Machine_network_ID | machine network ID]] of the client to which the object is [[local]]. Otherwise returns 0. For use on clients [[clientOwner]] command is available. To find out the owner of a [[Group]], use [[groupOwner]].",
        "introduced_version": null,
        "syntax": "'''owner''' object",
        "parameters": [
            {
                "name": "object",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "param",
        "description": "Extracts a single value with given index from input argument, similar to [[BIS_fnc_param]].  When used without argument, as shown in main syntax, internal variable [[_this]], which is usually available inside functions and event handlers, is used as argument. If input argument is not an array, it will be converted to 1 element array.\n<br><br>\nIf extracted item of input with given index is undefined, of the wrong type or of the wrong length (if the item is an array), default value is used instead. Since Arma 3 v1.53.132691, onscreen errors are displayed for when the input is of the wrong type or size.",
        "introduced_version": null,
        "syntax": "[[param]] [index, defaultValue, expectedDataTypes, expectedArrayCount]",
        "parameters": [
            {
                "name": "index",
                "description": "index of required item in the input array.",
                "sqf_type": "Number"
            },
            {
                "name": "argument",
                "description": "A usual array of params is expected. If a non-array value is passed, it will be converted to 1 element array",
                "sqf_type": "Anything"
            },
            {
                "name": "index",
                "description": "index of required item in the input array.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Anything]] - extracted value on success or default value otherwise. [[Nothing]] if syntax error occurred.",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "params",
        "description": "Parses input argument into array of [[private]] variables. When used without argument, as shown in main syntax, internal variable [[_this]], which is usually available inside functions and event handlers, is used as argument.\n<br><br>\nIn addition to simple parsing directly into variables, input can be tested in case it is undefined, of the wrong type or of the wrong size (if array) and substituted if necessary with default values. Since Arma 3 v1.53.132691, onscreen errors are displayed for when the input is of the wrong type or size.<br><br>",
        "introduced_version": null,
        "syntax": "[[params]] [element1, element2,...elementN]",
        "parameters": [
            {
                "name": "argument",
                "description": "A usual array of params is expected. If a non-array argument is passed, it will be converted to 1 element array",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[false]] if error occurred or default value has been used, otherwise [[true]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "parseNumber",
        "description": "An SQF equivalent of C++ [http://www.cplusplus.com/reference/cstdlib/atof/ atof] function. Parses the string, interpreting its content as a floating point number.<br><br>\nThe command first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes as many characters as possible that are valid following a syntax resembling that of [[Floating_Point_Number#Floating_Point_Literals|floating point literals]], and interprets them as a numerical value. The rest of the string after the last valid character is ignored and has no effect on the behavior of this command.<br><br>\nIf the first sequence of non-whitespace characters in string does not form a valid floating-point number, or if no such sequence exists because either string is empty or contains only whitespace characters, no conversion is performed and the command returns 0.",
        "introduced_version": null,
        "syntax": "[[parseNumber]] string",
        "parameters": [
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "boolean",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "parseSimpleArray",
        "description": "Converts given, formatted as simple array, [[String]] into a valid [[Array]]. Simple array is array consisting of [[Number]]s, [[String]]s, [[Boolean]]s and [[Array]]s of all of the above. For example: <tt>[1,\"2\",true,[4,\"five\",false]]</tt>. The string representation of this array compatible with [[parseSimpleArray]] will be <tt>\"[1,\"\"2\"\",true,[4,\"\"five\"\",false]]\"</tt> accordingly. This command is almost '''4x faster''' than similar uncached [[call]] [[compile]] method. And because [[call]] [[compile]] is not required, it is also '''more secure''' and primarily intended for use with [[callExtension]] to parse the [[String]] output into [[Array]]. Since Arma 3 v.1.95.145925 the command will tolerate extra spaces and supports single quotes. The only recognised keywords (case '''in'''sensitive) are:\n* <tt>true</tt> - translates into [[true]]\n* <tt>false</tt> - translates into [[false]]\n* <tt>nil</tt> - translates into [[nil]]\n* <tt>null</tt> - translates into [[nil]]\n* <tt>&lt;null&gt;</tt> - translates into [[nil]]\n* <tt>any</tt> - translates into [[nil]]",
        "introduced_version": null,
        "syntax": "'''parseSimpleArray''' stringArray",
        "parameters": [
            {
                "name": "stringArray",
                "description": "string formatted as simple array",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - valid array",
            "sqf_type": "Array"
        }
    },
    {
        "name": "parseText",
        "description": "Creates a structured text by parsing the given XML description. Do not use [[parseText]] when displaying a localized text from [[Stringtable.xml]].<br>\nA detailed explanation of all formatting possibilities can be found at [[Structured Text]].",
        "introduced_version": null,
        "syntax": "[[parseText]] text",
        "parameters": [
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "parsingNamespace",
        "description": "Returns the global namespace attached to config parser.",
        "introduced_version": null,
        "syntax": "'''parsingNamespace'''",
        "parameters": [],
        "returns": {
            "description": "[[Namespace]]",
            "sqf_type": "Namespace"
        }
    },
    {
        "name": "particlesQuality",
        "description": "Returns current user settings for particles quality (configure->video->general->particles). 0-low, 1-normal, 2-high",
        "introduced_version": null,
        "syntax": "'''particlesQuality'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "pickWeaponPool",
        "description": "Transfer weapons and magazines from cargo of object into weapon pool (used in campaign to transfer weapons into next mission).",
        "introduced_version": null,
        "syntax": "[[pickWeaponPool]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "pitch",
        "description": "Returns the pitch of a persons voice.",
        "introduced_version": null,
        "syntax": "'''pitch''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "pixelGrid",
        "description": "Returns grid size based on screen resolution, UI size and configs: uiScaleFactor, uiScaleMaxGrids.",
        "introduced_version": null,
        "syntax": "'''pixelGrid'''",
        "parameters": [],
        "returns": {
            "description": "[[Scalar]] -",
            "sqf_type": "Scalar"
        }
    },
    {
        "name": "pixelGridBase",
        "description": "Returns grid size based on screen resolution.",
        "introduced_version": null,
        "syntax": "'''pixelGridBase'''",
        "parameters": [],
        "returns": {
            "description": "[[Scalar]] -",
            "sqf_type": "Scalar"
        }
    },
    {
        "name": "pixelGridNoUIScale",
        "description": "Returns grid size based on screen resolution and configs: uiScaleFactor, uiScaleMaxGrids \n\nAs mentioned in the name of this command, the user interface scale is ignored.",
        "introduced_version": null,
        "syntax": "'''pixelGridNoUIScale'''",
        "parameters": [],
        "returns": {
            "description": "[[Scalar]] -",
            "sqf_type": "Scalar"
        }
    },
    {
        "name": "pixelH",
        "description": "Returns the height of one pixel for current resolution.",
        "introduced_version": null,
        "syntax": "'''pixelH'''",
        "parameters": [],
        "returns": {
            "description": "[[Scalar]] -",
            "sqf_type": "Scalar"
        }
    },
    {
        "name": "pixelW",
        "description": "Returns width of one pixel for current resolution.",
        "introduced_version": null,
        "syntax": "'''pixelW'''",
        "parameters": [],
        "returns": {
            "description": "[[Scalar]] -",
            "sqf_type": "Scalar"
        }
    },
    {
        "name": "playAction",
        "description": "When used on a person, a smooth transition to the given action will be initiated.\n<br>\nFor Arma 3 actions see: [[playAction/actions]].",
        "introduced_version": null,
        "syntax": "soldier '''playAction''' action",
        "parameters": [
            {
                "name": "soldier",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "action",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playActionNow",
        "description": "When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded.\n<br>\nFor Arma 3 actions see: [[playAction/actions]].",
        "introduced_version": null,
        "syntax": "soldier '''playActionNow''' action",
        "parameters": [
            {
                "name": "soldier",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "action",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playGesture",
        "description": "When used on a person,a smooth transition to the given move will be initiated. '''Command doesn't seem to be functional'''",
        "introduced_version": null,
        "syntax": "soldier '''playGesture''' moveName",
        "parameters": [
            {
                "name": "soldier",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "moveName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playMission",
        "description": "The mission is launched (from the main menu). Both campaign and mission are given as their directory name. If the campaign is empty, a single mission is launched. If skipBriefing is true, the intro and briefing are skipped.",
        "introduced_version": null,
        "syntax": "'''playMission''' [campaign, mission, skipBriefing]",
        "parameters": [
            {
                "name": "campaign",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "mission",
                "description": "or [[Config]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playMove",
        "description": "When used on a person, smooth transition to given move will be done.<br>\nThe difference between [[playMove]] and [[playMoveNow]] is that [[playMove]] adds another move to the move queue, while [[playMoveNow]] replaces the whole move queue with new move (see [[#Examples|Example 2]]).",
        "introduced_version": null,
        "syntax": "unitName [[playMove]] moveName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "moveName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playMoveNow",
        "description": "When used on a person,a smooth transition to the given move will be initiated, but all previous playMove are discarded. <br>\nThe difference between [[playMove]] and [[playMoveNow]] is that [[playMove]] adds another move to the move queue, while [[playMoveNow]] replaces the whole move queue with new move (see [[#Examples|Example 2]]).",
        "introduced_version": null,
        "syntax": "soldier [[playMoveNow]] moveName",
        "parameters": [
            {
                "name": "soldier",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "moveName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playMusic",
        "description": "Plays music defined in [[Description.ext#CfgMusic|Description.ext's CfgMusic]] or config.cpp.\n* [[Arma 3 CfgMusic]]\n* [[Arma 2: Music]]\n* [[Arma: cfgMusic]]",
        "introduced_version": null,
        "syntax": "[[playMusic]] musicName",
        "parameters": [
            {
                "name": "musicName",
                "description": "music classname",
                "sqf_type": "String"
            },
            {
                "name": "musicName",
                "description": "music classname",
                "sqf_type": "String"
            },
            {
                "name": "start",
                "description": "start, in seconds. Can be negative.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playScriptedMission",
        "description": "Load the given world, launch an empty mission and execute the given, expression. Config (optional) can reference to the config entry, replacing description.ext for this mission.",
        "introduced_version": null,
        "syntax": "'''playScriptedMission''' [world,expression,config,ignoreChildWindow]",
        "parameters": [
            {
                "name": "world",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "expression",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playSound",
        "description": "Plays a sound from CfgSounds. Sound can be defined in [[missionConfigFile]], [[configFile]] or [[campaignConfigFile]].",
        "introduced_version": null,
        "syntax": "'''playSound''' soundName",
        "parameters": [
            {
                "name": "soundName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "soundName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "isSpeech",
                "description": "play as speech through radio channel, [[fadeSpeech]] applies.",
                "sqf_type": "Boolean"
            },
            {
                "name": "offset",
                "description": "(Optional) Offset in seconds. Same with [[playMusic]]. Default: 0",
                "sqf_type": "Scalar"
            }
        ],
        "returns": {
            "description": "[[Nothing]],",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playSound3D",
        "description": "Plays positional sound with given filename on every computer on network. At least 2 parameters must be specified.",
        "introduced_version": null,
        "syntax": "[[playSound3D]] [filename, soundSource, isInside, soundPosition, volume, soundPitch, distance, offset]",
        "parameters": [
            {
                "name": "filename",
                "description": "see [[Arma 3: SoundFiles]] for available filenames or [[#Examples|Example 3]] to use mission files.",
                "sqf_type": "String"
            },
            {
                "name": "soundSource",
                "description": "the object emitting the sound. If \"sound position\" is specified this parameter is ignored",
                "sqf_type": "Object"
            },
            {
                "name": "isInside",
                "description": "(Optional, default [[false]])",
                "sqf_type": "Boolean"
            },
            {
                "name": "soundPosition",
                "description": "(Optional, default [0,0,0]) position for sound emitter, will override \"sound source\" position.",
                "sqf_type": "PositionASL"
            },
            {
                "name": "volume",
                "description": "(Optional, default 1) Maximum value: 5 (limited since A3 v1.91.145537)",
                "sqf_type": "Number"
            },
            {
                "name": "soundPitch",
                "description": "(Optional, default 1) 1: Normal, 0.5: Darth Vader, 2: Chipmunks, etc.",
                "sqf_type": "Number"
            },
            {
                "name": "distance",
                "description": "(Optional, default 0) How far is sound audible (0",
                "sqf_type": "Number"
            },
            {
                "name": "offset",
                "description": "(Optional, default 0) Offset in seconds. Same as with [[playMusic]]",
                "sqf_type": "Scalar"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "playableSlotsNumber",
        "description": "Returns the number of available slots in mission per [[Side|side]] (both empty and taken). <br>In singleplayer mission, it returns number of playable units per side.",
        "introduced_version": null,
        "syntax": "'''playableSlotsNumber''' side",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "playableUnits",
        "description": "Returns a list of playable units in a multiplayer game (occupied by both AI or players), created on the following sides [[east]]/[[opfor]], [[west]]/[[blufor]], [[resistance]]/[[independent]] and [[civilian]] only. Does not contain units of [[sideLogic]].<br>",
        "introduced_version": null,
        "syntax": "[[playableUnits]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "player",
        "description": "A person object controlled by user. In Intros and Outros this isn't set by default and must be assigned.<br><br>\nIn MP [[player]] is different on each computer and on dedicated server it is [[objNull]] by default ([https://www.youtube.com/watch?v",
        "introduced_version": null,
        "syntax": "[[player]]",
        "parameters": [],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "playerRespawnTime",
        "description": "Return the player's remaining time before respawn, or -1 if it is not available (such as when the player is alive).",
        "introduced_version": null,
        "syntax": "'''playerRespawnTime'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "playerSide",
        "description": "Returns the player's [[Side|side]]. This is valid even when the player controlled person is dead (a difference from [[side]] [[player]]).",
        "introduced_version": null,
        "syntax": "'''playerSide'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "playersNumber",
        "description": "Returns count of occupied role selection slots for given side. Players who claimed a slot in the lobby but didn't start the mission are counted as well. If <tt>disabledAI",
        "introduced_version": null,
        "syntax": "[[playersNumber]] side",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "posScreenToWorld",
        "description": "Converts map screen coordinates into world coordinates. Unlike [[ctrlMapScreenToWorld]], this command returns world position is format [x, y, 0], otherwise it is identical to [[ctrlMapScreenToWorld]].",
        "introduced_version": null,
        "syntax": "map '''posScreenToWorld''' [x, y]",
        "parameters": [
            {
                "name": "x",
                "description": "screen X",
                "sqf_type": "Number"
            },
            {
                "name": "y",
                "description": "screen Y",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - world position in format [x,y,0]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "posWorldToScreen",
        "description": "Converts world coordinates into map screen coordinates. This command is identical to [[ctrlMapWorldToScreen]].",
        "introduced_version": null,
        "syntax": "map '''posWorldToScreen''' position",
        "parameters": [],
        "returns": {
            "description": "[[Array]] - screen coordinates in format [x, y]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "position",
        "description": "Returns position of an object (alias of [[getPos]]) or location (alias of [[locationPosition]]).",
        "introduced_version": null,
        "syntax": "[[position]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionAGLS]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "positionCameraToWorld",
        "description": "[[File:PositionCameraToWorld.jpg|right|120x120px]]Transforms position from camera coordinate space to world coordinate space. \n\nCamera axes are relative to camera orientation. x axis goes from left of the camera to right of the camera, z axis goes from underneath the camera to above the camera and y axis goes from back of the camera to where the camera is looking.",
        "introduced_version": null,
        "syntax": "'''positionCameraToWorld''' cameraPos",
        "parameters": [
            {
                "name": "cameraPos",
                "description": "Relative camera position, format [x, z, y]<br><br>",
                "sqf_type": "PositionRelative"
            }
        ],
        "returns": {
            "description": "[[Array]] - Camera world position, format [[PositionAGL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ppEffectAdjust",
        "description": "Set [[Post process effects|post process effect]] parameters.",
        "introduced_version": null,
        "syntax": "effect '''ppEffectAdjust''' settings",
        "parameters": [
            {
                "name": "effect",
                "description": "effect name",
                "sqf_type": "String"
            },
            {
                "name": "settings",
                "description": "array of effect params",
                "sqf_type": "Array"
            },
            {
                "name": "handle",
                "description": "effect handle",
                "sqf_type": "Number"
            },
            {
                "name": "settings",
                "description": "array of effect params",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ppEffectCommit",
        "description": "Commit [[Post process effects|post process effect]] in given time.",
        "introduced_version": null,
        "syntax": "effect '''ppEffectCommit''' commit",
        "parameters": [
            {
                "name": "effect",
                "description": "name of the effect",
                "sqf_type": "String"
            },
            {
                "name": "commit",
                "description": "duration",
                "sqf_type": "Number"
            },
            {
                "name": "handle",
                "description": "handle of the effect",
                "sqf_type": "Number"
            },
            {
                "name": "commit",
                "description": "duration",
                "sqf_type": "Number"
            },
            {
                "name": "handles",
                "description": "of [[Number]]s - list of handles",
                "sqf_type": "Array"
            },
            {
                "name": "commit",
                "description": "duration",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ppEffectCommitted",
        "description": "Check whether given [[Post process effects|post process effect]] is committed",
        "introduced_version": null,
        "syntax": "'''ppEffectCommitted''' effect",
        "parameters": [
            {
                "name": "effect",
                "description": "effect name",
                "sqf_type": "String"
            },
            {
                "name": "handle",
                "description": "effect handle",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ppEffectCreate",
        "description": "Creates [[Post process effects]] specified by effect name and priority. Supported effects are:<br>\n\n* [[Post_process_effects#RadialBlur|\"RadialBlur\"]]\n* [[Post_process_effects#ChromAberration|\"ChromAberration\"]]\n* [[Post_process_effects#WetDistortion|\"WetDistortion\"]]\n* [[Post_process_effects#ColorCorrections|\"ColorCorrections\"]]\n* [[Post_process_effects#DynamicBlur|\"DynamicBlur\"]]\n* [[Post_process_effects#FilmGrain|\"FilmGrain\"]]\n* [[Post_process_effects#ColorInversion|\"ColorInversion\"]]",
        "introduced_version": null,
        "syntax": "'''ppEffectCreate''' [name, priority]",
        "parameters": [
            {
                "name": "name",
                "description": "name of effect type.",
                "sqf_type": "String"
            },
            {
                "name": "priority",
                "description": "unique priority, defines order of applying effect to the scene. If there is another effect using the same priority, creation will fail.",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "name of effect type.",
                "sqf_type": "String"
            },
            {
                "name": "priority",
                "description": "unique priority, defines order of applying effect to the scene. If there is another effect using the same priority, creation will fail.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] - handle or -1 if failed",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ppEffectDestroy",
        "description": "Destroy [[Post process effects]] given by handle or array of handles.",
        "introduced_version": null,
        "syntax": "'''ppEffectDestroy''' effect",
        "parameters": [
            {
                "name": "effect",
                "description": "effect handle",
                "sqf_type": "Number"
            },
            {
                "name": "effect1",
                "description": "effect handle",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ppEffectEnable",
        "description": "Enable / disable [[Post process effects]]",
        "introduced_version": null,
        "syntax": "effect [[ppEffectEnable]] enable",
        "parameters": [
            {
                "name": "effect",
                "description": "name of the effect",
                "sqf_type": "String"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "effect",
                "description": "handle of the effect",
                "sqf_type": "Number"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "effectArray",
                "description": "of [[Number]]s - array of effect handles",
                "sqf_type": "Array"
            },
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ppEffectEnabled",
        "description": "Checks whether given post process effect is enabled",
        "introduced_version": null,
        "syntax": "'''ppEffectEnabled''' effect",
        "parameters": [
            {
                "name": "effect",
                "description": "effect handle",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ppEffectForceInNVG",
        "description": "Forces use of [[Post process effects]] in NVG.",
        "introduced_version": null,
        "syntax": "number '''ppEffectForceInNVG''' bool",
        "parameters": [
            {
                "name": "number",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "precision",
        "description": "Return the precision of the given entity, how is the entity able to be precise when moving to given target.",
        "introduced_version": null,
        "syntax": "'''precision''' entity",
        "parameters": [
            {
                "name": "entity",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "preloadCamera",
        "description": "Preload all textures and models around given [[Position]] to avoid visual artifacts after camera is moved.\n\nShould be used before any abrupt camera change/cut.\n\nReturns true once all data is ready. See [[camPreload]] for alternative, more flexible camera preloading.",
        "introduced_version": null,
        "syntax": "'''preloadCamera''' position",
        "parameters": [
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "preloadObject",
        "description": "Preloads all textures, materials and proxies needed to render given object. Works with both class names and objects. Returns true once all data is loaded and ready.<br><br>",
        "introduced_version": null,
        "syntax": "distance '''preloadObject''' object",
        "parameters": [
            {
                "name": "distance",
                "description": " distance at which preload the object",
                "sqf_type": "Number"
            },
            {
                "name": "object",
                "description": "existing object",
                "sqf_type": "Object"
            },
            {
                "name": "distance",
                "description": " distance at which preload the object",
                "sqf_type": "Number"
            },
            {
                "name": "classname",
                "description": "classname of the object",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] when preload is finished",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "preloadSound",
        "description": "Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.",
        "introduced_version": null,
        "syntax": "'''preloadSound''' soundName",
        "parameters": [
            {
                "name": "soundName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "preloadTitleObj",
        "description": "Preloads data for the given resource object.",
        "introduced_version": null,
        "syntax": "'''preloadTitleObj''' [name, type, speed, showInMap]",
        "parameters": [
            {
                "name": "name",
                "description": "defined in <tt>[[configFile]] >> \"CfgTitles\" >> name</tt>",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "\"PLAIN\" e.g.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "preloadTitleRsc",
        "description": "Resource title - Preload data.\n\nThe resource can be defined in the [[Description.ext]] file.",
        "introduced_version": null,
        "syntax": "'''preloadTitleRsc''' [name, type]",
        "parameters": [
            {
                "name": "name",
                "description": "defined in [[Description.ext]] for the mission",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "\"PLAIN\" e.g.",
                "sqf_type": "String"
            },
            {
                "name": "name",
                "description": "defined in [[Description.ext]] for the mission",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "\"PLAIN\" e.g.",
                "sqf_type": "String"
            },
            {
                "name": "showInMap",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "preprocessFile",
        "description": "Reads and processes the content of the specified file. Preprocessor is C-like, supports comments using // or /* and */ and [[PreProcessor Commands]].<br>Due to the hard-drive access this command executes (and the lack of caching) this command should not be used in time-critical script loops. <br><br>",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "fileName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "preprocessFileLineNumbers",
        "description": "Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and [[PreProcessor Commands]]. The preprocessor also adds a default debug entrypoint for compiler at the begining of script: <tt>#line 1 \"aFilename\"</tt><br><br>\n\nThe '''#line''' keyword can be used in any script that are not preprocess, or with preprocess script with extra macro to protect reserverd sharp character. The format is:<br>\n<tt>'''#line''' <number> \"<name>\"</tt><br>\nfollowed by new line. <number> could be only positive integer and <name> could be any name. This will be used only if an error occurs in the script. The error will contain the line:\n<tt>File <filename>, line <linenumber></tt><br>\nwhere <filename> will be the <name> you set and <linenumber> will be <number> + how many lines it is from the '''#line''' line. If the error happened on the line right under '''#line''' it will add 0 to <number>, if on second line, it will add 1 etc.<br><br>\nIt is possible to use more than one '''#line''' keywords, but it seems having just one at the top for little script is enough to pinpoint position of the error easily. \n<br><br>",
        "introduced_version": null,
        "syntax": "'''preprocessFileLineNumbers''' fileName",
        "parameters": [
            {
                "name": "fileName",
                "description": "path to the file",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]] - file content containing <tt>#line 1 \"aFilename\"</tt>",
            "sqf_type": "String"
        }
    },
    {
        "name": "primaryWeapon",
        "description": "Returns name of unit's primary weapon (empty string if none).",
        "introduced_version": null,
        "syntax": "'''primaryWeapon''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "primaryWeaponItems",
        "description": "Returns array with all items assigned to the [[primaryWeapon]] except magazines. Use [[primaryWeaponMagazine]] command for the latter. This command is used for infantry weapons only.",
        "introduced_version": null,
        "syntax": "'''primaryWeaponItems''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] -  [silencer, laserpointer/flashlight, optics, bipod]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "primaryWeaponMagazine",
        "description": "Collects all loaded [[magazines]] from all [[primaryWeapon]] muzzles and returns them in [[Array]], otherwise it returns []. This command is used for infantry weapons only.",
        "introduced_version": null,
        "syntax": "'''primaryWeaponMagazine''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "priority",
        "description": "Return the priority of the task.",
        "introduced_version": null,
        "syntax": "'''priority''' task",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "private",
        "description": "Sets a variable to the innermost scope as demonstrated in Example 3. See also [[param]] and [[params]].",
        "introduced_version": null,
        "syntax": "[[private]] variableName",
        "parameters": [
            {
                "name": "variableName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "variableNameList",
                "description": "of [[String]]s",
                "sqf_type": "Array"
            },
            {
                "name": "value",
                "description": ": value to assign to the variable",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "processDiaryLink",
        "description": "Open the diary screen on the record specified by link.",
        "introduced_version": null,
        "syntax": "'''processDiaryLink''' link",
        "parameters": [
            {
                "name": "link",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "processInitCommands",
        "description": "Process statements stored using [[setVehicleInit]]. The statements will only be executed once even if [[processInitCommands]] is called multiple times.<br><br>",
        "introduced_version": null,
        "syntax": "[[processInitCommands]]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "productVersion",
        "description": "Returns the product's friendly name, identifier and version. In Arma 3 it also returns branch identifier, whether or not the game was launched using mods, and the platform.",
        "introduced_version": null,
        "syntax": "'''productVersion'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]\n* [[String]] - Product Name\n* [[String]] - Product Name Short\n* [[Number]] - Product Version Number\n* [[Number]] - Product Build Number\n* [[String]] (Arma 3) - Product Branch\n* [[Boolean]] (Arma 3) - Product is launched using mods [[true]] or vanilla [[false]]\n* [[String]] (Arma 3) - Platform (''\"Windows\"'', ''\"Linux\"'' or ''\"OSX\"'')\n* [[String]] (Arma 3) - Architecture - '''x64''' for 64bit or '''x86''' for 32bit '''Since version 1.67'''",
            "sqf_type": "Array"
        }
    },
    {
        "name": "profileName",
        "description": "Returns currently chosen user profile name. For Steam profile name see [[profileNameSteam]].",
        "introduced_version": null,
        "syntax": "'''profileName'''",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "profileNameSteam",
        "description": "Returns name of the current Steam profile. For currently chosen user profile name see [[profileName]]",
        "introduced_version": null,
        "syntax": "'''profileNameSteam'''",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "profileNamespace",
        "description": "Returns the global namespace attached to the active user profile. Use [[setVariable]] and [[getVariable]] to save and load data to and from this [[Namespace]]. A variable can be deleted by setting its value to [[nil]]. By default the variables set in this namespace will exist while the game is running. In order to make variables save permanently, use [[saveProfileNamespace]] before the game is over.\nThe variables are stored next to the user profile in a file named ''myUsername.vars.GAMENAME'' (e.g. in the ''My Documents\\Take On Helicopters'' folder).",
        "introduced_version": null,
        "syntax": "'''profileNamespace'''",
        "parameters": [],
        "returns": {
            "description": "[[Namespace]]",
            "sqf_type": "Namespace"
        }
    },
    {
        "name": "progressLoadingScreen",
        "description": "If loading screen is shown, sets progress bar to the given value (interval is from 0 to 1])",
        "introduced_version": null,
        "syntax": "[[progressLoadingScreen]] progress",
        "parameters": [
            {
                "name": "progress",
                "description": "in range 0..1",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "progressPosition",
        "description": "Returns the current position in the progress bar.",
        "introduced_version": null,
        "syntax": "'''progressPosition''' control",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "progressSetPosition",
        "description": "Sets progress position of a progress bar ([[CT_PROGRESS]]).",
        "introduced_version": null,
        "syntax": "control '''progressSetPosition''' pos",
        "parameters": [
            {
                "name": "control",
                "description": "progress bar control",
                "sqf_type": "Control"
            },
            {
                "name": "pos",
                "description": "0: no progress; 1: full progress",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "publicVariable",
        "description": "Reliably broadcasts [[missionNamespace]] variable and its '''current''' value to all computers (server/client).<br>\nVariables broadcast with [[publicVariable]] during a mission will be available to [[Join In Progress|JIP]] clients with the value they held at the time.<br>\nSuch variables are persistent and sent to the JIP client before the first batch of client-side [[Event Scripts]] (such as [[init.sqf]]) is run.",
        "introduced_version": null,
        "syntax": "[[publicVariable]] varName",
        "parameters": [
            {
                "name": "varName",
                "description": "the [[Variables#Global Scope|global variable]]'s [[Identifier]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "publicVariableClient",
        "description": "Send the variable value to the client computer - same limitations regarding variable type as [[publicVariable#Description|publicVariable]].\n\nThe Client ID is the temporary ID given to a connected client for that session. You can find out this ID with the [[owner]] command (using it on a player's character, for example, will give you that players client ID).<br><br>",
        "introduced_version": null,
        "syntax": "clientID '''publicVariableClient''' varName",
        "parameters": [
            {
                "name": "clientID",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "varName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "publicVariableServer",
        "description": "Send the variable value to the server - same limitations regarding variable type as [[publicVariable#Description|publicVariable]]. <br><br>",
        "introduced_version": null,
        "syntax": "'''publicVariableServer''' varName",
        "parameters": [
            {
                "name": "varName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "pushBack",
        "description": "Insert an element to the back of the given array. This command modifies the original array. (see also: [[pushBackUnique]])",
        "introduced_version": null,
        "syntax": "array '''pushBack''' element",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "element",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Number]] - index of inserted element",
            "sqf_type": "Number"
        }
    },
    {
        "name": "pushBackUnique",
        "description": "Adds element to the back of the given array but only if it is unique to the array. The index of the added element is returned upon success, otherwise -1. This command modifies the original array.",
        "introduced_version": null,
        "syntax": "array '''pushBackUnique''' element",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "element",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Number]] - index of inserted element or -1",
            "sqf_type": "Number"
        }
    },
    {
        "name": "putWeaponPool",
        "description": "Transfer weapons and magazines from weapon pool into cargo of given object. Used in campaign to transfer weapons into next mission.",
        "introduced_version": null,
        "syntax": "[[putWeaponPool]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "queryItemsPool",
        "description": "Returns the number of items of type in the weapon pool (used in campaigns to transfer weapons to the next mission).",
        "introduced_version": null,
        "syntax": "[[queryItemsPool]] name",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "queryMagazinePool",
        "description": "Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "queryWeaponPool",
        "description": "Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "rad",
        "description": "Converts given value in degrees to radians. 1 radian equals 180 degrees divided by [[pi]].",
        "introduced_version": null,
        "syntax": "'''rad''' value",
        "parameters": [
            {
                "name": "value",
                "description": "degrees",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]] - radians",
            "sqf_type": "Number"
        }
    },
    {
        "name": "radioChannelAdd",
        "description": "Add the units to the custom channel.",
        "introduced_version": null,
        "syntax": "customChannelID [[radioChannelAdd]] units",
        "parameters": [
            {
                "name": "customChannelID",
                "description": "[[Channel IDs|custom channel ID]] returned by [[radioChannelCreate]] command",
                "sqf_type": "Number"
            },
            {
                "name": "units",
                "description": "list of units",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "radioChannelCreate",
        "description": "Create a custom radio channel with the given color, label, call sign and registered characters. The '''[[Channel IDs|custom channel ID]]''' returned can be used to manipulate the created channel later. There are 10 slots for custom radio channels which would correspond to channels 6-15 (see [[getPlayerChannel]]). The command will find an unused index in this range and create it when found.",
        "introduced_version": null,
        "syntax": "[[radioChannelCreate]] [color, label, callSign, units, sentenceType]",
        "parameters": [
            {
                "name": "color",
                "description": "RGBA color values",
                "sqf_type": "Array"
            },
            {
                "name": "label",
                "description": "label",
                "sqf_type": "String"
            },
            {
                "name": "callSign",
                "description": "call sign",
                "sqf_type": "String"
            },
            {
                "name": "units",
                "description": "list of units in the channel",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]] - created '''[[Channel IDs|custom channel ID]]''' (used in [[customChat]] command), 0 if failed",
            "sqf_type": "Number"
        }
    },
    {
        "name": "radioChannelRemove",
        "description": "Remove the units from the custom radio channel.",
        "introduced_version": null,
        "syntax": "customChannelID [[radioChannelRemove]] units",
        "parameters": [
            {
                "name": "customChannelID",
                "description": "[[Channel IDs|custom channel ID]] returned by [[radioChannelCreate]] command",
                "sqf_type": "Number"
            },
            {
                "name": "units",
                "description": "list of units",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "radioChannelSetCallSign",
        "description": "Set the custom radio channel's call sign. \n\nAvailable special parameters:\n* $KEY (reference to a localized text)\n* %CHANNEL_LABEL\n* %UNIT_SIDE\n* %UNIT_NAME\n* %UNIT_RANK\n* %UNIT_ID\n* %UNIT_REF\n* %UNIT_GRP_NAME\n* %UNIT_GRP_LEADER\n* %UNIT_VEH_NAME\n* %UNIT_VEH_POSITION",
        "introduced_version": null,
        "syntax": "customChannelID [[radioChannelSetCallSign]] callSign",
        "parameters": [
            {
                "name": "customChannelID",
                "description": "[[Channel IDs|custom channel ID]] returned by [[radioChannelCreate]] command",
                "sqf_type": "Number"
            },
            {
                "name": "callSign",
                "description": "custom call sign",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "radioChannelSetLabel",
        "description": "Set the custom radio channel's label.",
        "introduced_version": null,
        "syntax": "customChannelID [[radioChannelSetLabel]] label",
        "parameters": [
            {
                "name": "customChannelID",
                "description": "[[Channel IDs|custom channel ID]] returned by [[radioChannelCreate]] command",
                "sqf_type": "Number"
            },
            {
                "name": "label",
                "description": "label",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "radioVolume",
        "description": "Returns the current radio volume (set by [[fadeRadio]]).",
        "introduced_version": null,
        "syntax": "'''radioVolume'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "rain",
        "description": "Returns the current value of rain density in range 0..1",
        "introduced_version": null,
        "syntax": "[[rain]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "rainbow",
        "description": "Returns the current rainbow intensity.",
        "introduced_version": null,
        "syntax": "'''rainbow'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "random",
        "description": "[[Image:bellcurve.jpg|right|200px]] Random real (floating point) value from 0 (inclusive) to x (not inclusive).<br>\n<br>\nSince Arma 3 v1.55.133393 alternative syntax is added, allowing the definition of [https://en.wikipedia.org/wiki/Normal_distribution Gaussian Distribution]",
        "introduced_version": null,
        "syntax": "[[random]] x",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "min",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "mid",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "max",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "seed",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "seed",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "y",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "rank",
        "description": "Returns the rank of the given unit. Rank can be one of the following:\n* <tt>\"PRIVATE\"</tt>\n* <tt>\"CORPORAL\"</tt>\n* <tt>\"SERGEANT\"</tt>\n* <tt>\"LIEUTENANT\"</tt>\n* <tt>\"CAPTAIN\"</tt>\n* <tt>\"MAJOR\"</tt>\n* <tt>\"COLONEL\"</tt>",
        "introduced_version": null,
        "syntax": "'''rank''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "rankId",
        "description": "Return the rank of the given unit for comparison.\n\nValue may be :\n*'''0''' - Private\n*'''1''' - Corporal\n*'''2''' - Sergeant\n*'''3''' - Lieutenant\n*'''4''' - Captain\n*'''5''' - Major\n*'''6''' - Colonel",
        "introduced_version": null,
        "syntax": "'''rankId''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "rating",
        "description": "Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies (see [[ArmA:_Rating Values|Rating Values]]). Can be changed via [[addRating]] by the mission designer. \n\nThe rating of the player is displayed as the \"score\" at the end of the mission. Via [[Description.ext]] one can define how many points it takes to get a perfect score, as well as the number of stars.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "rectangular",
        "description": "Checks if a location is rectangular (returns true) or elliptical (returns false).",
        "introduced_version": null,
        "syntax": "'''rectangular''' location",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "registerTask",
        "description": "Registers a new task type. Parameters are defined in the given config class (subclass of <tt>CfgTasks</tt>)",
        "introduced_version": null,
        "syntax": "teamMember '''registerTask''' entryName",
        "parameters": [
            {
                "name": "entryName",
                "description": "classname in <tt>CfgTasks</tt>",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "registeredTasks",
        "description": "Returns array with all registered task types for the given agent. The values are the names set in <tt>CfgTasks</tt> classes <tt>name</tt> property. The same names are used for [[unregisterTask]]",
        "introduced_version": null,
        "syntax": "'''registeredTasks''' teamMember",
        "parameters": [],
        "returns": {
            "description": "[[Array]] of [[String]]s - names of tasks",
            "sqf_type": "Array"
        }
    },
    {
        "name": "reload",
        "description": "Reload all weapons",
        "introduced_version": null,
        "syntax": "'''reload''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "reloadEnabled",
        "description": "Check whether magazine is reloaded whenever emptied.",
        "introduced_version": null,
        "syntax": "[[reloadEnabled]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "remoteControl",
        "description": "Switches on remote control of the unit. Command needs to be executed locally to the player.\nIf driver is remote it will get transferred to players PC.\nThere is currently no getter command for remote control, but it is possible to use a trick described in Example 3.",
        "introduced_version": null,
        "syntax": "who [[remoteControl]] whom",
        "parameters": [
            {
                "name": "who",
                "description": "controlling unit",
                "sqf_type": "Object"
            },
            {
                "name": "whom",
                "description": "controlled unit",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "remoteExec",
        "description": "Asks server to execute given scripted function or script command on given target PC. The environment chosen for the execution is as follows:<br><br>\n* Scripted function - ''[[Scheduler#Scheduled_Environment|scheduled]]'' environment ([[Scheduler#Suspension|suspension]] is allowed, i.e. [[spawn]], [[execVM]]). \n* Script command - ''[[Scheduler#Unscheduled_Environment|unscheduled]]'' environment ([[Scheduler#Suspension|suspension]] is NOT allowed).<br><br>\n[[remoteExec]] can also be used in SP (the same restrictions apply both to SP and MP).\nFor more information about the usage, security features and advanced [[JIP]] techniques check the [[Arma 3 Remote Execution]] dedicated section.\n<br><br>",
        "introduced_version": null,
        "syntax": "params [[remoteExec]] [functionName, targets, JIP]",
        "parameters": [],
        "returns": {
            "description": "[[Anything]] - Nil in case of error. [[String]] otherwise. If JIP is not requested this is an empty string, if JIP is requested, it is the JIP ID. See the topic [[Function#Return_Values|Function]] for more information.",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "remoteExecCall",
        "description": "Asks server to execute given scripted function or script command on given target PC. The environment chosen for the execution is as follows:<br><br>\n* Scripted function - ''unscheduled'' environment ([[canSuspend|suspension]] is NOT allowed).\n* Script command - ''unscheduled'' environment ([[canSuspend|suspension]] is NOT allowed).  <br><br>\n[[remoteExecCall]] can also be used in SP (the same restrictions apply both to SP and MP). For more information about the usage, security features and advanced jip techniques check the [[Arma_3_Remote_Execution|remote execution]] dedicated section.<br><br>",
        "introduced_version": null,
        "syntax": "params [[remoteExecCall]] [functionName, targets, JIP]",
        "parameters": [],
        "returns": {
            "description": "[[Anything]] -  Nil in case of error. [[String]] otherwise. If JIP is not requested this is an empty string, if JIP is requested, it is the JIP ID. See the topic [[Function#Return_Values|Function]] for more information.",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "remoteExecutedOwner",
        "description": "Returns the [[Multiplayer_Scripting#Machine_network_ID | machine network ID]] of the client that initiated [[Remote Execution]]. If used in SP or outside of remote executed context, the command returns 0.",
        "introduced_version": null,
        "syntax": "[[remoteExecutedOwner]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "remove3DENConnection",
        "description": "Remove [[Eden Editor: Connecting|connection]] between entities.",
        "introduced_version": null,
        "syntax": "'''remove3DENConnection''' [type, from, to]",
        "parameters": [
            {
                "name": "type",
                "description": "connection class from ''Cfg3DEN >> Connections''",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "of [[Eden Entity|Eden Entities]] - entities which has a connection",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the connection was removed",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "remove3DENEventHandler",
        "description": "Removes Eden Editor event handler of given type and ID.\n<br><br>\nSee the list of all [[Arma_3:_Event_Handlers:_Eden_Editor|Eden Editor Event Handlers]].",
        "introduced_version": null,
        "syntax": "'''remove3DENEventHandler''' [type,id]",
        "parameters": [
            {
                "name": "type",
                "description": "name of event handler",
                "sqf_type": "String"
            },
            {
                "name": "id",
                "description": "ID of event handler, returned by [[add3DENEventHandler]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "remove3DENLayer",
        "description": "Remove [[Eden Editor]] editing layer.",
        "introduced_version": null,
        "syntax": "'''remove3DENLayer''' layerID",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the layer was removed successfully (i.e., correct layer ID was used)",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "removeAction",
        "description": "Removes user added action with given id index. This only removes actions added with the [[addAction]] command. You cannot remove default game actions, such as reload.\n\nThis command has [[local]] effect. The action will only be removed on the computer that executes the command.",
        "introduced_version": null,
        "syntax": "unit '''removeAction''' index",
        "parameters": [
            {
                "name": "unit",
                "description": "unit, vehicle or static object",
                "sqf_type": "Object"
            },
            {
                "name": "index",
                "description": "action id returned by [[addAction]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAll3DENEventHandlers",
        "description": "Removes all [[Eden Editor]] event handlers of given type. \n<br><br>\nSee the list of all [[Arma_3:_Event_Handlers:_Eden_Editor|Eden Editor Event Handlers]].",
        "introduced_version": null,
        "syntax": "'''removeAll3DENEventHandlers''' type",
        "parameters": [
            {
                "name": "type",
                "description": "name of event handler",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllActions",
        "description": "Removes all unit's user added actions.",
        "introduced_version": null,
        "syntax": "'''removeAllActions''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "unit, vehicle or static object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllAssignedItems",
        "description": "Unassigns and deletes all linked items from inventory. The commands operates on [[assignedItems]] array, which doesnt include goggles or headgear. Use [[removeGoggles]] and [[removeHeadgear]] for those.",
        "introduced_version": null,
        "syntax": "'''removeAllAssignedItems''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllContainers",
        "description": "Removes all containers from the unit.",
        "introduced_version": null,
        "syntax": "[[removeAllContainers]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllCuratorAddons",
        "description": "Restrict access to all addons for given curator.",
        "introduced_version": null,
        "syntax": "'''removeAllCuratorAddons''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllCuratorCameraAreas",
        "description": "Delete all curator camera areas.",
        "introduced_version": null,
        "syntax": "'''removeAllCuratorCameraAreas''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllCuratorEditingAreas",
        "description": "Delete all curator edit areas.",
        "introduced_version": null,
        "syntax": "'''removeAllCuratorEditingAreas''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllEventHandlers",
        "description": "Removes all event handlers of given type that were added by [[addEventHandler]] '''and''' resets event handler's creation index to 0.",
        "introduced_version": null,
        "syntax": "objectName [[removeAllEventHandlers]] handlerType",
        "parameters": [
            {
                "name": "objectName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "handlerType",
                "description": "see [[:Category:Event Handlers|Event Handlers]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllHandgunItems",
        "description": "Removes all items from [[handgunWeapon]], except magazine.",
        "introduced_version": null,
        "syntax": "[[removeAllHandgunItems]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllItems",
        "description": "Removes all special items from the unit.",
        "introduced_version": null,
        "syntax": "[[removeAllItems]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllItemsWithMagazines",
        "description": "Removes all [[itemsWithMagazines]] from the uniform, vest and backpack. Command essentially clears all unit's containers.",
        "introduced_version": null,
        "syntax": "'''removeAllItemsWithMagazines''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllMPEventHandlers",
        "description": "Removes all MP event handlers of the given type which were added by [[addMPEventHandler]]. Command needs to be executed only on one PC for MP event handler to be removed globally.",
        "introduced_version": null,
        "syntax": "objectName '''removeAllMPEventHandlers''' event",
        "parameters": [
            {
                "name": "objectName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "event",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllMissionEventHandlers",
        "description": "Removes all mission event handlers of the given type which were added by [[addMissionEventHandler]].",
        "introduced_version": null,
        "syntax": "[[removeAllMissionEventHandlers]] type",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllMusicEventHandlers",
        "description": "Removes all music track event handlers of given type.",
        "introduced_version": null,
        "syntax": "'''removeAllMusicEventHandlers''' type",
        "parameters": [
            {
                "name": "type",
                "description": "\"MusicStart\" or \"MusicStop\"",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllOwnedMines",
        "description": "Removes ownership of all owned mines/explosive devices of the given unit",
        "introduced_version": null,
        "syntax": "'''removeAllOwnedMines''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllPrimaryWeaponItems",
        "description": "Removes all items from [[primaryWeapon]], except magazine.",
        "introduced_version": null,
        "syntax": "[[removeAllPrimaryWeaponItems]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeAllWeapons",
        "description": "Removes all weapons and magazines from the given unit. Does not remove map, compass, radio. You can use <tt>unitname [[removeWeapon]] \"itemMap\";</tt>\nfor example. Doesn't quite work with vehicles. If you need to remove all weapons from a vehicle, remove each weapon individually:\n<tt>{tank [[removeWeapon]] _x} [[forEach]] [[weapons]] tank;</tt>",
        "introduced_version": null,
        "syntax": "'''removeAllWeapons''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeBackpack",
        "description": "Removes unit's backpack",
        "introduced_version": null,
        "syntax": "[[removeBackpack]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeBackpackGlobal",
        "description": "Removes backpack from a unit. (even non-local)",
        "introduced_version": null,
        "syntax": "'''removeBackpackGlobal''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "soldier",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeCuratorAddons",
        "description": "Restrict curator use of given addons.",
        "introduced_version": null,
        "syntax": "curatorObj '''removeCuratorAddons''' addons",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "addons",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeCuratorCameraArea",
        "description": "Removes curator camera area.",
        "introduced_version": null,
        "syntax": "curatorObj '''removeCuratorCameraArea''' cameraAreaID",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "cameraAreaID",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeCuratorEditableObjects",
        "description": "Unregister objects which can be edited by a curator.",
        "introduced_version": null,
        "syntax": "curatorObj '''removeCuratorEditableObjects'''",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "objects",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "removeCrew",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeCuratorEditingArea",
        "description": "Removes editing area for given curator.",
        "introduced_version": null,
        "syntax": "curatorObj '''removeCuratorEditingArea''' editAreaID",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "editAreaID",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeDiaryRecord",
        "description": "Remove a log record.",
        "introduced_version": null,
        "syntax": "unit [[removeDiaryRecord]] [subject, diaryRecord]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "subject",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeDiarySubject",
        "description": "Remove a subject from a log.",
        "introduced_version": null,
        "syntax": "unit [[removeDiarySubject]] diaryPage",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "diaryPage",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeDrawIcon",
        "description": "Removes an icon for an editor object.",
        "introduced_version": null,
        "syntax": "map '''removeDrawIcon''' [object,string identifier]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeDrawLinks",
        "description": "Remove all drawn links for the given editor object for the given editor,object type. Pass an empty string as param type to remove all draw,links for an object.",
        "introduced_version": null,
        "syntax": "map '''removeDrawLinks''' [from,param type]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeEventHandler",
        "description": "Removes an event handler added by [[addEventHandler]] by its index.",
        "introduced_version": null,
        "syntax": "objectName [[removeEventHandler]] [type, index]",
        "parameters": [
            {
                "name": "objectName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "see [[:Category:Event Handlers|Event Handlers]]",
                "sqf_type": "String"
            },
            {
                "name": "index",
                "description": "value returned by [[addEventHandler]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeFromRemainsCollector",
        "description": "Removes vehicles/units from the garbage collector, so they do not get deleted automatically; added earlier with [[addToRemainsCollector]]",
        "introduced_version": null,
        "syntax": "'''removeFromRemainsCollector''' remains",
        "parameters": [
            {
                "name": "remains",
                "description": "array of vehicles/units",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeGoggles",
        "description": "Removes goggles from unit (diver goggles for example). This command does not remove NVGoggles. Use [[unassignItem]] and [[removeItem]] or just [[unlinkItem]] for latter.",
        "introduced_version": null,
        "syntax": "'''removeGoggles''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeGroupIcon",
        "description": "Remove icon with given ID from group.",
        "introduced_version": null,
        "syntax": "group '''removeGroupIcon''' iconID",
        "parameters": [
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            },
            {
                "name": "iconID",
                "description": "-",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeHandgunItem",
        "description": "Removes given weapon item, including magazine, from the [[handgunWeapon]]",
        "introduced_version": null,
        "syntax": "unit '''removeHandgunItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "Config class",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeHeadgear",
        "description": "Removes headgear from a unit. If unit has no headgear command quietly fails.",
        "introduced_version": null,
        "syntax": "'''removeHeadgear''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeItem",
        "description": "Removes item from the inventory.",
        "introduced_version": null,
        "syntax": "unit '''removeItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeItemFromBackpack",
        "description": "Removes item from soldier's backpack.",
        "introduced_version": null,
        "syntax": "unit [[removeItemFromBackpack]] item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeItemFromUniform",
        "description": "Removes item from soldier's uniform. Can be used with magazines and weapons too.",
        "introduced_version": null,
        "syntax": "unit '''removeItemFromUniform''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeItemFromVest",
        "description": "Removes item from soldier's vest.",
        "introduced_version": null,
        "syntax": "unit '''removeItemFromVest''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeItems",
        "description": "Removes all items with given template from the inventory.",
        "introduced_version": null,
        "syntax": "unit '''removeItems''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMPEventHandler",
        "description": "Removes MP event handler added by [[addMPEventHandler]].",
        "introduced_version": null,
        "syntax": "unitName '''removeMPEventHandler''' [event, index]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "event",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "index",
                "description": "index returned by [[addMPEventHandler]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMagazine",
        "description": "Remove magazine from the unit.",
        "introduced_version": null,
        "syntax": "unitName '''removeMagazine''' magazineName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "see [[:Category:Weapons|weapons]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMagazineGlobal",
        "description": "Removes the magazine from the unit.",
        "introduced_version": null,
        "syntax": "unit '''removeMagazineGlobal''' magazineName",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMagazineTurret",
        "description": "Removes the magazine from the turret. Use turret path [-1] for driver's turret.\n\nNote: you may create invalid combinations by using this function. When doing so, application behaviour is undefined.",
        "introduced_version": null,
        "syntax": "vehicle '''removeMagazineTurret''' [magazineName, turretPath]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMagazines",
        "description": "Removes all magazines of given type from the unit. If magazine class does not exist, nothing happens, not even .rpt message, unlike with [[addMagazine]] command.",
        "introduced_version": null,
        "syntax": "unitName '''removeMagazines''' magazineName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMagazinesTurret",
        "description": "Removes all magazines of the given type from given vehicle. Use turret path [-1] for driver's turret.",
        "introduced_version": null,
        "syntax": "vehicle '''removeMagazinesTurret''' [magazineName, turretPath]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "magazineName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMenuItem",
        "description": "Removes a previously added menu item.",
        "introduced_version": null,
        "syntax": "map '''removeMenuItem''' index",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "index",
                "description": "index of menu item to delete",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMissionEventHandler",
        "description": "Removes mission event handler added by [[addMissionEventHandler]].",
        "introduced_version": null,
        "syntax": "[[removeMissionEventHandler]] [type, index]",
        "parameters": [
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "index",
                "description": "Index is returned by addMissionEventHandler.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeMusicEventHandler",
        "description": "Removes specified music track event handler.",
        "introduced_version": null,
        "syntax": "[[removeMusicEventHandler]] [type, id]",
        "parameters": [
            {
                "name": "type",
                "description": "\"MusicStart\" or \"MusicStop\"",
                "sqf_type": "String"
            },
            {
                "name": "id",
                "description": "event handler id",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeOwnedMine",
        "description": "Removes ownership over a remotely detonatable mine from the unit.",
        "introduced_version": null,
        "syntax": "unit [[removeOwnedMine]] mine",
        "parameters": [
            {
                "name": "Unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mine",
                "description": "The mine object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removePrimaryWeaponItem",
        "description": "Removes given weapon item, including magazine, from the [[primaryWeapon]].",
        "introduced_version": null,
        "syntax": "unit '''removePrimaryWeaponItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeSecondaryWeaponItem",
        "description": "Removes given weapon item, including magazine, from the [[secondaryWeapon]].",
        "introduced_version": null,
        "syntax": "unit '''removeSecondaryWeaponItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeSimpleTask",
        "description": "Remove a simple task from the list of simple tasks.",
        "introduced_version": null,
        "syntax": "person '''removeSimpleTask''' task",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeSwitchableUnit",
        "description": "Remove a unit from the list of units available for [[Team Switch]].",
        "introduced_version": null,
        "syntax": "[[removeSwitchableUnit]]  unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeTeamMember",
        "description": "Remove given member from given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.",
        "introduced_version": null,
        "syntax": "team '''removeTeamMember''' member",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeUniform",
        "description": "Removes uniform from unit.",
        "introduced_version": null,
        "syntax": "[[removeUniform]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeVest",
        "description": "Removes vest from unit.",
        "introduced_version": null,
        "syntax": "[[removeVest]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeWeapon",
        "description": "Remove weapon from a unit. The unit must be [[local]] to the computer where command is executed. For a global version of this command see [[removeWeaponGlobal]].\n\n'''Note''': It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess). When doing so, application behaviour is undefined.",
        "introduced_version": null,
        "syntax": "unit '''removeWeapon''' weapon",
        "parameters": [
            {
                "name": "unit",
                "description": "unit or vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "weapon class name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeWeaponAttachmentCargo",
        "description": "Remove attachment linked to a weapon from the vehicle cargo space.",
        "introduced_version": null,
        "syntax": "object '''removeWeaponAttachmentCargo''' [weaponID,creatorID,\"attachment\"]",
        "parameters": [
            {
                "name": "object",
                "description": "Vehicle or ammo box",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeWeaponCargo",
        "description": "Remove weapon from the vehicle cargo space.",
        "introduced_version": null,
        "syntax": "object '''removeWeaponCargo''' [weaponID,creatorID]",
        "parameters": [
            {
                "name": "object",
                "description": "Vehicle or ammo box",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeWeaponGlobal",
        "description": "Remove a weapon from a unit. An attempt to remove a weapon, which is not in unit's possession, is simply ignored.",
        "introduced_version": null,
        "syntax": "unit '''removeWeaponGlobal''' weapon",
        "parameters": [
            {
                "name": "unit",
                "description": "unit or vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "weapon class name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "removeWeaponTurret",
        "description": "Removes weapon from the turret. Use turret path [-1] for driver's turret.",
        "introduced_version": null,
        "syntax": "vehicle [[removeWeaponTurret]] [weaponName, turretPath]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "reportRemoteTarget",
        "description": "Shares the target vehicle via datalink to the [[Side]] center for a given time.",
        "introduced_version": null,
        "syntax": "side [[reportRemoteTarget]] [target, time]",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "requiredVersion",
        "description": "Check if version of application is available. If the current version is older than the required one, a warning message is shown and [[false]] is returned. \n\n<br>Version of format '''Major.Minor''', e.g. '''1.30'''",
        "introduced_version": null,
        "syntax": "'''requiredVersion''' version",
        "parameters": [
            {
                "name": "version",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "resetCamShake",
        "description": "Stops any ongoing camera shake effects. Does not prevent new effects from being created. To disallow new effects altogether, [[enableCamShake]] should be used.",
        "introduced_version": null,
        "syntax": "'''resetCamShake'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "resetSubgroupDirection",
        "description": "Sets [[formationDirection | formation direction]] of a group relative to current direction of the group leader. The group units will change their positions to form new formation if new formation direction is different (approx +/- 15 degrees). Does the same as:<br>\n<code>_grp [[setFormDir]] [[getDir]] [[leader]] _grp;</code>",
        "introduced_version": null,
        "syntax": "'''resetSubgroupDirection''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "any member of the [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "resistance",
        "description": "Resistance [[Side|side]]. <br>\nWhen used in a [[format]] statement (<tt>hint [[format]][\"%1\",resistance]</tt>), the string returned is <tt>\"GUER\"</tt>.",
        "introduced_version": null,
        "syntax": "'''resistance'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "resize",
        "description": "Changes the size of the given array. The command does not return new array, it resizes the source array to the desired number of elements. If the new size is bigger than the current size, the new places are filled with [[nil]]s.",
        "introduced_version": null,
        "syntax": "array '''resize''' count",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "count",
                "description": "the new number of elements.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "resources",
        "description": "Returns the resources of a team member. Results are local to the PC on which command was executed.",
        "introduced_version": null,
        "syntax": "'''resources''' member",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "respawnVehicle",
        "description": "Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction. If respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_XXXSIDEXXX), vehicle will spawn on the marker. <br><br>",
        "introduced_version": null,
        "syntax": "vehicle '''respawnVehicle''' [delay, count]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "delay",
                "description": "Delay in seconds between respawns. (-1 to use ''respawnDelay'' from [[description.ext]])",
                "sqf_type": "Number"
            },
            {
                "name": "count",
                "description": "(Optional) - How many times to respawn vehicle in total. (0 - unlimited respawns)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "restartEditorCamera",
        "description": "Restarts the mission editor camera (if it was deleted by a script,for example).",
        "introduced_version": null,
        "syntax": "'''restartEditorCamera''' map",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "reveal",
        "description": "Reveals a target to a [[group]]. If ''toWhom'' is a unit, unit's group is considered. If ''toWhom'' is a vehicle, vehicle commander's group is considered.  The [[knowsAbout|knowledge value]] will be set to the highest level any unit of the revealing side has about the revealed target. If the revealing side has ''no'' knowledge about the revealed target, the value will be set to 1.<br><br>\n\nSince ARMA 2 OA 1.60 the alternative syntax is available. Values greater than or equal 1.5 reveal the side of the target, too. The knowledge level can only be increased, not decreased by this command. Use [[forgetTarget]] first if you need to decrease value.<br><br>",
        "introduced_version": null,
        "syntax": "toWhom [[reveal]] target",
        "parameters": [
            {
                "name": "toWhom",
                "description": "or [[Group]]  which receives revealing information",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "which is revealed",
                "sqf_type": "Object"
            },
            {
                "name": "toWhom",
                "description": "or [[Group]]  which receives revealing information",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "which is revealed",
                "sqf_type": "Object"
            },
            {
                "name": "accuracy",
                "description": "knowledge value, clamped to 0..4 range",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "revealMine",
        "description": "Sets given mine as known to the side. (Knowledge about a mine is always shared across all units in a side.)",
        "introduced_version": null,
        "syntax": "side '''revealMine''' mine",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "mine",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "reverse",
        "description": "Reverses given array by reference (modifies the original array, just like [[resize]]). The alternative syntax can be used to reverse a ANSI [[String|string]]. If Unicode support is desired, see [[forceUnicode]].",
        "introduced_version": null,
        "syntax": "[[reverse]] array",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "string",
                "description": "String to be reversed",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "reversedMouseY",
        "description": "Returns [[true]] if mouse vertical axe is inverted.",
        "introduced_version": null,
        "syntax": "'''reversedMouseY'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "roadAt",
        "description": "Returns a road segment containing given position, [[objNull]] otherwise. Same as [[isOnRoad]] only returns the actual road object instead of boolean.",
        "introduced_version": null,
        "syntax": "'''roadAt''' position",
        "parameters": [
            {
                "name": "position",
                "description": "or  [[Array]] in format [[PositionAGL]] (especially on bridges) or (since Arma 3 v1.99.146460) [[Position2D]], in which case Z will be automatically deduced as the height of the road surface",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - road segment or [[objNull]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "roadsConnectedTo",
        "description": "Find the road segments connected to the given road segment.",
        "introduced_version": null,
        "syntax": "'''roadsConnectedTo''' roadSegment",
        "parameters": [
            {
                "name": "roadSegment",
                "description": "road segment",
                "sqf_type": "Object"
            },
            {
                "name": "roadSegment",
                "description": "road segment",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object]]s - connected road segments",
            "sqf_type": "Array"
        }
    },
    {
        "name": "roleDescription",
        "description": "Returns unit description set in Editor and visible on role selection screen in MP. Works in MP and SP.",
        "introduced_version": null,
        "syntax": "'''roleDescription''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "ropeAttachEnabled",
        "description": "Returns [[true]] if entity can be attached to a rope end.",
        "introduced_version": null,
        "syntax": "[[ropeAttachEnabled]] entity",
        "parameters": [
            {
                "name": "entity",
                "description": "entity to check",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if allowed",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ropeAttachTo",
        "description": "Attaches entity to the rope end with optional offset. For detach operation use [[ropeDetach]].",
        "introduced_version": null,
        "syntax": "[entity, toPoint, ropeEndDownVector] [[ropeAttachTo]] rope",
        "parameters": [
            {
                "name": "entity",
                "description": "entity to be attached to the end of rope",
                "sqf_type": "Object"
            },
            {
                "name": "rope",
                "description": "the rope to which entity will be attached to",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ropeAttachedObjects",
        "description": "Returns an array of all entities that are attached to the transport with [[ropes]]. This command is the opposite of [[ropeAttachedTo]].<br><br>\n[[Image:ropeAttachedObjects.jpg|400px]]",
        "introduced_version": null,
        "syntax": "[[ropeAttachedObjects]] ropesOwner",
        "parameters": [
            {
                "name": "ropesOwner",
                "description": "transport from which a single or multiple ropes are originating",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of attached entities on ropes",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ropeAttachedTo",
        "description": "Returns the ropes owner, the transport to which other entities are attached with [[ropes]]. This command is the opposite of [[ropeAttachedObjects]].<br><br>\n[[Image:ropeAttachedTo.jpg|400px]]",
        "introduced_version": null,
        "syntax": "[[ropeAttachedTo]] cargo",
        "parameters": [
            {
                "name": "cargo",
                "description": "entity attached to the end of a rope",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - a transport from which the ropes originate, the ropes owner",
            "sqf_type": "Object"
        }
    },
    {
        "name": "ropeCreate",
        "description": "Creates a PhysX rope with given params. For <tt>Take on Helicopters</tt> syntax see [[ropeCreate_TKOH]].<br><br>",
        "introduced_version": null,
        "syntax": "[[ropeCreate]] [fromObject, fromPoint, toObject, toPoint, length, ropeStart, ropeEnd]",
        "parameters": [
            {
                "name": "fromObject",
                "description": "[[ropeCreate/transport | transport]] where the rope originates and which fly behavior will be affected",
                "sqf_type": "Object"
            },
            {
                "name": "fromPoint",
                "description": "or [[Array]] - position for the rope start, either a memory point [[String]] or relative offset [[Array]]",
                "sqf_type": "String"
            },
            {
                "name": "toObject",
                "description": "entity which is automatically [[ropeAttachTo | attached to]] the end of the rope",
                "sqf_type": "Object"
            },
            {
                "name": "toPoint",
                "description": "or [[Array]] - position for the rope end, either a memory point [[String]] or relative offset [[Array]]",
                "sqf_type": "String"
            },
            {
                "name": "fromObject",
                "description": "[[ropeCreate/transport | transport]] where the rope originates and which fly behavior will be affected",
                "sqf_type": "Object"
            },
            {
                "name": "fromPoint",
                "description": "or [[Array]] - position for the rope start, either a memory point [[String]] or relative offset [[Array]]",
                "sqf_type": "String"
            },
            {
                "name": "length",
                "description": "rope length in meters",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Object]] - created rope or [[objNull]] on failure",
            "sqf_type": "Object"
        }
    },
    {
        "name": "ropeCut",
        "description": "Cuts the given rope to the specified length. If some entity was attached to the end of the rope, it will be detached. The rope remains attached to its parent transport and if the length is set to 0 or even negative does not get destroyed. Use [[ropeDestroy]] to remove it completely.<br><br>",
        "introduced_version": null,
        "syntax": "[[ropeCut]] [rope, length]",
        "parameters": [
            {
                "name": "rope",
                "description": "rope object obtained from [[ropeCreate]]",
                "sqf_type": "Object"
            },
            {
                "name": "length",
                "description": "length of the rope in meters after the cut",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ropeDestroy",
        "description": "Destroys the given rope. If the rope is attached to a vehicle, it will be detached and then destroyed.",
        "introduced_version": null,
        "syntax": "[[ropeDestroy]] rope",
        "parameters": [
            {
                "name": "rope",
                "description": "rope object returned by [[ropeCreate]] command",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ropeDetach",
        "description": "Detaches attached object from rope (i.e. detaches rope end from attached to it entity). See [[ropeAttachTo]] for attach operation.",
        "introduced_version": null,
        "syntax": "attachedObject [[ropeDetach]] rope",
        "parameters": [
            {
                "name": "attachedObject",
                "description": "entity attached to the end of rope",
                "sqf_type": "Object"
            },
            {
                "name": "rope",
                "description": "rope object to which entity is attached",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ropeEndPosition",
        "description": "Returns start and end positions for the given [[ropeCreate | rope]]. If command fails, empty array <tt>[]</tt> is returned.",
        "introduced_version": null,
        "syntax": "[[ropeEndPosition]] rope",
        "parameters": [
            {
                "name": "rope",
                "description": "rope object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - array in format [startPos, endPos], where:\n* startPos: [[Array]] - rope start position in format [[PositionAGL]]\n* endPos: [[Array]] - rope end position in format [[PositionAGL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "ropeLength",
        "description": "Return rope length in meters (set by [[ropeCreate]], [[ropeCut]], [[ropeUnwind]]).",
        "introduced_version": null,
        "syntax": "[[ropeLength]] rope",
        "parameters": [
            {
                "name": "rope",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "ropeUnwind",
        "description": "Increases or decreases the rope length by the given amount. Use relative parameter for changing rope length +/- from current length.",
        "introduced_version": null,
        "syntax": "[[ropeUnwind]] [rope, speed, length, relative]",
        "parameters": [
            {
                "name": "rope",
                "description": "rope object",
                "sqf_type": "Object"
            },
            {
                "name": "speed",
                "description": "animation speed in m/s with which to lengthen or shorten the rope. Range: 0.01...20.",
                "sqf_type": "Number"
            },
            {
                "name": "length",
                "description": "the amount of length change in meters. Range: 0.1...100.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "ropeUnwound",
        "description": "Returns [[false]] if rope length changing animation is in progress. Returns [[true]] if animation is done.",
        "introduced_version": null,
        "syntax": "[[ropeUnwound]] rope",
        "parameters": [
            {
                "name": "rope",
                "description": "given rope object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if unwinding is complete",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "ropes",
        "description": "Returns all ropes attached to a ropes owner transport in an [[Array]], otherwise an empty array <tt>[]</tt> is returned.",
        "introduced_version": null,
        "syntax": "[[ropes]] ropesOwner",
        "parameters": [
            {
                "name": "ropesOwner",
                "description": "a transport from which the ropes originate",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of the actual rope objects",
            "sqf_type": "Array"
        }
    },
    {
        "name": "rotorsForcesRTD",
        "description": "Returns force produced by rotors.",
        "introduced_version": null,
        "syntax": "[[rotorsForcesRTD]] RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "rotorsRpmRTD",
        "description": "Returns rotors RPM.",
        "introduced_version": null,
        "syntax": "[[rotorsRpmRTD]] RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "round",
        "description": "Rounds up or down to the closest integer.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "runInitScript",
        "description": "Fades in mission screen and re-executes <tt>init.sqf</tt> and <tt>init.sqs</tt> scripts. In [[Eden Editor]] the code inside the \"Init\" mission attribute is executed.",
        "introduced_version": null,
        "syntax": "'''runInitScript'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "safeZoneH",
        "description": "[[Image:safezone.jpg|600px]]<br><br>\n\nReturns the height of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the Y axis, the value will be positive but resulting Y will end up beyond the bottom border. Therefore in order to calculate Y of the bottom screen border, the length of [[safeZoneY]] must be subtracted from [[safeZoneH]], but because it is negative, it must be added instead. <tt>_screenBottomBorderY",
        "introduced_version": null,
        "syntax": "[[SafeZoneH]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "safeZoneW",
        "description": "[[Image:safezone.jpg|600px]]<br><br>\n\nReturns the width of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the X axis, the value will be positive but resulting X will end up beyond the right border. Therefore in order to calculate X of the right screen border, the length of [[safeZoneX]] must be subtracted from [[safeZoneW]], but because it is negative, it must be added instead. <tt>_screenRightBorderX",
        "introduced_version": null,
        "syntax": "'''safeZoneW'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "safeZoneWAbs",
        "description": "Returns [[SafeZone]] width (of all monitors, in case there's more than one)",
        "introduced_version": null,
        "syntax": "'''safeZoneWAbs'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "safeZoneX",
        "description": "[[Image:safezone.jpg|600px]]<br><br>\n\nReturns the X of the left border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the left border of the screen. Since it is going in opposite way of the X axis, the value is negative. The measurement units depend on the current screen resolution [[getResolution]]. See also [[SafeZone]]",
        "introduced_version": null,
        "syntax": "'''SafeZoneX'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "safeZoneXAbs",
        "description": "Returns [[SafeZone]] left border (of all monitors, in case there's more than one)",
        "introduced_version": null,
        "syntax": "'''safeZoneXAbs'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "safeZoneY",
        "description": "[[Image:safezone.jpg|600px]]<br><br>\n\nReturns the Y of the top border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the top border of the screen. Since it is going in opposite way of the Y axis, the value is negative. The measurement units depend on the current screen resolution [[getResolution]]. See also [[SafeZone]]",
        "introduced_version": null,
        "syntax": "'''SafeZoneY'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "save3DENInventory",
        "description": "Saves the current state of entities' inventory to the current mission's [[Mission.sqm]].",
        "introduced_version": null,
        "syntax": "[[save3DENInventory]] entities",
        "parameters": [
            {
                "name": "entities",
                "description": "of types [[Eden Entity]] or [[Eden ID]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "saveGame",
        "description": "Autosaves the game (used for Retry). The game can then be loaded from the last autosave with [[loadGame]]. Will not save if the player is [[objNull | null]] or dead.<br><br>",
        "introduced_version": null,
        "syntax": "'''saveGame'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "saveIdentity",
        "description": "Saves person's identity to [[Objects.sav]] file in campaign directory as entry name.",
        "introduced_version": null,
        "syntax": "unitName '''saveIdentity''' name",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "saveJoysticks",
        "description": "Saves joysticks key mappings into the joysticks.cfg file. Engine add these joysticks to the Joystick Scheme mapping dialog in options controls section.",
        "introduced_version": null,
        "syntax": "'''saveJoysticks'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "saveOverlay",
        "description": "Save the current overlay.",
        "introduced_version": null,
        "syntax": "'''saveOverlay''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "saveProfileNamespace",
        "description": "Saves the variables stored in [[profileNamespace]] to the persistent active user profile. \n\n* '''Warning''': this is a file operation, which makes it expensive! It is not recommended to do this at a high frequency in a loop for example. It is however also recommended not to change a large amount of variables and wait long before saving, because certain game crashes may cause a loss of data. \n\n* '''Warning''': saving a lot of data can quickly increase the size of the profile variables file, so keep an eye on this.\n\n* '''Warning''': TKOH's Heliport status (used in the Career mode for example) is stored in this file, so be mindful of working with this technology to avoid losing data and progress.",
        "introduced_version": null,
        "syntax": "'''saveProfileNamespace'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "saveStatus",
        "description": "Saves object's properties to [[Objects.sav]] file in campaign directory as entry name.",
        "introduced_version": null,
        "syntax": "object '''saveStatus''' name",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "saveVar",
        "description": "Save variable value into the campaign space. This variable is available to all following missions in the campaign.",
        "introduced_version": null,
        "syntax": "'''saveVar''' varname",
        "parameters": [
            {
                "name": "varname",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "savingEnabled",
        "description": "Check if saving the game is enabled.",
        "introduced_version": null,
        "syntax": "'''savingEnabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "say",
        "description": "Make unit say given sound. The sound is defined in [[Description.ext#CfgSounds|CfgSounds]]. If the [[Object#Unit|unit]] is a [[Object#Person|person]], it will also perform corresponding lipsync effect provided an appropriate .lip file has been created for this sound.\n\n* A dead or non-existent unit obviously cannot say anything.\n* If the camera is not within given range, title is not shown and the sound will not be heard.\n* See also [[playSound]] in order to play a sound wherever the [[cameraOn|camera/player]] is.",
        "introduced_version": null,
        "syntax": "from [[say]] sound",
        "parameters": [
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "sound classname",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "sound classname",
                "sqf_type": "String"
            },
            {
                "name": "maxTitlesDistance",
                "description": "max distance at which the sound can be heard. Default: 100 m.",
                "sqf_type": "Number"
            },
            {
                "name": "speed",
                "description": "(Optional, default 1) pitch of the sound",
                "sqf_type": "Number"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "to",
                "description": "target",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "sound classname",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "to",
                "description": "target",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "sound classname",
                "sqf_type": "String"
            },
            {
                "name": "maxTitlesDistance",
                "description": "max distance at which the sound can be heard. Default: 100 m.",
                "sqf_type": "Number"
            },
            {
                "name": "speed",
                "description": "(Optional, default 1) pitch of the sound.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "say2D",
        "description": "Plays given sound in 2D",
        "introduced_version": null,
        "syntax": "from [[say2D]] sound",
        "parameters": [
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "classname of the sound to be played. Defined in CfgSounds including [[Description.ext]]",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "classname of the sound to be played. Defined in CfgSounds including [[Description.ext]]",
                "sqf_type": "String"
            },
            {
                "name": "maxTitlesDistance",
                "description": "max distance at which the sound can be heard. Default: 100 m.",
                "sqf_type": "Number"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "to",
                "description": "target",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "classname of the sound to be played. Defined in CfgSounds including [[Description.ext]]",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "to",
                "description": "target",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "classname of the sound to be played. Defined in CfgSounds including [[Description.ext]]",
                "sqf_type": "String"
            },
            {
                "name": "maxTitlesDistance",
                "description": "max distance at which the sound can be heard. Default: 100 m.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "say3D",
        "description": "Unit or object will say given sound in 3D Space.\nThis allows broadcasting of positional music or sound from a source, without having to script a fade sound or music command.\nCompare this with [[say2D]] which will always play a sound at the location of the player after he has been in the vicinity of a broadcasting sound.\nSound is defined in [[Description.ext#CfgSounds|\"CfgSounds\"]] of the [[Description.ext]] or main config.",
        "introduced_version": null,
        "syntax": "from [[say3D]] sound",
        "parameters": [
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "classname of the sound to be played. Defined in CfgSounds including [[Description.ext]]",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "classname of the sound to be played. Defined in CfgSounds including [[Description.ext]]",
                "sqf_type": "String"
            },
            {
                "name": "maxDistance",
                "description": "(Optional, default 100) max distance in meter at which the sound can be heard.",
                "sqf_type": "Number"
            },
            {
                "name": "pitch",
                "description": "(Optional, default 1) pitch of the sound.",
                "sqf_type": "Number"
            },
            {
                "name": "offset",
                "description": "(Optional) Offset in seconds. Same with [[playMusic]]. Default: 0",
                "sqf_type": "Scalar"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "to",
                "description": "target",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "classname of the sound to be played. Defined in CfgSounds including [[Description.ext]]",
                "sqf_type": "String"
            },
            {
                "name": "from",
                "description": "origin of the sound",
                "sqf_type": "Object"
            },
            {
                "name": "to",
                "description": "target",
                "sqf_type": "Object"
            },
            {
                "name": "sound",
                "description": "classname of the sound to be played. Defined in CfgSounds including [[Description.ext]]",
                "sqf_type": "String"
            },
            {
                "name": "maxDistance",
                "description": "(Optional, default 100) max distance in meter at which the sound can be heard.",
                "sqf_type": "Number"
            },
            {
                "name": "pitch",
                "description": "(Optional, default 1) pitch of the sound.",
                "sqf_type": "Number"
            },
            {
                "name": "offset",
                "description": "(Optional) Offset in seconds. Same with [[playMusic]]. Default: 0",
                "sqf_type": "Scalar"
            }
        ],
        "returns": {
            "description": "[[Nothing]],",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "scopeName",
        "description": "Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like [[breakOut]] and [[breakTo]]. Scope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.",
        "introduced_version": null,
        "syntax": "'''scopeName''' name",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "score",
        "description": "Returns the person's score in MP.",
        "introduced_version": null,
        "syntax": "'''score''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "scoreSide",
        "description": "Returns score for the given [[Side|side]]. MP Only.",
        "introduced_version": null,
        "syntax": "'''scoreSide''' side",
        "parameters": [
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "screenToWorld",
        "description": "Returns the position on landscape ([[PositionAGL]]) corresponding to the given point on screen (in UI coordinates).",
        "introduced_version": null,
        "syntax": "'''screenToWorld''' screen",
        "parameters": [
            {
                "name": "screen",
                "description": "Screen position [x,y] (see [[SafeZone]] for more info)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - [[PositionAGL]], world position on surface [x,y,0]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "screenshot",
        "description": "Captures a screenshot and stores it to given filename. <u>PNG is the only available format</u> and the file must have .png extension. \n<br><br>\nThe file is saved into ''Screenshots'' folder in the [[Profile]] directory. The folder is by default limited to 250 MB to prevent abuse.\n<br>\nTo increase the limit, add the following line at the end of the profile file:\n<code>maxScreenShotFolderSizeMB",
        "introduced_version": null,
        "syntax": "[[screenshot]] filename",
        "parameters": [
            {
                "name": "filename",
                "description": "desired path and name relative <tt><USERDIR>\\Screenshot\\</tt>. If empty string \"\" used, the filename will be autogenerated in format: <tt>YYYY_MM_DD_hh_mm_ss.png</tt>",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "scriptDone",
        "description": "Check if a script is finished running using the [[Script_(Handle)]] returned by [[execVM]] or [[spawn]].",
        "introduced_version": null,
        "syntax": "'''scriptDone''' handle",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "scriptName",
        "description": "Assign a user friendly name to the [[Script_(Handle)|VM script]] this command is executed from.\n\nOnce name is assigned, it cannot be changed.",
        "introduced_version": null,
        "syntax": "'''scriptName''' name",
        "parameters": [
            {
                "name": "name",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "scriptNull",
        "description": "A non-existing [[Script]] or script that has finished ([[scriptDone]]). To compare non-existent scripts use [[isNull]] or [[isEqualTo]]:\n* <tt>[[scriptNull]]",
        "introduced_version": null,
        "syntax": "'''scriptNull'''",
        "parameters": [],
        "returns": {
            "description": "[[Script]] - NULL script",
            "sqf_type": "Script"
        }
    },
    {
        "name": "scudState",
        "description": "Current state of given Scud launcher. Following states are recognized: \n\n*0 - No activity  \n*1 - Launch preparation, \n*2 - Launch prepared\n*3 - Ignition  \n*4 - Launched.",
        "introduced_version": null,
        "syntax": "[[Number]]",
        "parameters": [
            {
                "name": "scudName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "secondaryWeapon",
        "description": "Returns name of a unit's secondary weapon (empty string if none).",
        "introduced_version": null,
        "syntax": "[[secondaryWeapon]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "secondaryWeaponItems",
        "description": "Returns array with all items assigned to the [[secondaryWeapon]] except magazines. Use [[secondaryWeaponMagazine]] command for the latter. This command is used for infantry weapons only.",
        "introduced_version": null,
        "syntax": "'''secondaryWeaponItems''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] -  [silencer, laserpointer/flashlight, optics, bipod]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "secondaryWeaponMagazine",
        "description": "Collects all loaded [[magazines]] from all [[secondaryWeapon]] muzzles and returns them in [[Array]], otherwise it returns []. This command is used for infantry weapons only.",
        "introduced_version": null,
        "syntax": "'''secondaryWeaponMagazine''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "select",
        "description": "Selects an element from an array, config entry from [[Config]] or substring from a string or a range from an array.",
        "introduced_version": null,
        "syntax": "array  '''select''' index",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "index",
                "description": "Index 0 denotes the first element, 1 the second, etc. If index has decimal places it gets rounded down for fractions less than or equal .5, otherwise it gets rounded up.",
                "sqf_type": "Number"
            },
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "boolean",
                "description": "[[true]] => 1, [[false]] => 0",
                "sqf_type": "Boolean"
            },
            {
                "name": "config",
                "description": "",
                "sqf_type": "Config"
            },
            {
                "name": "index",
                "description": "Index 0 denotes the first element, 1 the second, etc. If index has decimal places it gets rounded down for fractions less than or equal .5, otherwise it gets rounded up.",
                "sqf_type": "Number"
            },
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "start",
                "description": "String position to start selection from. 0 denotes the first character of the string, 1 the second, etc. If passed number has decimal places it gets rounded down for fractions less than or equal .5, otherwise it gets rounded up.",
                "sqf_type": "Number"
            },
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "start",
                "description": "Array index to start selection from.",
                "sqf_type": "Number"
            },
            {
                "name": "count",
                "description": "Number of array elements to select. If the selected range exceeds source array boundaries, selection will be made up to the last element of the array.",
                "sqf_type": "Number"
            },
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "expression",
                "description": "expression that is expected to return [[Boolean]] or [[Nothing]]. If [[true]] is returned, the original array value of currently tested element [[_x]] will be added to the output array",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Anything]] - a <u>reference</u> to array element given by its index",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "selectBestPlaces",
        "description": "Find the places with the maximum value of ''expression'' in the given area. Places can be on water. Results are sorted by value. Search pattern is randomised every command execution.",
        "introduced_version": null,
        "syntax": "[[selectBestPlaces]] [position, radius, expression, precision, sourcesCount]",
        "parameters": [
            {
                "name": "position",
                "description": ", [[Position3D]] or [[Position2D]]",
                "sqf_type": "Object"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "precision",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "sourcesCount",
                "description": "max results to return. '''maximum 50'''",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - in Format",
            "sqf_type": "Array"
        }
    },
    {
        "name": "selectDiarySubject",
        "description": "Selects the subject page in a log.<br><br>",
        "introduced_version": null,
        "syntax": "person [[selectDiarySubject]] subject",
        "parameters": [
            {
                "name": "person",
                "description": "Player",
                "sqf_type": "Object"
            },
            {
                "name": "subject",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "selectEditorObject",
        "description": "Select an editor object. Does not un-select previously selected objects.",
        "introduced_version": null,
        "syntax": "map '''selectEditorObject''' object",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "object",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Any]]",
            "sqf_type": "Any"
        }
    },
    {
        "name": "selectLeader",
        "description": "Select the group's leader. Group locality can be checked with [[local]] command and group ownership with [[groupOwner]] command.",
        "introduced_version": null,
        "syntax": "group [[selectLeader]] unitName",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "selectMax",
        "description": "Returns the array element with [[max]]imum numerical value. Engine solution to [[BIS_fnc_greatestNum]] and [[BIS_fnc_findExtreme]]. Therefore it is expected that supplied array consists of [[Number]]s only. [[Boolean]]s however are also supported and will be evaluated as [[Number]]s: [[true]] - 1, [[false]] - 0.  [[nil]] value treated as 0.",
        "introduced_version": null,
        "syntax": "'''selectMax''' array",
        "parameters": [
            {
                "name": "array",
                "description": "array of [[Number]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Anything]] - element with [[max]]imum numerical value",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "selectMin",
        "description": "Returns the array element with [[min]]imum numerical value. Engine solution to [[BIS_fnc_lowestNum]] and [[BIS_fnc_findExtreme]]. Therefore it is expected that supplied array consists of [[Number]]s only.  [[Boolean]]s however are also supported and will be evaluated as [[Number]]s: [[true]] - 1, [[false]] - 0. [[nil]] value treated as 0.",
        "introduced_version": null,
        "syntax": "'''selectMin''' array",
        "parameters": [
            {
                "name": "array",
                "description": "array of [[Number]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Anything]] - element with [[min]]imum numerical value",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "selectNoPlayer",
        "description": "Switches player to no unit, makes [[player]] return [[objNull]]. SP only, the command is completely ignored in MP.",
        "introduced_version": null,
        "syntax": "'''selectNoPlayer'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "selectPlayer",
        "description": "Move player into given unit. Some usage advices:\n* Try avoiding [[selectPlayer]] on editor-placed units in multiplayer, as it may, on occasion, lead to some undefined behaviour.\n* If you need to [[selectPlayer]] into another unit, consider [[createUnit|creatingUnit]] dynamically.<br><br>",
        "introduced_version": null,
        "syntax": "[[selectPlayer]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "selectRandom",
        "description": "Returns a random element from the given array. Engine solution to [[BIS_fnc_selectRandom]]",
        "introduced_version": null,
        "syntax": "'''selectRandom''' array",
        "parameters": [
            {
                "name": "array",
                "description": "array of anything",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Anything]] - random selected value or [[Nothing]] if array is empty",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "selectRandomWeighted",
        "description": "Returns a random element from the given array according to assigned weights. Engine solution to [[BIS_fnc_selectRandomWeighted]]. A few notes:\n* Negative weights are not supported\n* If an item's weight is 0, the item is ignored\n* The weights don't have to total to 1 \n* If numbers of items and weights do not match, the shortest array is used\n* A single array Syntax is slightly faster then Alt Syntax",
        "introduced_version": null,
        "syntax": "'''selectRandomWeighted''' valuesAndWeights",
        "parameters": [
            {
                "name": "values",
                "description": "array of [[Anything]]",
                "sqf_type": "Array"
            },
            {
                "name": "weights",
                "description": "array of [[Number]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Anything]] - random weighted value or [[Nothing]] if array is empty or all weights are 0",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "selectWeapon",
        "description": "Selects the given weapon.",
        "introduced_version": null,
        "syntax": "unitName '''selectWeapon''' muzzleName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "muzzleName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "selectWeaponTurret",
        "description": "Selects the given weapon on specified turret. Use turret path [-1] for driver's turret. Since ver. 1.63.136864 this command supports both weapon name and muzzle name.",
        "introduced_version": null,
        "syntax": "vehicle '''selectWeaponTurret''' [weapon, turretPath]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "weapon class name or muzzle class name",
                "sqf_type": "String"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "selectedEditorObjects",
        "description": "Returns a list of currently selected editor objects.",
        "introduced_version": null,
        "syntax": "'''selectedEditorObjects''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "selectionNames",
        "description": "Returns the list of model selections",
        "introduced_version": null,
        "syntax": "[[selectionNames]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "LOD",
                "description": "could be: <tt>\"Memory\"</tt>, <tt>\"Geometry\"</tt>, <tt>\"FireGeometry\"</tt>, <tt>\"LandContact\"</tt>, <tt>\"HitPoints\"</tt>",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - List of selection names",
            "sqf_type": "Array"
        }
    },
    {
        "name": "selectionPosition",
        "description": "Search for selection in the object model (first in the memory level, then in geometry LODs).<br>\nReturns position in model space. In",
        "introduced_version": null,
        "syntax": "object '''selectionPosition''' selectionName",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "selectionName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "selectionName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - in format [[PositionRelative]] ([x,y,z] relative position in model space)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "sendAUMessage",
        "description": "Send the command to the list of clients.",
        "introduced_version": null,
        "syntax": "'''sendAUMessage''' [clientList, command]",
        "parameters": [
            {
                "name": "clientList",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "command",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sendSimpleCommand",
        "description": "Sends a simple command to the vehicle's driver / gunner (air vehicles ignore it). See also [[vehicleMoveInfo]].<br><br>",
        "introduced_version": null,
        "syntax": "vehicleName '''sendSimpleCommand''' command",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "command",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sendTask",
        "description": "Create a new AI task (subtask of parentTask). Type is name of registered task type.",
        "introduced_version": null,
        "syntax": "sender '''sendTask''' [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...]",
        "parameters": [],
        "returns": {
            "description": "[[Task]]",
            "sqf_type": "Task"
        }
    },
    {
        "name": "sendTaskResult",
        "description": "Send a result of the task to the task sender.",
        "introduced_version": null,
        "syntax": "task '''sendTaskResult''' [state,result,sentence]",
        "parameters": [
            {
                "name": "task",
                "description": "-",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sendUDPMessage",
        "description": "Send message to given address using UDP protocol. Returns false if the message has not been delivered \n\nNote: Not implemented (see talk page for more info).",
        "introduced_version": null,
        "syntax": "'''sendUDPMessage''' [ip, port, message]",
        "parameters": [
            {
                "name": "ip",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "port",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "message",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "serverCommand",
        "description": "Executes the given [[Multiplayer_Server_Commands|server command]].\n* Available commands for execution can be found with [[serverCommandAvailable]].\n* Commands that can be executed can be found with [[serverCommandExecutable]].",
        "introduced_version": null,
        "syntax": "[[serverCommand]] command",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] - always [[true]] for some reason (since",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "serverCommandAvailable",
        "description": "Returns [[true]] if given [[serverCommand]] is available on current machine, [[false]] if not. Here is the general table of availability of Arma 3 server commands:\n<br><br>\n* '''Available to anyone'''\n<blockquote><tt>#login</tt>, <tt>#userlist</tt>, <tt> #beclient</tt>, <tt> #vote</tt></blockquote>\n* '''Available to any [[admin]] (voted in / logged in) or [[isServer|server]] host'''\n<blockquote><tt>#kick</tt>, <tt>#debug</tt></blockquote>\n* '''Available to logged in [[admin]] or [[isServer|server]] host'''\n<blockquote><tt>#lock</tt>, <tt>#unlock</tt>, <tt>#maxping</tt>, <tt>#maxdesync</tt>, <tt>#maxpacketloss</tt></blockquote>\n* '''Available to any [[admin]] (voted in / logged in)'''\n<blockquote><tt>#logout</tt>, <tt>#restart</tt>, <tt>#mission</tt>, <tt>#missions</tt>, <tt>#reassign</tt>, <tt>#monitor</tt>, <tt>#init</tt></blockquote>\n* '''Available to logged in [[admin]]'''\n<blockquote><tt>#shutdown</tt>, <tt>#restartserver</tt>, <tt>#exec</tt>, <tt>#beserver</tt>, <tt>#monitords</tt>, <tt>#logentities</tt>, <tt>#exportjipqueue</tt></blockquote>\n* '''Available to logged in [[admin]] on certain game builds'''\n<blockquote><tt>#captureframe</tt>, <tt>#enabletest</tt>, <tt>#disabletest</tt></blockquote>\nTo check if server command could be executed in current environment use [[serverCommandExecutable]]. For more information on what each server command does, see [[Multiplayer Server Commands]].<br><br>\n'''NOTE''': When password variant of [[serverCommand]] is used on dedicated server, the table above does not apply as everything is available to it.",
        "introduced_version": null,
        "syntax": "'''serverCommandAvailable''' command",
        "parameters": [
            {
                "name": "command",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "serverCommandExecutable",
        "description": "Returns [[true]] if the [[serverCommand]] can be performed on the machine and in this exact environment, otherwise [[false]]. serverCommand can be executed only from [[User Interface Event Handlers]], and this command also checks if that's the case.",
        "introduced_version": null,
        "syntax": "[[serverCommandExecutable]] command",
        "parameters": [
            {
                "name": "command",
                "description": "see [[Multiplayer_Server_Commands#Commands|Multiplayer Server Commands]] for all available commands",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "serverName",
        "description": "Returns name of the hosting server in MP, \"\" in SP.",
        "introduced_version": null,
        "syntax": "[[serverName]]",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "serverTime",
        "description": "Returns the time since last server restart, synced to all clients in MP. The syncing is happening every 5 minutes, but you can force the next sync earlier by executing [[estimatedTimeLeft]] command. The time returned is also different to the time returned by [[time]] and [[diag_tickTime]] commands on server. Returns 0 in SP.<br><br>",
        "introduced_version": null,
        "syntax": "'''serverTime'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "set",
        "description": "Changes the element at the given (zero-based) index of the [[Array|array]].<br>\nIf the index is out of bounds, the array will [[resize]] to incorporate the index as its last value, padding with [[nil]] as necessary. See [[set#Examples| Example 4]].",
        "introduced_version": null,
        "syntax": "array '''set''' [index, value]",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "set3DENAttribute",
        "description": "Set one of entity [[Eden Editor: Entity Attributes|attributes]]. For the list of all attributes with their properties, see [[Eden_Editor:_Setting_Attributes#Attributes|Setting Attributes]].",
        "introduced_version": null,
        "syntax": "entity '''set3DENAttribute''' [",
        "parameters": [
            {
                "name": "class",
                "description": "attribute name",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "new attribute value",
                "sqf_type": "Any"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the value was set",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "set3DENAttributes",
        "description": "Set entity [[Eden Editor: Entity Attributes|attributes]].\n<br><br>\nAn attribute is identified by its <tt>property</tt> (<tt>data</tt> when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see [[Eden_Editor:_Setting_Attributes#Attributes|Setting Attributes]].",
        "introduced_version": null,
        "syntax": "'''set3DENAttributes''' [",
        "parameters": [
            {
                "name": "entities",
                "description": "of types [[Eden Entity]] or [[Eden ID]]",
                "sqf_type": "Array"
            },
            {
                "name": "class",
                "description": "attribute name",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "new attribute value",
                "sqf_type": "Any"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the value was set",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "set3DENGrid",
        "description": "Sets the grid increment for the given transformation type.<br>\nTransformation types:\n* Rotation - \"r\"\n* Translation - \"t\"\n* Scale - \"s\"",
        "introduced_version": null,
        "syntax": "'''set3DENGrid''' [type,value]",
        "parameters": [
            {
                "name": "type",
                "description": "name of transformation",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "transformation increment",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "set3DENIconsVisible",
        "description": "Toggle visibility of [[Eden Editor]] icons.",
        "introduced_version": null,
        "syntax": "'''set3DENIconsVisible''' [showMap, showScene]",
        "parameters": [
            {
                "name": "showScene",
                "description": "visibility in the scene",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "set3DENLayer",
        "description": "Set layer for [[Eden Entity]].",
        "introduced_version": null,
        "syntax": "entity '''set3DENLayer''' layerID",
        "parameters": [
            {
                "name": "layerID",
                "description": "layer ID as returned by [[add3DENLayer]] command",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the entity was moved succesfully",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "set3DENLinesVisible",
        "description": "Toggle visibility of [[Eden Editor]] lines.",
        "introduced_version": null,
        "syntax": "'''set3DENLinesVisible''' [showMap, showScene]",
        "parameters": [
            {
                "name": "showScene",
                "description": "visibility in the scene",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "set3DENLogicType",
        "description": "Sets the new type of Logic object(s). For other objects use [[set3DENObjectType]]",
        "introduced_version": null,
        "syntax": "objects '''set3DENLogicType''' classname",
        "parameters": [
            {
                "name": "objects",
                "description": "of [[Object]]s",
                "sqf_type": "Array"
            },
            {
                "name": "classname",
                "description": "name of the cfgVehicles class",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "set3DENMissionAttribute",
        "description": "Set [[Eden_Editor:_Scenario_Atttributes|scenario attribute]].\n<br><br>\nAn attribute is identified by its <tt>property</tt> (<tt>data</tt> when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see [[Eden_Editor:_Setting_Attributes#Attributes|Setting Attributes]].",
        "introduced_version": null,
        "syntax": "Set scenario attribute.\n\nAn attribute is identified by its property (data when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes.",
        "parameters": [
            {
                "name": "section",
                "description": "attribute section",
                "sqf_type": "String"
            },
            {
                "name": "class",
                "description": "attribute name",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "new attribute value",
                "sqf_type": "Any"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the value was set",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "set3DENMissionAttributes",
        "description": "Set [[Eden_Editor:_Scenario_Atttributes|scenario attributes]].\n<br><br>\nAn attribute is identified by its <tt>property</tt> (<tt>data</tt> when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see [[Eden_Editor:_Setting_Attributes#Scenario|Mission Attributes]].",
        "introduced_version": null,
        "syntax": "'''set3DENMissionAttributes'''",
        "parameters": [
            {
                "name": "section",
                "description": "attribute section",
                "sqf_type": "String"
            },
            {
                "name": "class",
                "description": "attribute name",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "new attribute value",
                "sqf_type": "Any"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if the value was set",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "set3DENModelsVisible",
        "description": "Enables or disables lines visibility in 3DEN",
        "introduced_version": null,
        "syntax": "set3DENModelsVisible [map, scene]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "scene",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "set3DENObjectType",
        "description": "Sets the classname of one or more given Eden Editor [[Eden Editor: Object|objects]]. For Logic objects use [[set3DENLogicType]]",
        "introduced_version": null,
        "syntax": "objects '''set3DENObjectType''' classname",
        "parameters": [
            {
                "name": "objects",
                "description": "of [[Object]]s",
                "sqf_type": "Array"
            },
            {
                "name": "classname",
                "description": "name of the cfgVehicles class",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "set3DENSelected",
        "description": "Changes selection in 3den to what is inside entities array.",
        "introduced_version": null,
        "syntax": "'''set3DENSelected''' entities",
        "parameters": [
            {
                "name": "entities",
                "description": "of types [[Eden Entity]] or [[Eden ID]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAccTime",
        "description": "Set time acceleration coefficient. May be also used to slow time in cutscenes. This command does NOT work in multiplayer. accFactor is clamped to [1/128; 4].",
        "introduced_version": null,
        "syntax": "'''setAccTime''' accFactor",
        "parameters": [
            {
                "name": "accFactor",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setActualCollectiveRTD",
        "description": "Sets the collective pitch control to a specific position, regardless of input devices (until those are changed).\n* 0: collective fully down\n* ~0.7: approximate stable hover position\n* 1: collective fully up",
        "introduced_version": null,
        "syntax": "helicopterRTD [[setActualCollectiveRTD]] value",
        "parameters": [
            {
                "name": "value",
                "description": "collective position",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAirplaneThrottle",
        "description": "Sets a wanted throttle position, works only on player's vehicle.",
        "introduced_version": null,
        "syntax": "airplane [[setAirplaneThrottle]] value",
        "parameters": [
            {
                "name": "airplane",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "Wanted throttle",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAirportSide",
        "description": "Set owning side of the airport. [[Arma: Airport IDs|ID]] is the number to identify which airport on the island you want to check.",
        "introduced_version": null,
        "syntax": "id [[setAirportSide]] side",
        "parameters": [
            {
                "name": "id",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAmmo",
        "description": "Sets custom ammo count in the currently loaded magazine of the specified weapon. The unit must be [[local]] to the computer where command is executed.",
        "introduced_version": null,
        "syntax": "unit '''setAmmo''' [weapon, count]",
        "parameters": [
            {
                "name": "unit",
                "description": "Gunner or vehicle.",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "count",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAmmoCargo",
        "description": "Set amount of ammo resources in cargo space of a rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo.\n\nThe <u>actual</u> '''quantity''' to work with is determined by the model's class in [[CfgVehicles]]",
        "introduced_version": null,
        "syntax": "vehicleName '''setAmmoCargo''' ammoCargo",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "ammoCargo",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAmmoOnPylon",
        "description": "Set count of ammo in magazine on pylon (supports pylon name since Arma 3 v1.93.145594)",
        "introduced_version": null,
        "syntax": "vehicle '''setAmmoOnPylon''' [pylon, ammocount]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pylon",
                "description": "or [[String]] - pylon index (index starts from 1) or pylon name (see [[getCompatiblePylonMagazines]] Example 4)",
                "sqf_type": "Number"
            },
            {
                "name": "ammocount",
                "description": "ammo count",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAnimSpeedCoef",
        "description": "Sets a coefficient for animation speed (0.5 will play animations half the speed, 2 twice the speed).<br>\nDoesn't affect upper body animations (reloading, etc.)",
        "introduced_version": null,
        "syntax": "unit [[setAnimSpeedCoef]] coef",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "coef",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAperture",
        "description": "Sets custom camera aperture (-1 to do it automatically).",
        "introduced_version": null,
        "syntax": "'''setAperture''' aperture",
        "parameters": [
            {
                "name": "aperture",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setApertureNew",
        "description": "Sets custom camera aperture ([-1] to do it automatically).",
        "introduced_version": null,
        "syntax": "'''setApertureNew''' [min, std, max, stdLum]",
        "parameters": [
            {
                "name": "min",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "std",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "max",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "stdLum",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setArmoryPoints",
        "description": "Stores passed number into [USERNAME].ArmaXProfile file, where it assigns it as a value to ''armoryPoints'' entry. If entry doesn't exist, it is created.",
        "introduced_version": null,
        "syntax": "[[setArmoryPoints]] points",
        "parameters": [
            {
                "name": "points",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setAttributes",
        "description": "Returns a [[Structured Text]] created from the given [[Structured Text|structured]] text and sets [[Structured_Text#Attributes | attributes]] to the given values.<br><br>",
        "introduced_version": null,
        "syntax": "text '''setAttributes''' [name1, value1, name2, value2, ...]",
        "parameters": [
            {
                "name": "text",
                "description": "or [[Structured Text]] - only passing [[Structured Text]] has any effect",
                "sqf_type": "String"
            },
            {
                "name": "name",
                "description": "name of the attribute",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "value of the attribute",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "setAutonomous",
        "description": "Sets UAV autonomous mode.",
        "introduced_version": null,
        "syntax": "uav [[setAutonomous]] bool",
        "parameters": [
            {
                "name": "uav",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setBehaviour",
        "description": "Sets group behaviour mode. If a unit is given as argument, behaviour is set for the unit's group. Behaviour is one of: \n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\".",
        "introduced_version": null,
        "syntax": "groupName [[setBehaviour]] behaviour",
        "parameters": [
            {
                "name": "groupName",
                "description": "or [[Object]] - unit from the group",
                "sqf_type": "Group"
            },
            {
                "name": "behaviour",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setBehaviourStrong",
        "description": "Sets group behaviour mode & forces it to a group. If a unit is given as argument, behaviour is set for the unit's group. Behaviour is one of: \n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\".",
        "introduced_version": null,
        "syntax": "groupName [[setBehaviourStrong]] behaviour",
        "parameters": [
            {
                "name": "groupName",
                "description": "or [[Object]] - unit from the group",
                "sqf_type": "Group"
            },
            {
                "name": "behaviour",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setBleedingRemaining",
        "description": "Sets for how many seconds injured unit leaves blood trail. The unit damage must be >",
        "introduced_version": null,
        "syntax": "unit '''setBleedingRemaining''' time",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setBrakesRTD",
        "description": "Enable landing gear wheel brakes for a helicopter.\n* value 0: brakes off\n* value 1: brakes on\n\n* index 1: left wheels\n* index 2: right wheels\n* index 3: both sides",
        "introduced_version": null,
        "syntax": "helicopterRTD '''setBrakesRTD''' [value, wheelIndex]",
        "parameters": [
            {
                "name": "helicopterRTD",
                "description": "helicopter",
                "sqf_type": "ObjectRTD"
            },
            {
                "name": "value",
                "description": "value of the brakes",
                "sqf_type": "Number"
            },
            {
                "name": "wheelIndex",
                "description": "wheel index",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCamShakeDefParams",
        "description": "Sets camera shake default params, the default camshake when, for example, you freelook at your character shooting a 12.7mm sniper rifle or firing tank cannon. Would also work in 1st person.",
        "introduced_version": null,
        "syntax": "'''setCamShakeDefParams''' [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef]",
        "parameters": [
            {
                "name": "power",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "duration",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "frequency",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "minSpeed",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "minMass",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "caliberCoefHit",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "vehicleCoef",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCamShakeParams",
        "description": "Set camera shake parameters. \nWill not have any effect until shake is started via [[addCamShake]].",
        "introduced_version": null,
        "syntax": "'''setCamShakeParams'''  [posCoef, vertCoef, horzCoef, bankCoef, interpolation]",
        "parameters": [
            {
                "name": "posCoef",
                "description": "Strength of positional movement (how far the whole position can change in X,Y&Z), should not be bigger than .1, or the camera might move into, or behind, the player",
                "sqf_type": "Number"
            },
            {
                "name": "vertCoef",
                "description": "Strength of vertical camera pan (up/down), practical range: 0-10",
                "sqf_type": "Number"
            },
            {
                "name": "horzCoef",
                "description": "Strength of horizontal camera pan (left/right), practical range: 0-10",
                "sqf_type": "Number"
            },
            {
                "name": "bankCoef",
                "description": "Strength of camera tilt/bank, practical range: 0-20",
                "sqf_type": "Number"
            },
            {
                "name": "interpolation",
                "description": "If [[true]], then transitions in the different shaking directions will be smoother",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCamUseTI",
        "description": "Activates thermal vision. Mode index defines what sort of thermal vision it is:<br>\n* 0 - White Hot\n* 1 - Black Hot\n* 2 - Light Green Hot / Darker Green cold\n* 3 - Black Hot / Darker Green cold\n* 4 - Light Red Hot /Darker Red Cold\n* 5 - Black Hot / Darker Red Cold\n* 6 - White Hot . Darker Red Cold\n* 7 - Thermal (Shade of Red and Green, Bodies are white) <br>\nThis command only works with [[camCreate]] created camera that is currently the main camera for the player (see example).",
        "introduced_version": null,
        "syntax": "Bool '''setCamUseTI''' modeIndex",
        "parameters": [
            {
                "name": "Bool",
                "description": "enable/disable the effect",
                "sqf_type": "Boolean"
            },
            {
                "name": "modeIndex",
                "description": "Ti mode",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCameraInterest",
        "description": "Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.",
        "introduced_version": null,
        "syntax": "entity [[setCameraInterest]] interest",
        "parameters": [
            {
                "name": "entity",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "interest",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCaptive",
        "description": "Mark a unit as captive. If unit is a vehicle, commander is marked. A captive is neutral to everyone (belong to [[civilian]] [[side]]), and will not trigger \"detected by\" conditions for its original [[side]].<br>\n<br>\nUsing a number (instead of a boolean) for the status has no further effect on the engine's behavior, but can be used by [[captiveNum]] to keep track of the captivity status at a finer resolution (e.g. handcuffed, grouped, etc.). The numbered status syntax was introduced in Arma 2.",
        "introduced_version": null,
        "syntax": "unitName [[setCaptive]] status",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "status",
                "description": "[[true]] means [[captive]]",
                "sqf_type": "Boolean"
            },
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "statusNumber",
                "description": "0 or non zero. A non zero value means [[captive]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCenterOfMass",
        "description": "Changes the center of mass of an object smoothly during the given time (in seconds). A time of zero (or using the alternative syntax) means an immediate change.",
        "introduced_version": null,
        "syntax": "myObject [[setCenterOfMass]] [centerOfMass, time]",
        "parameters": [
            {
                "name": "myObject",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "centerOfMass",
                "description": "[x,y,z] offset relative to the model centre",
                "sqf_type": "Array"
            },
            {
                "name": "time",
                "description": "transition time, 0 for instant center of mass transfer",
                "sqf_type": "Number"
            },
            {
                "name": "myObject",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "centerOfMass",
                "description": "[x,y,z] offset relative to the model centre",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCollisionLight",
        "description": "Switches collision lights of a vehicle on/off.",
        "introduced_version": null,
        "syntax": "vehicle [[setCollisionLight]] set",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "set",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCombatMode",
        "description": "Sets AI [[Group | group]] combat mode (engagement rules). Mode may be one of the following: \n* <tt>\"BLUE\"</tt> : Never fire, keep formation\n* <tt>\"GREEN\"</tt> : Hold fire, keep formation\n* <tt>\"WHITE\"</tt> : Hold fire, engage at will/loose formation\n* <tt>\"YELLOW\"</tt> : Fire at will, keep formation\n* <tt>\"RED\"</tt> : Fire at will, engage at will/loose formation\nSee [[Combat Modes]] for more information on combat modes.",
        "introduced_version": null,
        "syntax": "group [[setCombatMode]] mode",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Object]]. If the argument is unit [[Object]], unit's current group is used.",
                "sqf_type": "Group"
            },
            {
                "name": "mode",
                "description": "See description",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCompassOscillation",
        "description": "This command sets random heading on the player's compass (both, in map and in 3D view) with given frequency, which is also randomised. To reset the compass back to defaults, execute: <code>[[setCompassOscillation]] [-1, 0, 0];</code>.",
        "introduced_version": null,
        "syntax": "'''setCompassOscillation''' [angle, frequencyMin, frequencyMax]",
        "parameters": [
            {
                "name": "angle",
                "description": "heading deviation angle in [[rad|radians]]; the random angle will be picked up from <tt>[-angle...+angle]</tt> range.",
                "sqf_type": "Number"
            },
            {
                "name": "frequencyMin",
                "description": "lower bound of heading change in seconds",
                "sqf_type": "Number"
            },
            {
                "name": "frequencyMax",
                "description": "higher bound of heading change in seconds. The actual frequency is calculated similar to: <code>_frequencyMin + [[random]](_frequencyMax - _frequencyMin);</code>",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setConvoySeparation",
        "description": "Sets the distance to keep to the vehicle which is '''in front'''.<br>\n*This command has to be applied to all vehicles in a convoy in order to have a separation of, for example, 50 m. \n*Vehicles in a convoy can also have different distances.\n*It's recommended that small values (<10m) should only be used for slowly moving convoys, otherwise AI driven vehicles will leave the road frequently to avoid collisions",
        "introduced_version": null,
        "syntax": "vehicle '''setConvoySeparation''' distance",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "distance",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCuratorCameraAreaCeiling",
        "description": "Sets maximal ([[Position#PositionATL|ATL]]) height to which curator camera can move.",
        "introduced_version": null,
        "syntax": "curatorObj [[setCuratorCameraAreaCeiling]] height",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "[[Arma 3 Curator|Curator]] module",
                "sqf_type": "Object"
            },
            {
                "name": "height",
                "description": "[[Position#PositionATL|ATL]], in metres",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCuratorCoef",
        "description": "Sets coef for some action (coef have to be bigger than -1 000 000, anything lower is considered as disabled action).",
        "introduced_version": null,
        "syntax": "curatorObj '''setCuratorCoef''' [action,coef]",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "action",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "coef",
                "description": "or [[Boolean]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCuratorEditingAreaType",
        "description": "Set whether curator can edit in all editing areas (true) or outside of them (false).",
        "introduced_version": null,
        "syntax": "curatorObj '''setCuratorEditingAreaType''' bool",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCuratorWaypointCost",
        "description": "Sets cost of waypoints (used for placing, editing and deleting).",
        "introduced_version": null,
        "syntax": "curatorObj '''setCuratorWaypointCost''' cost",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            },
            {
                "name": "cost",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCurrentChannel",
        "description": "Sets given channel as current chat channel. Scripted way of selecting desired channel on the UI. The given channel may be disabled (see [[enableChannel]]), this is why this command returns boolean, [[true]] on success or [[false]] on failure. \n{",
        "introduced_version": null,
        "syntax": "'''setCurrentChannel''' channelID",
        "parameters": [
            {
                "name": "channelID",
                "description": "[[Channel IDs|channel ID]]",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setCurrentTask",
        "description": "Set the task as a current task of the person.",
        "introduced_version": null,
        "syntax": "object '''setCurrentTask''' task",
        "parameters": [
            {
                "name": "object",
                "description": "the unit having the task",
                "sqf_type": "Object"
            },
            {
                "name": "task",
                "description": "the task you want to select",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCurrentWaypoint",
        "description": "Sets the currently active waypoint for a group.",
        "introduced_version": null,
        "syntax": "groupName '''setCurrentWaypoint''' waypoint",
        "parameters": [
            {
                "name": "groupName",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCustomAimCoef",
        "description": "Set custom aim precision coefficient for weapon sway",
        "introduced_version": null,
        "syntax": "unit '''setCustomAimCoef''' coef",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "coef",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setCustomMissionData",
        "description": "Defines custom mission text that is sent to [[Arma 3 Analytics]].",
        "introduced_version": null,
        "syntax": "[[setCustomMissionData]] data",
        "parameters": [
            {
                "name": "data",
                "description": "Array of strings. A maximum of five strings is allowed, each string with a maximum length of 16 characters",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "setCustomSoundController",
        "description": "Sets value of the specified custom sound controller to be used in [[simple expression]]s in config. Returns [[true]] if value was set to the controller, [[false]] if command fails, for example if vehicle is not a transport or controller name is not recognised.<br><br>",
        "introduced_version": null,
        "syntax": "'''setCustomSoundController''' [vehicle, controller, value]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "must be a transport type vehicle (doesn't work on characters or buildings)",
                "sqf_type": "Object"
            },
            {
                "name": "controller",
                "description": "name of the custom sound controller. Need to be full string like i.e. \"CustomSoundController1\". Currently you can pick from \"CustomSoundController1\" to \"CustomSoundController32\"",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "desired value",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setCustomWeightRTD",
        "description": "Add virtual custom weight to a helicopter's center of gravity. This can be used to simulate added internal payload for specific scenarios, and affects the flight model.",
        "introduced_version": null,
        "syntax": "helicopterRTD '''setCustomWeightRTD''' weight",
        "parameters": [
            {
                "name": "weight",
                "description": "weight (kilograms)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDamage",
        "description": "Sets an object's damage value in the range 0..1, 0 meaning fully functional and 1 completely destroyed / dead.<br>\nThe alternative syntax allows to switch off destruction effects.",
        "introduced_version": null,
        "syntax": "object [[setDamage]] damage",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "damage",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "damage",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "useEffects",
                "description": "[[false]] to skip destruction effects. Default: [[true]]",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDammage",
        "description": "Damage / repair object.\n\nDamage 0 means fully functional, damage 1 means completely destroyed / dead.<br>\n\nAlias of [[setDamage]], which was introduced to fix a spelling error in this operator's name.",
        "introduced_version": null,
        "syntax": "object [[setDammage]] damage",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "damage",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDate",
        "description": "Sets mission date and time. This command is fully JIP compatible (as of Arma 3 v1.93.145588). Players joining after mission start will get the current server [[date]] including the year.",
        "introduced_version": null,
        "syntax": "[[setDate]] date",
        "parameters": [
            {
                "name": "date",
                "description": "format [year, month, day, hour, minute]",
                "sqf_type": "Date"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDebriefingText",
        "description": "Sets debriefing text for endType defined in [[Debriefing#Configuration|CfgDebriefing]].\n<br><br>",
        "introduced_version": null,
        "syntax": "endType '''setDebriefingText''' [title, description]",
        "parameters": [
            {
                "name": "endType",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "title",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "description",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDefaultCamera",
        "description": "Sets the position and direction for the camera used after camera is set on no object (log out view when leaving MP game for example)",
        "introduced_version": null,
        "syntax": "'''setDefaultCamera''' [position, direction]",
        "parameters": [
            {
                "name": "position",
                "description": "position of the camera",
                "sqf_type": "PositionASL"
            },
            {
                "name": "direction",
                "description": "format [[Vector3D]] - direction of the camera",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDestination",
        "description": "Set the destination for path planning of the pilot.\n\nPossible values for planningMode are:\n\n* \"DoNotPlan\" - used when not moving\n* \"DoNotPlanFormation\" - used in formation when simple path testing is used\n* \"LEADER PLANNED\" - used for formation leader (full path finding used)\n* \"LEADER DIRECT\" - used for DirectGo (like getin, supply)\n* \"FORMATION PLANNED\" - used in formation when full path finding is used\n* \"VEHICLE PLANNED\" - used for vehicle driver\n\nWorks best when used on [[agents]]. Using \"LEADER PLANNED\" will trigger <tt>\"PathCalculated\"</tt> [[Arma_3:_Event_Handlers#PathCalculated | Event Handler]]",
        "introduced_version": null,
        "syntax": "object '''setDestination''' [position, planningMode, forceReplan]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            },
            {
                "name": "planningMode",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "forceReplan",
                "description": "Specifies if replanning of the path should be forced.",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDetailMapBlendPars",
        "description": "Sets the detail texture map blend pars. Allows for smooth transition between detailed and undetailed terrain texture at distance. If noDetail &gt; fullDetail, the texture detail will incur smooth transition in the area between the thresholds. If noDetail &lt;",
        "introduced_version": null,
        "syntax": "'''setDetailMapBlendPars''' [fullDetail, noDetail]",
        "parameters": [
            {
                "name": "fullDetail",
                "description": "threshold distance in metres up to which the terrain will have full texture detail",
                "sqf_type": "Number"
            },
            {
                "name": "noDetail",
                "description": "threshold distance in metres after which the texture detail will be switched off",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDiaryRecordText",
        "description": "Set text of a log record.",
        "introduced_version": null,
        "syntax": "unit [[setDiaryRecordText]] [[subject, diaryRecord], [title, text]]",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDir",
        "description": "Sets object heading. Angles are measured in degrees clockwise from north, and regular range goes from 0 to 360 (0\u00b0",
        "introduced_version": null,
        "syntax": "object '''setDir''' heading",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "heading",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDirection",
        "description": "Set's the orientation of a location. It's area and map icon (if it is type uses an icon) will be rotated to this orientation.",
        "introduced_version": null,
        "syntax": "location '''setDirection''' direction",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "direction",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDrawIcon",
        "description": "Set the icon to be shown in 2D editor for the specified editor object. If maintain size is false,icon will not scale depending on the scale,of the map. If maintain size is a number,the icon will maintain size,if map scale is below that number. is3D,show line and priority are,optional.",
        "introduced_version": null,
        "syntax": "map '''setDrawIcon''' [object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDriveOnPath",
        "description": "Sets the path to follow for AI driver. Note that [[unitReady]] will return [[true]] even if AI is still driving through the points.<br>\nUsing any other ''move'' command (e.g",
        "introduced_version": null,
        "syntax": "vehicleName [[setDriveOnPath]] points",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "points",
                "description": "list of [[Position|Positions]] to format [x,y,z] OR to format [x,y,z, speed], speed being '''in m/s'''.",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDropInterval",
        "description": "Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is [http://forums.bistudio.com/showthread.php?177797-Ruin-your-copy-of-Arma-and-your-PC#post2691090 18000]. Correspondence between CfgCloudlets class param name and command param:\n<code>particleSource [[setDropInterval]] interval;</code>",
        "introduced_version": null,
        "syntax": "particleSource '''setDropInterval''' interval",
        "parameters": [
            {
                "name": "particleSource",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "interval",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDynamicSimulationDistance",
        "description": "Sets activation distance of [[Arma_3_Dynamic_Simulation]] for given category",
        "introduced_version": null,
        "syntax": "category '''setDynamicSimulationDistance''' distance",
        "parameters": [
            {
                "name": "distance",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setDynamicSimulationDistanceCoef",
        "description": "Sets activation distance multiplier of [[Arma_3_Dynamic_Simulation]] for the given class",
        "introduced_version": null,
        "syntax": "class '''setDynamicSimulationDistanceCoef''' multiplier",
        "parameters": [
            {
                "name": "multiplier",
                "description": "Distance multiplier",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setEditorMode",
        "description": "Sets map mode to MAP,3D or PREVIEW.",
        "introduced_version": null,
        "syntax": "map '''setEditorMode''' mode",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "mode",
                "description": "-",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setEditorObjectScope",
        "description": "This command defines the level of access a user has to editor objects.\n\n\"objects\" is an array of either [[Editor Object|Editor Objects]] (eg [\"_unit_0\"]) or actual [[Object|Game Objects]] (eg [player]). If the array is empty then the command will automatically parse all editor objects.\n\n\"editorType\" is the editor type to effect (eg \"unit\", \"vehicle\", \"center\") or \"\" for all types.\n\n\"condition\" is an executable string that must evaluate to true or false. If true, the scope of the evaluated editor object will be modified. \"_x\" can be used in the string as reference to the ingame representation of the currently processed array member.\n\n\"scope\" is one of \"HIDE\", \"VIEW\", \"SELECT\", \"LINKTO\", \"LINKFROM\", \"ALLNODRAG\", \"ALLNOTREE\", \"ALLNOCOPY\", \"ALLNOSELECT\" or \"ALL\".\n\n\"subordinatesAlso\" is a boolean value. If true then subordinates in the editor will be assigned the same scope as the parent.",
        "introduced_version": null,
        "syntax": "map [[setEditorObjectScope]] [objects, editorType, condition, scope, subordinatesAlso]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "objects",
                "description": "of [[Object|Objects]] and/or [[Editor Object|Editor Objects]]",
                "sqf_type": "Array"
            },
            {
                "name": "editorType",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "condition",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "scope",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "subordinatesAlso",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setEffectCondition",
        "description": "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result.\n\n*If the result is a [[Boolean|boolean]] and [[true]], the effect is launched.\n*If the result is an [[object]], the effect is launched if the result is the player or the player vehicle.\n*If the result is an [[Array|array]], the effect is launched if the result contains the player or the player vehicle.",
        "introduced_version": null,
        "syntax": "trigger '''setEffectCondition''' statement",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "statement",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "waypoint",
                "description": "[[Array]] format [[Waypoint]]",
                "sqf_type": "Waypoint"
            },
            {
                "name": "statement",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setEffectiveCommander",
        "description": "Sets [[effectiveCommander]] of the given vehicle. Effective commander is the person who commands the vehicle, i.e. gives commands to the driver. Every time a person gets in or out of a vehicle, effective commander eligibility is recalculated by the engine based on the current [[crew]]. Use this command to force desired effective commander. In multiplayer, execute globally.",
        "introduced_version": null,
        "syntax": "vehicle [[setEffectiveCommander]] person",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFSMVariable",
        "description": "Set variable to given value in the variable space of given FSM.\n<br>The FSM handle is the number returned by the [[execFSM]] command.",
        "introduced_version": null,
        "syntax": "handle '''setFSMVariable''' [name, value]",
        "parameters": [
            {
                "name": "handle",
                "description": "FSM handle",
                "sqf_type": "Number"
            },
            {
                "name": "name",
                "description": "name of the FSM variable",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFace",
        "description": "Set person's face. For a list of available faces, check [[:Category:CfgIdentities]].",
        "introduced_version": null,
        "syntax": "person '''setFace''' face",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "face",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFaceAnimation",
        "description": "Sets facial animation phase (eye blinking), blink is in the range from <tt>0</tt> to <tt>1</tt>. <br><br>",
        "introduced_version": null,
        "syntax": "person '''setFaceAnimation''' blink",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "blink",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFatigue",
        "description": "Sets the person's fatigue, from 0 to 1.",
        "introduced_version": null,
        "syntax": "unit '''setFatigue''' value",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFeatureType",
        "description": "Enable/disable object as a feature/landmark. Possible feature types:\n* 0 - Feature disabled\n* 1 - Object is always visible within object view distance\n* 2 - Object is always visible within terrain view distance\nThe limit is 500 map/static objects and 200 dynamic objects including config features and auto features (flying helicopters, airplanes). When limit is reached, function returns false.",
        "introduced_version": null,
        "syntax": "object [[setFeatureType]] type",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "type",
                "description": "the desired feature type",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setFlagAnimationPhase",
        "description": "Sets flag position on the flag pole according to the given animation phase, where 0 is the bottom of the flag pole, 1 is the top of the flag pole. The changes to the flag position are local to the PC command is executed on. To animate flag use [[BIS_fnc_animateFlag]]",
        "introduced_version": null,
        "syntax": "flag '''setFlagAnimationPhase''' phase",
        "parameters": [
            {
                "name": "flag",
                "description": "flag pole of the type \"FlagCarrier\"",
                "sqf_type": "Object"
            },
            {
                "name": "phase",
                "description": "0...1",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFlagOwner",
        "description": "Sets flag owner. When owner is set to [[objNull]] or any object other than a unit of class [[Models_%26_Classnames:_CfgVehicles_-_Class_Man|man]] or [[Game_Logic|logic]], flag is returned to the flagpole. A flag owned by a logic has no visual representation.",
        "introduced_version": null,
        "syntax": "flag '''setFlagOwner''' owner",
        "parameters": [
            {
                "name": "flag",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "owner",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFlagSide",
        "description": "Sets flag [[Side]]. A flag may be taken by any unit that is enemy to the side that owns the flag. Just like with [[setFlagTexture]], if the command executed where unit is [[local]] effect of the command will be global and [[JIP]] compatible.",
        "introduced_version": null,
        "syntax": "flag '''setFlagSide''' side",
        "parameters": [
            {
                "name": "flag",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFlagTexture",
        "description": "Sets flag texture.\n\nIf texture is \"\", flag is not drawn.<br>\nCustom texture can be used, as long as it is in *.jpg format and has dimensions of 200\u00d7200px, or *.paa (",
        "introduced_version": null,
        "syntax": "flag [[setFlagTexture]] texture",
        "parameters": [
            {
                "name": "flag",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "texture",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFog",
        "description": "Smoothly change the fog over given time (in seconds). See also [[fogParams]].<br><br>",
        "introduced_version": null,
        "syntax": "time [[setFog]] fog",
        "parameters": [
            {
                "name": "time",
                "description": "transition time to the new value",
                "sqf_type": "Number"
            },
            {
                "name": "fog",
                "description": "fog density. Range 0..1",
                "sqf_type": "Number"
            },
            {
                "name": "time",
                "description": "transition time to the new value",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFormDir",
        "description": "Sets group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overridden by movement direction. If the new direction is noticeably different from the old direction (approx +/- 15 degrees), units will change positions changing [[formationDirection]].",
        "introduced_version": null,
        "syntax": "group '''setFormDir''' heading",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "heading",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFormation",
        "description": "Set group formation.\nFormation is one of: \n* '''\"COLUMN\"'''\n* '''\"STAG COLUMN\"'''\n* '''\"WEDGE\"'''\n* '''\"ECH LEFT\"'''\n* '''\"ECH RIGHT\"'''\n* '''\"VEE\"'''\n* '''\"LINE\"'''\n* '''\"FILE\"''' (ArmA)\n* '''\"DIAMOND\"''' (ArmA)",
        "introduced_version": null,
        "syntax": "group '''setFormation''' formation",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "formation",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFormationTask",
        "description": "Set the current task of the formation member.",
        "introduced_version": null,
        "syntax": "object '''setFormationTask''' task",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "task",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFriend",
        "description": "Sets how friendly side1 is with side2. For a value smaller than 0.6 it results in being enemy, otherwise it is friendly.\n\nIntended to be used on mission start. Changing value during mission can cause unexpected errors in AI behavior. See also [[Side relations]].",
        "introduced_version": null,
        "syntax": "side1 '''setFriend''' [side2 , value]",
        "parameters": [
            {
                "name": "side1",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "side2",
                "description": "",
                "sqf_type": "Side"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFromEditor",
        "description": "Set if given team member was inserted directly from editor.",
        "introduced_version": null,
        "syntax": "teamMember '''setFromEditor''' fromEditor",
        "parameters": [
            {
                "name": "fromEditor",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFuel",
        "description": "Sets fuel percentage from 0 (empty) to 1 (full). The vehicle must be [[local]] to the computer where command is executed.",
        "introduced_version": null,
        "syntax": "vehicle '''setFuel''' amount",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "amount",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setFuelCargo",
        "description": "Sets fuel amount in cargo space of refuel vehicle from empty (0) to full (1)\nNote, the carrying capacity of each side's refuel trucks differ.",
        "introduced_version": null,
        "syntax": "vehicle '''setFuelCargo''' amount",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setGroupIcon",
        "description": "Sets group icon properties.",
        "introduced_version": null,
        "syntax": "group '''setGroupIcon''' [id, icon, offset]",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            },
            {
                "name": "id",
                "description": "The icon ID returned by [[addGroupIcon]]",
                "sqf_type": "Number"
            },
            {
                "name": "icon",
                "description": "Class name of desired icon from CfgGroupIcons",
                "sqf_type": "String"
            },
            {
                "name": "offset",
                "description": "(Optional) - X and Y offsets of the icon in form [offsetX, offsetY]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setGroupIconParams",
        "description": "Set group icons parameters. [color,string,float,bool]",
        "introduced_version": null,
        "syntax": "group '''setGroupIconParams''' properties",
        "parameters": [
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            },
            {
                "name": "properties",
                "description": "-",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setGroupIconsSelectable",
        "description": "Sets if group icons raise [[onGroupIconClick]], [[onGroupIconOverEnter]] and [[onGroupIconOverLeave]] events.",
        "introduced_version": null,
        "syntax": "'''setGroupIconsSelectable''' bool",
        "parameters": [
            {
                "name": "bool",
                "description": "[[true]] to make selectable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]] (prior to",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setGroupIconsVisible",
        "description": "Sets if group icons added with [[addGroupIcon]] are visible on map and in the HUD.<br><br>",
        "introduced_version": null,
        "syntax": "'''setGroupIconsVisible''' [showOnMap, showOnHUD]",
        "parameters": [
            {
                "name": "showOnMap",
                "description": "[[true]] to show on map. Default - [[false]]",
                "sqf_type": "Boolean"
            },
            {
                "name": "showOnHUD",
                "description": "[[true]] to show on HUD. Default - [[false]]",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]] (prior to Arma 3 v1.93.145657 this command returned [[Object]] of [[objNull | null]] value)",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setGroupId",
        "description": "Sets the group radio callsign, how it will be displayed in radio chat. Two groups on the same side '''cannot''' have the same callsign (different side is possible). When trying to apply the same callsign to two groups of the same side, the callsigns will simply be swapped, e.g:\n<code>group1 [[setGroupId]] [\"Active Group\"];\ngroup2 [[setGroupId]] [\"Inactive Group\"];\n\ngroup2 [[setGroupId]] [\"Active Group\"];",
        "introduced_version": null,
        "syntax": "group [[setGroupId]] [nameFormat, nameParam1, ..., nameParamN]",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "nameFormat",
                "description": "format template (%keyword1 - %keyword2...etc)",
                "sqf_type": "String"
            },
            {
                "name": "nameParam1",
                "description": "param keyword",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setGroupIdGlobal",
        "description": "A [[Multiplayer Scripting#Locality|global]] equivalent of  [[setGroupId]].",
        "introduced_version": null,
        "syntax": "group [[setGroupIdGlobal]] [format, keyword1, ..., keywordN]",
        "parameters": [
            {
                "name": "group",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "format",
                "description": "format template (e.g \"%keyword1 - %keyword2 / %keyword4 (%keyword3)\")",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setGroupOwner",
        "description": "Changes the ownership of a group (and all its units) to a given client. The group leader must not be a player. This command only works when called from the server. Returns true if locality was changed. For [[agents]] use [[setOwner]] command.",
        "introduced_version": null,
        "syntax": "group [[setGroupOwner]] clientID",
        "parameters": [
            {
                "name": "group",
                "description": "-",
                "sqf_type": "Group"
            },
            {
                "name": "clientID",
                "description": "the [[Multiplayer_Scripting#Machine_network_ID | machine network ID]] of the new [[owner]].",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setGusts",
        "description": "Changes the gusts value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. Value is 0 to 1.",
        "introduced_version": null,
        "syntax": "time '''setGusts''' value",
        "parameters": [
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setHUDMovementLevels",
        "description": "Set min/max movement borders displayed in HUD gauges. Use -1 to skip some value.",
        "introduced_version": null,
        "syntax": "'''setHUDMovementLevels''' [minSpeed, maxSpeed, minAlt, maxAlt, minDir, maxDir, targetOrPosition]",
        "parameters": [
            {
                "name": "minSpeed",
                "description": "Units: m/s",
                "sqf_type": "Number"
            },
            {
                "name": "maxSpeed",
                "description": "Units: m/s",
                "sqf_type": "Number"
            },
            {
                "name": "minAlt",
                "description": "Units: m",
                "sqf_type": "Number"
            },
            {
                "name": "maxAlt",
                "description": "Units: m",
                "sqf_type": "Number"
            },
            {
                "name": "minDir",
                "description": "Units: deg",
                "sqf_type": "Number"
            },
            {
                "name": "maxDir",
                "description": "Units: deg",
                "sqf_type": "Number"
            },
            {
                "name": "targetOrPosition",
                "description": "or [[Position]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setHideBehind",
        "description": "Sets the data for hiding. objectWhereHide can be taken using [[findCover]]. hidePosition can be taken using [[getHideFrom]]. Command is not functional in ArmA 2.",
        "introduced_version": null,
        "syntax": "object '''setHideBehind''' [objectWhereHide, hidePosition]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "objectWhereHide",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "hidePosition",
                "description": "format [[getHideFrom]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setHit",
        "description": "Set damage on a part of an object.",
        "introduced_version": null,
        "syntax": "object [[setHit]] [part, damage, useEffects]",
        "parameters": [
            {
                "name": "object",
                "description": "[[local]] object",
                "sqf_type": "Object"
            },
            {
                "name": "part",
                "description": "Name of the part ([[Named_Selection|selection]] name)",
                "sqf_type": "String"
            },
            {
                "name": "damage",
                "description": "Damage value ranging 0..1, 0 being fully functional, 1 being destroyed",
                "sqf_type": "Number"
            },
            {
                "name": "useEffects",
                "description": "(Optional, default [[true]]) [[false]] to skip destruction effects",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setHitIndex",
        "description": "Set the current level of damage for a specific Hit Point (specified by its hit part index). All hit points can be obtained with [[getAllHitPointsDamage]] command.\n* 0: no damage\n* 1: full damage",
        "introduced_version": null,
        "syntax": "vehicle '''setHitIndex''' [hitPartIndex, damage, useEffects]",
        "parameters": [
            {
                "name": "hitPartIndex",
                "description": "hit part index of the Hit Point",
                "sqf_type": "Number"
            },
            {
                "name": "damage",
                "description": "level of damage",
                "sqf_type": "Number"
            },
            {
                "name": "useEffects",
                "description": "(Optional, default [[true]]) [[false]] to skip destruction effects.",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setHitPointDamage",
        "description": "Set the current level of damage for a specific Hit Point (specified by its config class).\n* 0: no damage\n* 1: full damage\nSee also [[BIS_fnc_setHitPointDamage]] for setting hit with dependency",
        "introduced_version": null,
        "syntax": "vehicle '''setHitPointDamage''' [hitPointName, damage, useEffects]",
        "parameters": [
            {
                "name": "hitPointName",
                "description": "name of the Hit Point class",
                "sqf_type": "String"
            },
            {
                "name": "damage",
                "description": "level of damage",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setHorizonParallaxCoef",
        "description": "Sets coef used to shift horizon position based on camera height (use 0 to disable shifting).",
        "introduced_version": null,
        "syntax": "'''setHorizonParallaxCoef''' coef",
        "parameters": [
            {
                "name": "coef",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setIdentity",
        "description": "Sets identity of a person. The identities could be defined in a custom config in [[Description.ext#CfgIdentities|Description.ext]] or in the main config. For a list of available main config values see [[CfgIdentities]].\n<br><br> \nThis command is an aggregate of the following commands: [[setName]], [[setFace]], [[setSpeaker]], [[setNameSound]], [[setPitch]], only the values are loaded from the given config. It also includes value for glasses for which currently there is no direct command, instead there is an inventory command [[addGoggles]].",
        "introduced_version": null,
        "syntax": "person [[setIdentity]] identity",
        "parameters": [
            {
                "name": "person",
                "description": "unit to which the identity will be applied",
                "sqf_type": "Object"
            },
            {
                "name": "identity",
                "description": "name of the subclass in [[CfgIdentities]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setImportance",
        "description": "Sets the importance value of location.",
        "introduced_version": null,
        "syntax": "location '''setImportance''' value",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setInfoPanel",
        "description": "Opens given component or first component of given component type on specified info panel.",
        "introduced_version": null,
        "syntax": "[[setInfoPanel]] [infopanelId, componentClassOrType];",
        "parameters": [
            {
                "name": "infoPanelId",
                "description": "info panel classname, or \"left\" or \"right\"",
                "sqf_type": "String"
            },
            {
                "name": "componentClassOrType",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if panel was successfully opened, [[false]] otherwise (e.g. opening GPS on player without GPS item or setting panel to vehicle that doesn't have such capability configured)",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setLeader",
        "description": "Set the leader of given team. Effect is local, unless both leader unit and team are local to PC on which command is executed, then effect is global.",
        "introduced_version": null,
        "syntax": "team '''setLeader''' leader",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightAmbient",
        "description": "Set ambient color of light. This includes surfaces that '''face away''' from the light, unlike [[setLightColor]].",
        "introduced_version": null,
        "syntax": "light [[setLightAmbient]] [r, g, b]",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightAttenuation",
        "description": "Sets attenuation of light. Standard method of attenuation (1 / (constant + linear*dist + quadratic*dist*dist)). ''start'' param represents distance, where the attenuation starts to take effects (dist",
        "introduced_version": null,
        "syntax": "light [[setLightAttenuation]] [start, constant, linear, quadratic, hardlimitstart, hardlimitend]",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "start",
                "description": "distance with 100% intensity, falloff starts here",
                "sqf_type": "Number"
            },
            {
                "name": "constant",
                "description": "constant attenuation coef",
                "sqf_type": "Number"
            },
            {
                "name": "linear",
                "description": "linear attenuation coef",
                "sqf_type": "Number"
            },
            {
                "name": "quadratic",
                "description": "quadratic attenuation coef",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightBrightness",
        "description": "Set brightness of light.",
        "introduced_version": null,
        "syntax": "light [[setLightBrightness]] brightness",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "brightness",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightColor",
        "description": "Set diffuse color of light. Illuminates surfaces that are facing the light.",
        "introduced_version": null,
        "syntax": "light [[setLightColor]] [r, g, b]",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightDayLight",
        "description": "Sets if light can be used during the day.",
        "introduced_version": null,
        "syntax": "light [[setLightDayLight]] bool",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightFlareMaxDistance",
        "description": "Sets max distance where the flare is visible.",
        "introduced_version": null,
        "syntax": "light [[setLightFlareMaxDistance]] distance",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "distance",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightFlareSize",
        "description": "Sets relative size of the flare for the light.",
        "introduced_version": null,
        "syntax": "light [[setLightFlareSize]] size",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "size",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightIntensity",
        "description": "Sets intensity of light.",
        "introduced_version": null,
        "syntax": "light [[setLightIntensity]] value",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightUseFlare",
        "description": "Sets if light has flare.",
        "introduced_version": null,
        "syntax": "light [[setLightUseFlare]] bool",
        "parameters": [
            {
                "name": "light",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLightnings",
        "description": "Changes the lightnings value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.<br><br>\n'''NOTE''': This command will have no effect (even though the value of [[lightnings]] changes) unless <tt>Manual Override</tt> option is selected in the editor in the Intel, which is normally off.<br><br>\n[[Image:setLightnings.jpg|left|600px]]",
        "introduced_version": null,
        "syntax": "time '''setLightnings''' value",
        "parameters": [
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setLocalWindParams",
        "description": "Sets parameters for helicopter rotor wash. Visually it affects how much the grass, bushes and trees bend and how much the particles blown under a helicopter and how big is the area of the effect. Default [1.0, 1.0].<BR>",
        "introduced_version": null,
        "syntax": "'''setLocalWindParams''' [strength, diameter]",
        "parameters": [
            {
                "name": "strength",
                "description": "down-force wind strength",
                "sqf_type": "Number"
            },
            {
                "name": "diameter",
                "description": "area affected",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMagazineTurretAmmo",
        "description": "Sets ammo count to given amount for given turret.",
        "introduced_version": null,
        "syntax": "vehicle [[setMagazineTurretAmmo]] [magazineClass, ammoCount, turretPath]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "setMarkerAlpha",
        "description": "Sets the marker alpha. The marker is modified on all computers in a network session.\n<br>\nWhen alpha equals <tt>1</tt>, the marker is visible, but if alpha equals <tt>0</tt>, then the marker is invisible.\n<br>\nAlpha can be numbers and fractions.",
        "introduced_version": null,
        "syntax": "marker '''setMarkerAlpha''' alpha",
        "parameters": [
            {
                "name": "marker",
                "description": "-",
                "sqf_type": "String"
            },
            {
                "name": "alpha",
                "description": "-",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerAlphaLocal",
        "description": "Sets the marker alpha. The marker is only modified on the computer where the command is called.\n<br>\nWhen alpha equals <tt>1</tt>, the marker is visible, but if alpha equals <tt>0</tt>, then the marker is invisible.\n<br>\nAlpha can be numbers and fractions.",
        "introduced_version": null,
        "syntax": "marker '''setMarkerAlphaLocal''' alpha",
        "parameters": [
            {
                "name": "marker",
                "description": "-",
                "sqf_type": "String"
            },
            {
                "name": "alpha",
                "description": "-",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerBrush",
        "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.\n<br>\n<br>\n''brush'' can be:\n* \"Solid\"\n* \"SolidFull\" (A3 only)\n* \"Horizontal\"\n* \"Vertical\"\n* \"Grid\"\n* \"FDiagonal\"\n* \"BDiagonal\"\n* \"DiagGrid\"\n* \"Cross\"\n* \"Border\"\n* \"SolidBorder\"",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerBrush''' brush",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "brush",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerBrushLocal",
        "description": "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes.\n<br>\n<br>\n''brush'' can be:\n* \"Solid\"\n* \"SolidFull\" (A3 only)\n* \"Horizontal\"\n* \"Vertical\"\n* \"Grid\"\n* \"FDiagonal\"\n* \"BDiagonal\"\n* \"DiagGrid\"\n* \"Cross\"\n* \"Border\" (A2/A3 only)\n* \"SolidBorder\" (OA/A3 only)",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerBrushLocal''' brush",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "brush",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerColor",
        "description": "Sets marker color. Marker color names and their corresponding RGBA values for Arma 3 could be found here: [[CfgMarkerColors_Arma_3]]",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerColor''' color",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerColorLocal",
        "description": "Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: [[CfgMarkerColors_Arma_3]]",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerColorLocal''' color",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "color",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerDir",
        "description": "Sets the orientation of the marker. Angle is in degrees.",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerDir''' angle",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "angle",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerDirLocal",
        "description": "Sets the orientation of the marker. Angle is in degrees.",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerDirLocal''' angle",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "angle",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerPos",
        "description": "Moves the marker. If position is given in 3D format, <tt>z</tt> coordinate is stored with the marker and will be used when marker is passed to commands like [[createVehicle]], [[createUnit]], [[createAgent]], [[createMine]], [[setVehiclePosition]] for example. When [[Object]] is used for position, [[PositionWorld]] of the object is used.",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerPos''' pos",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "pos",
                "description": "format [[Position2D]], [[PositionAGL]] or [[Object]] (since Arma 3 v1.93.145584)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerPosLocal",
        "description": "Moves the marker. If position is given in 3D format, <tt>z</tt> coordinate is stored with the marker and will be used when marker is passed to commands like [[createVehicle]], [[createUnit]], [[createAgent]], [[createMine]], [[setVehiclePosition]] for example. When [[Object]] is used for position, [[PositionWorld]] of the object is used.",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerPosLocal''' pos",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "pos",
                "description": "format [[Position2D]], [[PositionAGL]] or [[Object]] (since Arma 3 v1.93.145584)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerShape",
        "description": "Selects shape (actual type) of the marker. The shape can be:\n* <tt>\"ICON\"</tt>\n* <tt>\"RECTANGLE\"</tt>\n* <tt>\"ELLIPSE\"</tt>\n* <tt>\"POLYLINE\"</tt>",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerShape''' shape",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "shape",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerShapeLocal",
        "description": "Selects shape (actual type) of the local marker. The shape can be:\n* <tt>\"ICON\"</tt>\n* <tt>\"RECTANGLE\"</tt>\n* <tt>\"ELLIPSE\"</tt>\n* <tt>\"POLYLINE\"</tt>",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerShapeLocal''' shape",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "shape",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerSize",
        "description": "Set marker size.\nSize is in format [a-axis, b-axis].",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerSize''' [a-axis, b-axis]",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerSizeLocal",
        "description": "Set marker size.\nSize is in format [a-axis, b-axis].",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerSizeLocal''' [a-axis, b-axis]",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerText",
        "description": "Sets the text label of an existing marker.",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerText''' text",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerTextLocal",
        "description": "Sets the text label of an existing marker.",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerTextLocal''' text",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerType",
        "description": "Sets marker type. Marker type is a class name from [[cfgMarkers]].",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerType''' type",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "See [[cfgMarkers]]",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMarkerTypeLocal",
        "description": "Sets marker type locally. Marker type is a class name in [[cfgMarkers]].",
        "introduced_version": null,
        "syntax": "markerName '''setMarkerTypeLocal''' type",
        "parameters": [
            {
                "name": "markerName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": ". See [[cfgMarkers]].",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMass",
        "description": "Changes the mass of a PhysX object. When using the alternative syntax the mass change is gradual during the given time. A time of zero means immediate change.<br><br>",
        "introduced_version": null,
        "syntax": "myObject [[setMass]] mass",
        "parameters": [
            {
                "name": "myObject",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mass",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "myObject",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mass",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMimic",
        "description": "Sets person's facial expression. To set it back to default, use \"\".",
        "introduced_version": null,
        "syntax": "person [[setMimic]] mimic",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMissileTarget",
        "description": "Sets a guided missile target. Doesn't work for all types of missiles. If target is dead, target is ignored. The target has to be inside configured missile targeting cone for command to work.",
        "introduced_version": null,
        "syntax": "munition [[setMissileTarget]] target",
        "parameters": [
            {
                "name": "munition",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if succeessful",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setMissileTargetPos",
        "description": "Sets a guided munition target position. The munition must have",
        "introduced_version": null,
        "syntax": "munition [[setMissileTargetPos]] position",
        "parameters": [
            {
                "name": "munition",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "PositionAGL"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMousePosition",
        "description": "Moves mouse pointer to specified position on the screen. '''x''' and '''y''' could be any number, but will be clipped so mouse never leaves the screen area.",
        "introduced_version": null,
        "syntax": "'''setMousePosition''' [x, y]",
        "parameters": [
            {
                "name": "x",
                "description": "x in screen coordinates",
                "sqf_type": "Number"
            },
            {
                "name": "y",
                "description": "y in screen coordinates",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMusicEffect",
        "description": "Defines the music track played on activation.\n\nTrack is a subclass name of CfgMusic. In addition, \"$STOP$\" (stops the current music track).",
        "introduced_version": null,
        "syntax": "trigger '''setMusicEffect''' track",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "track",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "track",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setMusicEventHandler",
        "description": "Sets given music track event handler. Will overwrite other music event handlers. Use [[addMusicEventHandler]] if you want to stack them.",
        "introduced_version": null,
        "syntax": "'''setMusicEventHandler''' [type, function]",
        "parameters": [
            {
                "name": "type",
                "description": "\"MusicStart\" or \"MusicStop\"",
                "sqf_type": "String"
            },
            {
                "name": "function",
                "description": "script to be executed. Passes params array 0: class name of the sound in [[Description.ext#Music|CfgMusic]], 1: event handler id",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - id of the event handler",
            "sqf_type": "Number"
        }
    },
    {
        "name": "setName",
        "description": "Sets the name of a location or a person. In Arma 3 this can be used to set [[name]] of a person but only in single player.",
        "introduced_version": null,
        "syntax": "object '''setName''' name",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "firstName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "lastName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setNameSound",
        "description": "Sets the [[nameSound]] of a person. By default, when giving orders, the units are addressed by their number. When nameSound is set, it will be used instead to address the unit. For example: \"Two, hold fire!\", one can have: \"Miller, hold fire!\".",
        "introduced_version": null,
        "syntax": "person [[setNameSound]] name",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setObjectArguments",
        "description": "Set object arguments in mission editor.",
        "introduced_version": null,
        "syntax": "map '''setObjectArguments''' [object,[name1,value1,...]]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Any]]",
            "sqf_type": "Any"
        }
    },
    {
        "name": "setObjectMaterial",
        "description": "Sets material of object selection. The selection number is defined through the [[CfgVehicles_Config_Reference#hiddenSelections | hiddenselection]][]",
        "introduced_version": null,
        "syntax": "obj '''setObjectMaterial''' [selectionNumber, material]",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "selectionNumber",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "material",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setObjectMaterialGlobal",
        "description": "Set the material of the given selection on all computers in a network session.",
        "introduced_version": null,
        "syntax": "obj '''setObjectMaterialGlobal''' [selection, material]",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "selection",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "material",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setObjectProxy",
        "description": "Set the proxy object associated with the given editor object.",
        "introduced_version": null,
        "syntax": "map '''setObjectProxy''' [object,proxy object]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setObjectTexture",
        "description": "Textures object selection with texture named in array. \n\nArray has the form [selectionNumber, \"Texture\"].\n<br>\nThe selection number is defined through the [[CfgVehicles_Config_Reference#hiddenSelections|hiddenselection]][]",
        "introduced_version": null,
        "syntax": "object '''setObjectTexture''' [selectionNumber,texture]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "selectionNumber",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "texture",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setObjectTextureGlobal",
        "description": "Set the texture of the given selection on all computers in a network session.<br>\nNot all objects can be textured this way. See [[getObjectTextures]] for supported texture selections.",
        "introduced_version": null,
        "syntax": "obj [[setObjectTextureGlobal]] [selection, texture]",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "selection",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "texture",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "setObjectViewDistance",
        "description": "Sets the rendering distance of objects (and shadows).",
        "introduced_version": null,
        "syntax": "'''setObjectViewDistance''' distance",
        "parameters": [
            {
                "name": "distance",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "objectDistance",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "shadowDistance",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setOvercast",
        "description": "Set overcast to given value smoothly during given time (in seconds). Zero time means immediate change. An overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely. Higher overcast values also result in higher [[wind]] speeds.",
        "introduced_version": null,
        "syntax": "time '''setOvercast''' overcast",
        "parameters": [
            {
                "name": "time",
                "description": "In seconds",
                "sqf_type": "Number"
            },
            {
                "name": "overcast",
                "description": "Range 0 to 1",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setOwner",
        "description": "From server machine, change the ownership of an object to a given client. Returns [[true]] if locality was changed.<br>\nSince Arma 3 v1.40, this command should not be used to transfer ownership of units with AI ([[agents]] are an exception to this rule). \nUsing command in an unintended way will log a message to .rpt file.<br>\nTo transfer ownership of all AI units in a group properly, use [[setGroupOwner]] instead.",
        "introduced_version": null,
        "syntax": "object '''setOwner''' clientID",
        "parameters": [
            {
                "name": "object",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "clientID",
                "description": "the [[Multiplayer_Scripting#Machine_network_ID | machine network ID]] of the new [[owner]].",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setOxygenRemaining",
        "description": "Sets oxygen remaining. It has no effect when soldier is not diving. Oxygen remaining is a number between 0 and 1.",
        "introduced_version": null,
        "syntax": "unit '''setOxygenRemaining''' value",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setParticleCircle",
        "description": "Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity. Correspondence between CfgCloudlets class param names and command array of params:\n<code>particleSource [[setParticleCircle]]\n[\n\tcircleRadius,\n\tcircleVelocity\n];</code>",
        "introduced_version": null,
        "syntax": "particleSource '''setParticleCircle''' [radius, velocity]",
        "parameters": [
            {
                "name": "particleSource",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "velocity",
                "description": "(x,y,z)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setParticleClass",
        "description": "Sets particle source parameters using existing particle config from <tt>CfgCloudlets</tt> class. Use [[setParticleParams]] subsequently if you need to overwrite some values.",
        "introduced_version": null,
        "syntax": "source '''setParticleClass''' className",
        "parameters": [
            {
                "name": "source",
                "description": "particle source",
                "sqf_type": "Object"
            },
            {
                "name": "className",
                "description": "CfgCloudlets class",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setParticleFire",
        "description": "Set fire parameters to particle effect.\n\nNote: You need to create emitter at first. Basic parameters of particle effect must be defined too. You can use script commands [[setParticleClass]] or [[setParticleParams]] to do so (see example). Correspondence between CfgCloudlets class param names and command array of params:\n<code>particleSource [[setParticleFire]]\n[\n\tcoreIntensity,\n\tcoreDistance,\n\tdamageTime\n];</code>",
        "introduced_version": null,
        "syntax": "source '''setParticleFire''' [coreIntensity, coreDistance, damageTime]",
        "parameters": [
            {
                "name": "source",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "coreIntensity",
                "description": "damage in the center of fire",
                "sqf_type": "Number"
            },
            {
                "name": "coreDistance",
                "description": "how far can unit get damage",
                "sqf_type": "Number"
            },
            {
                "name": "damageTime",
                "description": "how often is unit getting damage",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setParticleParams",
        "description": "Set parameters to particle source. Array is in format [[ParticleArray]]. <br>\n\nSince Arma 3 version 1.11.114706 you can use this command to overwrite many values set by [[setParticleClass]], particularity those defined in [[ParticleArray]]. Correspondence between CfgCloudlets class param names and command array of params:\n<code>particleSource [[setParticleParams]]\n[\n\t/* [[String]] or [[Array]] - If string then the name of the particleShape. And following default values are used:\n\t\tparticleFSNtieth",
        "introduced_version": null,
        "syntax": "particleSource '''setParticleParams''' array",
        "parameters": [
            {
                "name": "particleSource",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "array",
                "description": "format [[ParticleArray]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setParticleRandom",
        "description": "Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params:\n<code>particleSource [[setParticleRandom]]\n[\n\tlifeTimeVar,\n\tpositionVar,\n\tmoveVelocityVar,\n\trotationVelocityVar,\n\tsizeVar,\n\tcolorVar,\n\trandomDirectionPeriodVar,\n\trandomDirectionIntensityVar,\n\tangleVar,\n\tbounceOnSurfaceVar\n];</code>",
        "introduced_version": null,
        "syntax": "particleSource [[setParticleRandom]] [lifeTime, position, moveVelocity, rotationVelocity, size, color, directionPeriod, directionIntensity, angle, bounceOnSurface]",
        "parameters": [
            {
                "name": "particleSource",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "lifeTime",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "position",
                "description": "in format [randomX, randomY, randomZ]",
                "sqf_type": "Array"
            },
            {
                "name": "moveVelocity",
                "description": "in format [randomX, randomY, randomZ]",
                "sqf_type": "Array"
            },
            {
                "name": "rotationVelocity",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "size",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "directionPeriod",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "directionIntensity",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "angle",
                "description": "(Optional)",
                "sqf_type": "Number"
            },
            {
                "name": "bounceOnSurface",
                "description": "(Optional)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPiPEffect",
        "description": "Sets Render Target's visual effect (Picture-in-Picture). \n* 0: Normal - [0]\n* 1: Night Vision - [1]\n* 2: Thermal - [2]\n* 3: [[Post_process_effects#ColorCorrections|Color Correction]] - [3, enabled, brightness, contrast, offset, blend [r,g,b,a], lerp [r,g,b,a], rgb [r,g,b,a]]\n* 4: Mirror - [4] '''<currently not working>'''\n* 5: [[Post_process_effects#ChromAberration|Chromatic Aberration]] - [5, enabled, powerx, powery, (bool) aspectCorrection] '''<currently not working>'''\n* 6: [[Post_process_effects#FilmGrain| Film Grain]] - [6, enabled, intensity, sharpness, grainsize, intensityx1, intensityx2, (bool) monochromatic] '''<currently not working>'''\n* 7: Thermal Inverted [7]\n* 8: Green Thermal [8]",
        "introduced_version": null,
        "syntax": "name '''setPiPEffect''' [effect, optionalParam1, ..., optionalParamN]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPilotCameraDirection",
        "description": "Sets the direction of object airplane or helicopter [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]] (vector in model space).",
        "introduced_version": null,
        "syntax": "object '''setPilotCameraDirection''' Vector3D",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "Vector3D",
                "description": "[x,y,z] - format [[Vector3D]] relative to the model centre (In a similar fashion to [[PositionRelative]])",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPilotCameraRotation",
        "description": "Sets rotation (relative to the centered camera position) of the object airplane or helicopter [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]] .",
        "introduced_version": null,
        "syntax": "object '''setPilotCameraRotation''' rotation",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "rotation",
                "description": "[x,y] - format [yaw (turn), pitch (elevation)]. Values are in radians, positive values are left yaw and down pitch from the center.",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPilotCameraTarget",
        "description": "Sets an area or target to be tracked by the object airplane or helicopter [[A3_Targeting_config_reference#class_pilotCamera|pilotCamera]]. \nTo track an object the vehicle has to have appropriate sensors ([[A3_Targeting_config_reference#CfgVehicles|scanners]]) that can detect the given target type.\nUsing [[objNull]] will unlock the camera",
        "introduced_version": null,
        "syntax": "[[bool]]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "or [[Array]] - format PositionASL",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setPilotLight",
        "description": "Switches headlights of a vehicle on/off. Note that the vehicle has to be [[local]], for global variant use [[Arma 3 Actions]] \"[[Arma_3_Actions#LightOn|LightOn]]\"/\"[[Arma_3_Actions#LightOff|LightOff]]\"",
        "introduced_version": null,
        "syntax": "vehicle [[setPilotLight]] set",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "set",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPitch",
        "description": "Sets the pitch of a persons voice.",
        "introduced_version": null,
        "syntax": "person '''setPitch''' pitch",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pitch",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPlateNumber",
        "description": "Change the license plates on any vehicle which has plates configured. Max 15 characters are allowed!",
        "introduced_version": null,
        "syntax": "vehicle '''setPlateNumber''' string",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPlayable",
        "description": "Create MP role for the unit. The roles created this way are used for [[Join In Progress]] and [[Team Switch]].",
        "introduced_version": null,
        "syntax": "'''setPlayable''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPlayerRespawnTime",
        "description": "Sets the time interval (in seconds) that the player must wait before respawn. It resets to mission default on mission start. In Single Player or when respawn type is GROUP or SIDE in Multiplayer, setting player respawn time has no effect, and [[playerRespawnTime]] will always return -1.",
        "introduced_version": null,
        "syntax": "'''setPlayerRespawnTime''' interval",
        "parameters": [
            {
                "name": "interval",
                "description": "respawn time in seconds",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPos",
        "description": "Sets object position. The position is clamped to the bound of minXYZ: [-50k,-50k,-50k]; maxXYZ: [500k,500k,500k] (See [[Position]])",
        "introduced_version": null,
        "syntax": "object '''setPos''' pos",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pos",
                "description": "position in format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPosASL",
        "description": "Sets the object position above sea level. Given position must be in [[PositionASL]] format.",
        "introduced_version": null,
        "syntax": "object [[setPosASL]] pos",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pos",
                "description": "format [[PositionASL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPosASL2",
        "description": "Sets the object position. The pos array uses the [[PositionASL]] format. The version of the command does not offset based on object center.",
        "introduced_version": null,
        "syntax": "obj [[setPosASL2]] pos",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pos",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPosASLW",
        "description": "Sets the object position above sea surface. The pos array uses the [[PositionASLW]] format.",
        "introduced_version": null,
        "syntax": "obj '''setPosASLW''' pos",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pos",
                "description": "format [[PositionASLW]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPosATL",
        "description": "Sets the position of an object relative to the terrain.",
        "introduced_version": null,
        "syntax": "object '''setPosATL''' pos",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pos",
                "description": "format [[PositionATL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPosWorld",
        "description": "Sets position of an object based on [[PositionWorld]], which is [[PositionASL]] of the model centre [0,0,0].",
        "introduced_version": null,
        "syntax": "object '''setPosWorld''' position",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "PositionWorld"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPosition",
        "description": "Sets the position of a location.",
        "introduced_version": null,
        "syntax": "location '''setPosition''' pos",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "pos",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setPylonLoadout",
        "description": "Adds/overrides loadout to a vehicle pylon. <tt>TransportPylonsComponent</tt> in vehicle config and <tt>pylonWeapon</tt> in the magazine config are required to run.",
        "introduced_version": null,
        "syntax": "vehicle '''setPylonLoadout''' [pylon, magazine, forced, turret];",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "pylon",
                "description": "or [[String]] - pylon index (index starts from 1) or pylon name (see [[getCompatiblePylonMagazines]] Example 4)",
                "sqf_type": "Number"
            },
            {
                "name": "magazine",
                "description": "magazine name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setPylonsPriority",
        "description": "Overrides default pylons priorities",
        "introduced_version": null,
        "syntax": "vehicle '''setPylonsPriority''' [priority pylon1, priority pylon2, ...]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setRadioMsg",
        "description": "Sets radio trigger menu title text (0 -> 0 -> map radio). Use \"NULL\" to disable radio slot. Use \"\" to restore default title",
        "introduced_version": null,
        "syntax": "index '''setRadioMsg''' text",
        "parameters": [
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setRain",
        "description": "Set rain density smoothly over the given transition time (in seconds). A transition time of zero means an immediate change.\nA rain density of zero is no rain, one is maximum rain. Rain is not possible when [[overcast]] is less than 0.7.",
        "introduced_version": null,
        "syntax": "time [[setRain]] rain",
        "parameters": [
            {
                "name": "time",
                "description": "transition time to the new value in seconds",
                "sqf_type": "Number"
            },
            {
                "name": "rain",
                "description": "new rain value in range 0...1",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setRainbow",
        "description": "Changes the rainbow value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.",
        "introduced_version": null,
        "syntax": "time '''setRainbow''' value",
        "parameters": [
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setRandomLip",
        "description": "Enables/Disables random lip. When enabled, the unit continuously moves its lips as if it is talking.",
        "introduced_version": null,
        "syntax": "unit '''setRandomLip''' bool",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setRank",
        "description": "Sets rank of given unit.\n\nPossible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN, MAJOR or COLONEL. <br><br>",
        "introduced_version": null,
        "syntax": "unitName '''setRank''' rank",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "rank",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setRectangular",
        "description": "Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.",
        "introduced_version": null,
        "syntax": "location '''setRectangular''' set",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "set",
                "description": "[[true]] set rectangular, [[false]] set elliptical",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setRepairCargo",
        "description": "Set amount of repair resources in cargo space of repair vehicle.\nAmount 1 is full cargo.",
        "introduced_version": null,
        "syntax": "vehicleName '''setRepairCargo''' amount",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "amount",
                "description": "range 0 to 1",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setRotorBrakeRTD",
        "description": "Toggle a helicopter's rotor brake on or off.\n* 0: off\n* 1: on",
        "introduced_version": null,
        "syntax": "helicopterRTD '''setRotorBrakeRTD''' enable",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setShadowDistance",
        "description": "Sets the shadows rendering distance.",
        "introduced_version": null,
        "syntax": "'''setShadowDistance''' value",
        "parameters": [
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setShotParents",
        "description": "Sets vehicle and instigator pair for the given projectile.",
        "introduced_version": null,
        "syntax": "projectile [[setShotParents]] [vehicle, instigator]",
        "parameters": [
            {
                "name": "projectile",
                "description": "the actual projectile shot",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "Vehicle shooting projectile",
                "sqf_type": "Object"
            },
            {
                "name": "instigator",
                "description": "Person pulling the trigger",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSide",
        "description": "Sets a location's [[Side|side]]. The default side is Unknown.",
        "introduced_version": null,
        "syntax": "location '''setSide''' side",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "side",
                "description": "",
                "sqf_type": "Side"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSimpleTaskAlwaysVisible",
        "description": "Makes the given task allways visible or not.",
        "introduced_version": null,
        "syntax": "taskID [[setSimpleTaskAlwaysVisible]] state",
        "parameters": [
            {
                "name": "taskID",
                "description": "",
                "sqf_type": "Task"
            },
            {
                "name": "state",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSimpleTaskCustomData",
        "description": "Set custom data for the task. Tooltip will be drawn in task list on the right side. Description will be drawn in task description panel on the bottom.",
        "introduced_version": null,
        "syntax": "task '''setSimpleTaskCustomData''' [IconPath, tooltip, description]",
        "parameters": [
            {
                "name": "task",
                "description": "task the custom data are being added to",
                "sqf_type": "Task"
            },
            {
                "name": "iconPath",
                "description": "icon path",
                "sqf_type": "String"
            },
            {
                "name": "tooltip",
                "description": "text displayed next to the icon; max. 3 charactersc",
                "sqf_type": "String"
            },
            {
                "name": "description",
                "description": "text displayed on the task description panel; html format",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSimpleTaskDescription",
        "description": "Attach descriptions to the simple task.",
        "introduced_version": null,
        "syntax": "task '''setSimpleTaskDescription''' [description, descriptionShort, descriptionHUD]",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            },
            {
                "name": "description",
                "description": "Task description",
                "sqf_type": "String"
            },
            {
                "name": "descriptionShort",
                "description": "Task title",
                "sqf_type": "String"
            },
            {
                "name": "descriptionHUD",
                "description": "Task waypoint description",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSimpleTaskDestination",
        "description": "Attach a destination to the simple task.<br>Overrides [[setSimpleTaskTarget]]",
        "introduced_version": null,
        "syntax": "task '''setSimpleTaskDestination''' pos",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            },
            {
                "name": "pos",
                "description": "format [[Position]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSimpleTaskTarget",
        "description": "Attach a target to the simple task.<br>Overrides [[setSimpleTaskDestination]].",
        "introduced_version": null,
        "syntax": "task '''setSimpleTaskTarget''' [target, precisePosition]",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "precisePosition",
                "description": "use exact position of the target for map marker / HUD indicator instead of the position known to the owner of the task (depending on the knowledge about the target)",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSimpleTaskType",
        "description": "Attach type to the simple task. See [[Arma_3_Tasks_Overhaul#Default_Task_Types:_Actions|Default Task Types]].",
        "introduced_version": null,
        "syntax": "task '''setSimpleTaskType''' taskType",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            },
            {
                "name": "taskType",
                "description": "Type of task",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSimulWeatherLayers",
        "description": "Sets number of simul weather layers, affects quality of simul weather clouds.",
        "introduced_version": null,
        "syntax": "'''setSimulWeatherLayers''' layers",
        "parameters": [
            {
                "name": "layers",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSize",
        "description": "Sets the size (radius)  of a location.\n\nThe width  is 2 * x, the height is 2 * y.",
        "introduced_version": null,
        "syntax": "location '''setSize''' size",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "size",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSkill",
        "description": "Sets ability level of person (commander unit). Value of skill may vary from 0 to 1.<br>",
        "introduced_version": null,
        "syntax": "unit [[setSkill]] skill",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "skill",
                "description": "in 0..1 range",
                "sqf_type": "Number"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "skillName",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "in 0..1 range",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSlingLoad",
        "description": "Creates a sling loading from a helicopter to an entity if possible. To unload cargo, pass [[objNull]] as second param. <br><br>",
        "introduced_version": null,
        "syntax": "heli [[setSlingLoad]] cargo",
        "parameters": [
            {
                "name": "heli",
                "description": "the helicopter slinging the load",
                "sqf_type": "Object"
            },
            {
                "name": "cargo",
                "description": "the cargo load entity",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setSoundEffect",
        "description": "Defines the different sound effects. \n\n* Sound - plays a 2D sound from CfgSounds\n* Voice - plays a 3D sound from CfgSounds\n* SoundEnv - plays an environmental sound from CfgEnvSounds\n* SoundDet (only for triggers) - creates a dynamic sound object attached to a trigger defined in [[CfgSFX]]\n\nTo stop any sound, deactivate the trigger (might take up to 0.5 sec to stop) or delete the trigger (immediate). Also use <tt>\"$NONE$\"</tt> to skip the sound (1st item), when there is none to be used (Example 3, 4, 5).",
        "introduced_version": null,
        "syntax": "trigger '''setSoundEffect''' [sound, voice, soundEnv, soundDet]",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSpeaker",
        "description": "Sets the speaker of a person. In order to [[setSpeaker]] dynamically in MP, the command needs to run on every computer with exactly the same params otherwise the speaking unit could appear silent on other PCs. Run this on server: <br><br>\n\n<tt>[bob, \"Male02GRE\"] [[remoteExec]] [\"setSpeaker\", 0, bob];</tt>",
        "introduced_version": null,
        "syntax": "person '''setSpeaker''' speaker",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "speaker",
                "description": "The used voice type",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSpeech",
        "description": "Add speech to location.",
        "introduced_version": null,
        "syntax": "location '''setSpeech''' speech",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "speech",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSpeedMode",
        "description": "Sets group speed mode. If unit is passed as param, unit's group is used. Mode may be one of: \n* '''\"UNCHANGED\"''' (unchanged)\n* '''\"LIMITED\"''' (half speed)\n* '''\"NORMAL\"''' (full speed, maintain formation)\n* '''\"FULL\"''' (do not wait for any other units in formation)",
        "introduced_version": null,
        "syntax": "groupName '''setSpeedMode''' mode",
        "parameters": [
            {
                "name": "groupName",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            },
            {
                "name": "mode",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setStamina",
        "description": "Set units' stamina (seconds until depletion)",
        "introduced_version": null,
        "syntax": "unit '''setStamina''' stamina",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "stamina",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setStaminaScheme",
        "description": "Set stamina bar color. The scheme can be \"Normal\", \"FastDrain\", \"Exhausted\" or \"Default\".",
        "introduced_version": null,
        "syntax": "'''setStaminaScheme''' scheme",
        "parameters": [
            {
                "name": "scheme",
                "description": "can be \"Normal\", \"FastDrain\", \"Exhausted\" or \"Default\"",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setStatValue",
        "description": "Sets a value to a given stat. <br>\nA list of possible StatNames can be found here: [[Arma 3 Stat Names]]<br>\nIts important to note that most Stats are restricted to scripts and missions in certain paths.<br>\nFor example \"ExpWarlockDown\" is restricted to scripts in any subdirectory of <tt>\"a3\\Missions_F_Exp\\Campaign\\Missions\\\"</tt>",
        "introduced_version": null,
        "syntax": "[[setStatValue]] [name, value]",
        "parameters": [
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setSuppression",
        "description": "Sets the given suppression value for the given unit. The value range is from 0 to 1. <br><br>",
        "introduced_version": null,
        "syntax": "unit '''setSuppression''' value",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "suppression value from 0 to 1",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setSystemOfUnits",
        "description": "Set system of units. This will only impact gauges from advanced flight model.",
        "introduced_version": null,
        "syntax": "[[setSystemOfUnits]] value",
        "parameters": [
            {
                "name": "value",
                "description": "possible values are:<br>",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTargetAge",
        "description": "Sets how the target is known to the other centers. They behave like the target was seen age seconds ago.\n\nPossible age values are: \"ACTUAL\", \"5 MIN\", \"10 MIN\", \"15 MIN\", \"30 MIN\", \"60 MIN\", \"120 MIN\" or \"UNKNOWN\".",
        "introduced_version": null,
        "syntax": "object '''setTargetAge''' age",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "age",
                "description": "As above",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTaskMarkerOffset",
        "description": "Sets the task marker position in model space.",
        "introduced_version": null,
        "syntax": "obj [[setTaskState]] position",
        "parameters": [
            {
                "name": "obj",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTaskResult",
        "description": "Set a result of the task.",
        "introduced_version": null,
        "syntax": "task '''setTaskResult''' [state,result]",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTaskState",
        "description": "Set the state of a given task.\n\nState value may be one of:\n*\"None\"\n*\"Created\"\n*\"Assigned\"\n*\"Succeeded\"\n*\"Failed\"\n*\"Canceled\"",
        "introduced_version": null,
        "syntax": "task '''setTaskState''' state",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            },
            {
                "name": "state",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTerrainGrid",
        "description": "Sets the desired [[getTerrainGrid | terrain resolution]] (in meters). For default landscapes the supported resolutions are: \n\n* '''50''' - smoothest, less lag\n* '''25''' - default in multiplayer\n* '''12.5''' - default in single player\n* '''6.25'''\n* '''3.125''' - bumpiest, higher lag\n\nIf unsupported resolution is selected, the nearest supported resolution is used instead. Higher number means less vertices are used for terrain rendering, making distant hills less smooth. Value 12.5 corresponds to selecting Terrain Detail Normal in Video options, 50 to Very Low, 3.125 to Very High. In older games like [[Armed Assault]] terrain resolution is fixed, determined by the world created.",
        "introduced_version": null,
        "syntax": "'''setTerrainGrid''' grid",
        "parameters": [
            {
                "name": "grid",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setText",
        "description": "Sets the text associated with a location. This text will be displayed on the game map at the location's position.",
        "introduced_version": null,
        "syntax": "location '''setText''' text",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTimeMultiplier",
        "description": "Sets a time multiplier for in-game time. The command range is now capped at 0.1 - 120 to avoid performance problems.",
        "introduced_version": null,
        "syntax": "'''setTimeMultiplier''' value",
        "parameters": [
            {
                "name": "value",
                "description": "has to be in range from 0.1 to 120",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTitleEffect",
        "description": "Defines the title effect via [Type, Effect, Text] where\n\n'Type' can be \n*\"NONE\", \n*\"OBJECT\", \n**'Text' defines the shown object , a subclass of CfgTitles.\n\n*\"RES\" \n**'Text' defines a resource class, a subclass of RscTitles.\n*\"TEXT\"\n**The 'Text' is shown as text itself. 'Effect' defines a subtype: \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" or \"WHITE IN\".",
        "introduced_version": null,
        "syntax": "trigger '''setTitleEffect''' [type, effect, text]",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setToneMapping",
        "description": "Applies a specific tone mapping to the game.<br><br>",
        "introduced_version": null,
        "syntax": "'''setToneMapping''' toneName",
        "parameters": [
            {
                "name": "toneName",
                "description": "where string is effect name - defaults are ''Arma'', ''Filmic'' and ''Reinhard''. They can be edited with [[setToneMappingParams]] command",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setToneMappingParams",
        "description": "Edits tone mapping parameters.<br><br>",
        "introduced_version": null,
        "syntax": "toneName '''setToneMappingParams''' params",
        "parameters": [
            {
                "name": "toneName",
                "description": "where string is effect name - defaults are ''Arma'', ''Filmic'' and ''Reinhard''.",
                "sqf_type": "String"
            },
            {
                "name": "params",
                "description": "(''please populate'')",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTrafficDensity",
        "description": "Set the density of ambient cars in a rectangle (in cars per kilometer).",
        "introduced_version": null,
        "syntax": "'''setTrafficDensity''' [density, xMin, xMax, zMin, zMax]",
        "parameters": [
            {
                "name": "density",
                "description": "density (in cars per kilometer)",
                "sqf_type": "Number"
            },
            {
                "name": "xMin",
                "description": "western border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "xMax",
                "description": "eastern border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "zMin",
                "description": "southern border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "zMax",
                "description": "northern border of the affected rectangle",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTrafficDistance",
        "description": "Set maximum ambient traffic draw distance (in 2D).",
        "introduced_version": null,
        "syntax": "'''setTrafficDistance''' distance",
        "parameters": [
            {
                "name": "distance",
                "description": "draw distance (in meter)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTrafficGap",
        "description": "Set the average gap between ambient cars in a rectangle (in meters).",
        "introduced_version": null,
        "syntax": "'''setTrafficGap''' [gap, xMin, xMax, zMin, zMax]",
        "parameters": [
            {
                "name": "gap",
                "description": "average gap between ambient cars (in meters)",
                "sqf_type": "Number"
            },
            {
                "name": "xMin",
                "description": "western border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "xMax",
                "description": "eastern border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "zMin",
                "description": "southern border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "zMax",
                "description": "northern border of the affected rectangle",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTrafficSpeed",
        "description": "Set ambient traffic speed in a rectangle (in kilometers per hour).",
        "introduced_version": null,
        "syntax": "'''setTrafficSpeed''' [speed, xMin, xMax, zMin, zMax]",
        "parameters": [
            {
                "name": "speed",
                "description": "traffic speed (in kilometers per hour)",
                "sqf_type": "Number"
            },
            {
                "name": "xMin",
                "description": "western border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "xMax",
                "description": "eastern border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "zMin",
                "description": "southern border of the affected rectangle",
                "sqf_type": "Number"
            },
            {
                "name": "zMax",
                "description": "northern border of the affected rectangle",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTriggerActivation",
        "description": "Defines the trigger activation type. \n\nSee [[ArmA:_Mission_Editor#Triggers_Mode_.28F3.29|ArmA:Mission Editor - Triggers]] for a thorough overview of triggers and its fields for activation, effects, etc.   Since Arma 3 v1.67, \"ANYPLAYER\" activation can be used to detect any player.",
        "introduced_version": null,
        "syntax": "trigger '''setTriggerActivation''' [by, type, repeating]",
        "parameters": [
            {
                "name": "trigger",
                "description": "Trigger object",
                "sqf_type": "Object"
            },
            {
                "name": "repeating",
                "description": "Activation can happen repeatedly",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTriggerArea",
        "description": "Defines the area monitored by the given trigger. The area could be either rectangular or elliptical. Since Arma 3 v1.59.135137 it is possible to define 3 dimensional area to monitor by specifying extra param for the area height (see pic). \n<br><br>Just like with a and b dimensions, c dimension will alter area in opposite directions from the trigger position along z axis. Therefore if the trigger position is on the surface, half of the trigger area will be above the surface and half below. To place the whole area above the surface, adjust trigger position (move it up c meters). If c is not specified or",
        "introduced_version": null,
        "syntax": "trigger '''setTriggerArea''' [a, b, angle, isRectangle, c]",
        "parameters": [
            {
                "name": "trigger",
                "description": "object of the type \"EmptyDetector\"",
                "sqf_type": "Object"
            },
            {
                "name": "a",
                "description": "trigger area X size / 2, in meters",
                "sqf_type": "Number"
            },
            {
                "name": "b",
                "description": "trigger area Y size / 2, in meters",
                "sqf_type": "Number"
            },
            {
                "name": "angle",
                "description": "trigger area rotation in degrees",
                "sqf_type": "Number"
            },
            {
                "name": "isRectangle",
                "description": "[[true]] if rectangle",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]\n<br>[[Image:setTriggerArea.jpg|300px]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTriggerInterval",
        "description": "Sets the interval in seconds for trigger condition check.<br><br>",
        "introduced_version": null,
        "syntax": "trigger [[setTriggerInterval]] interval",
        "parameters": [
            {
                "name": "trigger",
                "description": "Trigger object",
                "sqf_type": "Object"
            },
            {
                "name": "interval",
                "description": "Interval in seconds with which trigger condition is checked",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTriggerStatements",
        "description": "Defines trigger condition, activation and deactivation statements. Trigger condition has to return [[Boolean]]. [[true]] will activate the trigger, [[false]] will deactivate it (only if activation is set to repeat). [[thisList]] returns the same result as [[list]] command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.",
        "introduced_version": null,
        "syntax": "trigger '''setTriggerStatements''' [condition, activation, deactivation]",
        "parameters": [
            {
                "name": "trigger",
                "description": "Trigger object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTriggerText",
        "description": "Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.",
        "introduced_version": null,
        "syntax": "trigger '''setTriggerText''' text",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTriggerTimeout",
        "description": "Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time. <br><br>\nFor a normal trigger, ''min'', ''mid'' and ''max'' are used to generate random duration according to [https://en.wikipedia.org/wiki/Normal_distribution Gaussian Distribution]",
        "introduced_version": null,
        "syntax": "trigger '''setTriggerTimeout''' [min, mid, max, interruptable]",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "min",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "mid",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "max",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "interruptable",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setTriggerType",
        "description": "Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission):\n\n* <tt>\"NONE\"</tt>\n* <tt>\"EAST G\"</tt> - Guarded by OPFOR - (It is better to use [[createGuardedPoint]] instead)\n* <tt>\"WEST G\"</tt> - Guarded by BLUFOR - (It is better to use [[createGuardedPoint]] instead)\n* <tt>\"GUER G\"</tt> - Guarded by Independent - (It is better to use [[createGuardedPoint]] instead)\n* <tt>\"SWITCH\"</tt> - Switch waypoints/break loop (see [[ArmA:_Mission_Editor#Triggers_Mode_.28F3.29|Triggers]])\n* <tt>\"END1\"</tt> - End #1\n* <tt>\"END2\"</tt> - End #2\n* <tt>\"END3\"</tt> - End #3\n* <tt>\"END4\"</tt> - End #4\n* <tt>\"END5\"</tt> - End #5\n* <tt>\"END6\"</tt> - End #6\n* <tt>\"LOOSE\"</tt> - (Meant to say LOSE but is misspelt in the game engine).\n* <tt>\"WIN\"</tt> - (Not in editor. Valid enum name but when set, defaults to <tt>\"END1\"</tt>)",
        "introduced_version": null,
        "syntax": "trigger '''setTriggerType''' action",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "action",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setType",
        "description": "Changes a location to the specified class. Location classes are defined in CfgLocationTypes.",
        "introduced_version": null,
        "syntax": "location '''setType''' name",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnconscious",
        "description": "In",
        "introduced_version": null,
        "syntax": "unit [[setUnconscious]] set",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "set",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnitAbility",
        "description": "Sets skill of given unit. Unlike [[setSkill]], [[setUnitAbility]] can set values > 1. Even though the [[skill]] command will correctly return set value, the actual unit ability will be capped to max available.",
        "introduced_version": null,
        "syntax": "unit [[setUnitAbility]] value",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnitLoadout",
        "description": "Creates a loadout from given inventory structure and applies it to a unit. When [[String]] for class name is supplied, the command will search <tt>CfgVehicles</tt> for the given class in order to extract the loadout from config. If [[Config]] is given, it will search given config (including [[missionConfigFile | mission config]]) for the loadout information. In either case, the config should contain the following entries, which is standard for any unit class, for example:",
        "introduced_version": null,
        "syntax": "unit [[setUnitLoadout]] loadout",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "loadout",
                "description": "[[Unit Loadout Array]]",
                "sqf_type": "Array"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "loadout",
                "description": "[[Unit Loadout Array]]",
                "sqf_type": "Array"
            },
            {
                "name": "fullMagazines",
                "description": "Partially emptied magazines will be refilled when the loadout is applied",
                "sqf_type": "Boolean"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "class name (see description)",
                "sqf_type": "String"
            },
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "config",
                "description": "config class (see description)",
                "sqf_type": "Config"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnitPos",
        "description": "Set unit position rules. Mode may be one of: \n* '''\"DOWN\"''' - unit goes prone and stays prone.\n* '''\"UP\"''' - unit stands and stays standing.\n* '''\"MIDDLE\"''' - Kneel Position. ArmA version 1.04 ''(Unit will not kneel if it is unarmed'')\n* '''\"AUTO\"''' - unit chooses mode according to circumstances.\nThis command will not change the stance of the human player, even though it will change the output of [[unitPos]] command. To change player stance use [[playAction]] or [[playActionNow]]:\n<code>[[player]] [[playAction]] \"PlayerProne\"; // DOWN\n[[player]] [[playAction]] \"PlayerStand\"; // UP\n[[player]] [[playAction]] \"PlayerCrouch\"; // MIDDLE</code>",
        "introduced_version": null,
        "syntax": "unit '''setUnitPos''' mode",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mode",
                "description": "as above",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnitPosWeak",
        "description": "Set unit position rules. Mode may be one of: \n* '''\"DOWN\"''' - person goes prone and stays prone.\n* '''\"UP\"''' - person stands and stays standing.\n* '''\"Middle\"''' - Kneel Position. ArmA version 1.04\n* '''\"AUTO\"''' - person chooses mode according to circumstances.",
        "introduced_version": null,
        "syntax": "unit '''setUnitPosWeak''' mode",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mode",
                "description": "as above",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnitRank",
        "description": "Sets rank of given unit.\n\nPossible rank values, and the associated [[rating]] that is automatically given:\n{",
        "introduced_version": null,
        "syntax": "unitName [[setUnitRank]] rank",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "rank",
                "description": "as above",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnitRecoilCoefficient",
        "description": "Proportionaly increase/decrease unit's recoil. Drives muzzle up with every shot when supplied positive number and down when negative. 0 cancels recoil.",
        "introduced_version": null,
        "syntax": "unitName '''setUnitRecoilCoefficient''' coefficient",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "coefficient",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnitTrait",
        "description": "Enables or disables a trait or alters a trait of the given unit. Custom trait can only be a [[Bool|bool]].<br><br>\nDefault traits are:\n*[[Number]] '''audibleCoef''' - A lower value means the unit is harder to hear\n*[[Number]] '''camouflageCoef''' - A lower value means the unit is harder to spot\n*[[Number]] '''loadCoef''' - Equipment weight multiplier affecting fatigue and stamina\n*[[Boolean]] '''engineer''' - Ability to partially repair vehicles with toolkit, equivalent to <tt>engineer",
        "introduced_version": null,
        "syntax": "unit [[setUnitTrait]] [skillName, value, isCustom]",
        "parameters": [
            {
                "name": "unit",
                "description": "The unit whose trait should be set",
                "sqf_type": "Object"
            },
            {
                "name": "skillName",
                "description": "Name of the skill",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "or [[Number]] - Value (see above)",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUnloadInCombat",
        "description": "If cargo or turret units ''should'' get out of vehicle when in combat. If '''true''', vehicle will stop and units will dismount. Vehicle must be local.",
        "introduced_version": null,
        "syntax": "vehicle [[setUnloadInCombat]] [allowCargo, allowTurrets]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "allowCargo",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "allowTurrets",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUserActionText",
        "description": "Changes user added action (see [[addAction]]) menu item text. <br><br>\n\nSince Arma 3 v1.61.136587 it is possible to set 2 more optional texts, one for background and one for foreground when action is displayed on the screen (''showWindow''",
        "introduced_version": null,
        "syntax": "object '''setUserActionText''' [actionIndex, textMenu, textWindowBackground, textWindowForeground]",
        "parameters": [
            {
                "name": "object",
                "description": "object the action is added to",
                "sqf_type": "Object"
            },
            {
                "name": "actionIndex",
                "description": "action id returned by [[addAction]]",
                "sqf_type": "Number"
            },
            {
                "name": "textMenu",
                "description": "or [[Structured Text]] - Text title shown in scroll action menu",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUserMFDText",
        "description": "Stored user text value in MFD, limit is 50, user0...user49",
        "introduced_version": null,
        "syntax": "vehicle [[setUserMFDText]] [index, value]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle with MFD",
                "sqf_type": "Object"
            },
            {
                "name": "index",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setUserMFDValue",
        "description": "When MFD is using user controllers, this command can set values on them. For example, MFD config for Blackfoot has an entry",
        "introduced_version": null,
        "syntax": "vehicle '''setUserMFDValue''' [index, value]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "an vehicle with MFD",
                "sqf_type": "Object"
            },
            {
                "name": "index",
                "description": "index of custom MFD user actions",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "value which should custom source return in MFD",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVariable",
        "description": "Set variable to given value in the variable space of given element.<br>\nTo remove a variable, set it to [[nil]] (e.g.",
        "introduced_version": null,
        "syntax": "varspace [[setVariable]] [name, value]",
        "parameters": [
            {
                "name": "varspace",
                "description": ", [[Object]], [[Group]], [[Team_Member]], [[Task]], [[Location]], [[Control]], [[Display]] - variable space in which variable can be set",
                "sqf_type": "Namespace"
            },
            {
                "name": "name",
                "description": "variable name",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "variable value",
                "sqf_type": "Anything"
            },
            {
                "name": "varspace",
                "description": ", [[Object]] or [[Group]] - variable space in which variable can be set",
                "sqf_type": "missionNamespace"
            },
            {
                "name": "name",
                "description": "variable name",
                "sqf_type": "String"
            },
            {
                "name": "value",
                "description": "variable value (if public is [[true]], check [[publicVariable]] for what types are supported for broadcast)",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVectorDir",
        "description": "Set object's direction vector. Up vector will remain unchanged.",
        "introduced_version": null,
        "syntax": "object '''setVectorDir''' [x,y,z]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVectorDirAndUp",
        "description": "[[File:Vectordirandup.jpg|right|300px]] Sets orientation of an object.\nThe command takes 2 vector arrays, one for [[vectorDir]] and one for [[vectorUp]].\nDefault object orientation will always have [[vectorDir]] pointing forward (North) along Y axis and [[vectorUp]] pointing up along Z axis - [[0,1,0],[0,0,1]], as shown on the diagram below (see also [[BIS_fnc_transformVectorDirAndUp]]).<br>\n\nWhen attaching object to an object the axes are relative to the object that gets the attachment.\nIf it is player object for example, then X goes from left to right, Y goes from back to front, and Z goes from down up.<br>\n\nThe [[setDir]] command is incompatible with [[setVectorDirAndUp]] and should not be used together on the same object.\nUsing [[setVectorDirAndUp]] alone should be sufficient for any orientation. <div style",
        "introduced_version": null,
        "syntax": "vehicle [[setVectorDirAndUp]] [[x1, y1, z1], [x2, y2, z2]]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVectorUp",
        "description": "Set object's up vector. Direction of the object remain unchanged. Default object's [[vectorUp]] is [0,0,1].\n\nIn Multiplayer, [[setVectorUp]] must be executed on the machine where the object it applied to is [[local]].",
        "introduced_version": null,
        "syntax": "object '''setVectorUp''' [x, y, z]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleAmmo",
        "description": "Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to [[local]] turrets. To check locality of turret use [[turretLocal]].\n\nThe value ranges from 0 to 1.",
        "introduced_version": null,
        "syntax": "vehicleName '''setVehicleAmmo''' value",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "0: empty, 1: full",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleAmmoDef",
        "description": "Sets how much ammunition (compared to the configuration of magazines defined in the vehicle's class) the vehicle has. Note that the ammo will only be added to [[local]] turrets. To check the locality of turret use [[turretLocal]].",
        "introduced_version": null,
        "syntax": "unit '''setVehicleAmmoDef''' value",
        "parameters": [
            {
                "name": "unit",
                "description": "Unit or vehicle.",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "From 0 (no ammo) to 1 (fully loaded).",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleArmor",
        "description": "Sets the armor (or health for men) state of the vehicle (a value from 0 to 1). \n\nWorks like [[setDamage]] only in reverse: ''player setVehicleArmor 1'' is the same as ''player setDamage 0'', and ''player setVehicleArmor 0'' is the same as ''player setDamage 0.97''",
        "introduced_version": null,
        "syntax": "vehicleName '''setVehicleArmor''' value",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "range 0 to 1",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleCargo",
        "description": "Load cargo vehicle inside vehicle if possible, returns bool based on whether the vehicle was able to be loaded.  Can also be used to unload a specific loaded vehicle or all loaded vehicles.",
        "introduced_version": null,
        "syntax": "vehicle [[setVehicleCargo]] cargo",
        "parameters": [
            {
                "name": "vehicle",
                "description": "vehicle carrying cargo",
                "sqf_type": "Object"
            },
            {
                "name": "cargo",
                "description": "cargo to put in vehicle",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - whether the vehicle was able to be loaded",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setVehicleId",
        "description": "Sets ID to vehicle. By this ID vehicle is referenced by triggers and waypoints.",
        "introduced_version": null,
        "syntax": "vehicleName '''setVehicleId''' id",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "id",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleInit",
        "description": "Attach a statement to a unit. The statement is propagated over the network in MP games, it can be executed by invoking [[processInitCommands]].",
        "introduced_version": null,
        "syntax": "unitName [[setVehicleInit]] statement",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "statement",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleLock",
        "description": "Sets vehicle lock. Possible values:\n<br> \n* \"UNLOCKED\" \n* \"DEFAULT\"\n* \"LOCKED\"\n* \"LOCKEDPLAYER\"",
        "introduced_version": null,
        "syntax": "vehicleName '''setVehicleLock''' lockState",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "lockState",
                "description": "see above",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehiclePosition",
        "description": "Moves the object to a given position (same as [[createVehicle]] placement algorithm). Uses either the position that's defined by the ''position'' param, or one of the marker positions from the markers array. The object is placed inside a circle with ''position'' as its center and ''placement'' as its radius. The type of placement could also be controlled with ''special''. \n<br><br>\nIf position is in water and vehicle can float, it is placed on water surface, otherwise it is placed on the ground, even if ground is under water. If roof surfaces support walking, units will be placed on roofs if such position is given.",
        "introduced_version": null,
        "syntax": "object '''setVehiclePosition''' [position, markers, placement, special]",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "([[PositionAGL]] if boat or amphibious), [[Position2D]], or [[Object]] - Desired placement position. If object is given, object position is used for ''position''. Normally only ''x'' and ''y'' are considered, unless \"CAN_COLLIDE\" is used for special placement.",
                "sqf_type": "PositionATL"
            },
            {
                "name": "markers",
                "description": "of [[String]]s - If the markers array contains one or more marker names, the position is chosen randomly and could be one of the marker positions or just the supplied main position. If marker had z coordinate set with [[setMarkerPos]], the vehicle will be placed on the nearest surface below this z coordinate",
                "sqf_type": "Array"
            },
            {
                "name": "placement",
                "description": "The vehicle is randomly placed inside a circle with given position as center and placement as its radius",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success, [[false]] on failure",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setVehicleRadar",
        "description": "Sets the AI rules of Radar usage (Emission Control). Automatic means Radar switched on only when in Combat. The command doesn't affect player-controlled vehicles.",
        "introduced_version": null,
        "syntax": "vehicle '''setVehicleRadar''' rules",
        "parameters": [
            {
                "name": "vehicle",
                "description": "an AI-controlled vehicle",
                "sqf_type": "Object"
            },
            {
                "name": "rules",
                "description": "a flag, 0 - automatic, 1 - forced on, 2 - forced off",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleReceiveRemoteTargets",
        "description": "Sets that the vehicle will be able to receive targets acquired by someone else via datalink from the [[Side]] center.",
        "introduced_version": null,
        "syntax": "vehicle '''setVehicleReceiveRemoteTargets''' bool",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleReportOwnPosition",
        "description": "Sets that the vehicle will share its own position via datalink to the [[Side]] center.",
        "introduced_version": null,
        "syntax": "vehicle '''setVehicleReportOwnPosition''' report",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "report",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleReportRemoteTargets",
        "description": "Sets that the vehicle will share targets that were acquired by its own sensors via datalink to the [[Side]] center.",
        "introduced_version": null,
        "syntax": "vehicle '''setVehicleReportRemoteTargets''' bool",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleTIPars",
        "description": "Sets the \"heat\" state of different vehicle parts for Thermal Imaging detection. This allows simulation of heated up parts of a vehicle without it actually having to utilize them - on a range from 0 to 1, 0 being cold, 1 being hot.",
        "introduced_version": null,
        "syntax": "vehicle [[setVehicleTIPars]] [engine, wheels, weapon]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "Vehicle whose components are manipulated",
                "sqf_type": "Object"
            },
            {
                "name": "engine",
                "description": "engine and body's heat",
                "sqf_type": "Number"
            },
            {
                "name": "wheels",
                "description": "tracks/wheels' heat",
                "sqf_type": "Number"
            },
            {
                "name": "weapon",
                "description": "main weapon's heat",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVehicleVarName",
        "description": "Sets string representation of an object to a custom string. For example it is possible to return \"MyFerrari\" instead of default \"ce06b00# 164274: offroad_01_unarmed_f.p3d\" when querying object as string: \n<code>[[hint]] [[str]] _offroad; //MyFerrari</code>\nWhen a vehicle is created and named in the editor, the name becomes both the variable containing the vehicle object and the string representation of the vehicle object. [[vehicleVarName]] on the other hand is only string representation of the object. So if you want to refer to the actual object by its [[vehicleVarName]], an extra step needed to assign the object to a variable of the same name. For example to see and refer to offroad as myFerrari:\n<code>_offroad [[setVehicleVarName]] \"MyFerrari\";\nMyFerrari",
        "introduced_version": null,
        "syntax": "object''' setVehicleVarName''' name",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVelocity",
        "description": "Set [[velocity]] (speed vector) of a vehicle.   Units are in metres per second.",
        "introduced_version": null,
        "syntax": "vehicleName [[setVelocity]] [x, y, z]",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVelocityModelSpace",
        "description": "Sets the velocity (speed vector) of the given vehicle relative to its model.",
        "introduced_version": null,
        "syntax": "vehicle '''setVelocityModelSpace''' [x, y, z]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVelocityTransformation",
        "description": "Interpolates and applies [[PositionASL]], [[velocity]], [[vectorDir]] and [[vectorUp]] to the given object based on the interval value. <br>\nWhen interval is 0 the \"fromXXX\" values are used for the beginning of the interpolation. When interval is 1, the \"toXXX\" values are used for the end of interpolation. When interval value is in between, interpolated values are used (see diagram below). The interpolation is linear and along straight line between \"from\" and \"to\" positions. If curve is needed, then it should be constructed from multiple straight sections or by dynamically changing value of position params during the interpolation cycle, similar to [https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Quadratic_curves Quadratic Curve animation] (see Example 3).\n<br>The [[velocity]] param doesn't do much in SP, but in MP, provided the velocity component is set correctly, it helps the engine to figure out what the next position of the moving object should be on other clients.\n<br><br>\nThe actual approximate interpolation formula for this command is:\n<code>_vecCurrent",
        "introduced_version": null,
        "syntax": "object '''setVelocityTransformation''' [fromPosASL, toPosASL, fromVelocity, toVelocity, fromVectorDir, toVectorDir, fromVectorUp, toVectorUp, interval]",
        "parameters": [
            {
                "name": "object",
                "description": "object to be interpolated",
                "sqf_type": "Object"
            },
            {
                "name": "fromPosASL",
                "description": "starting [[getPosASL]] of the object",
                "sqf_type": "PositionASL"
            },
            {
                "name": "toPosASL",
                "description": "ending [[getPosASL]] of the object",
                "sqf_type": "PositionASL"
            },
            {
                "name": "fromVelocity",
                "description": "starting [[velocity]] of the object",
                "sqf_type": "Array"
            },
            {
                "name": "toVelocity",
                "description": "ending [[velocity]]  of the object",
                "sqf_type": "Array"
            },
            {
                "name": "fromVectorDir",
                "description": "starting [[vectorDir]]  of the object",
                "sqf_type": "Array"
            },
            {
                "name": "toVectorDir",
                "description": "ending [[vectorDir]]  of the object",
                "sqf_type": "Array"
            },
            {
                "name": "fromVectorUp",
                "description": "starting [[vectorUp]]  of the object",
                "sqf_type": "Array"
            },
            {
                "name": "toVectorUp",
                "description": "ending [[vectorUp]]  of the object",
                "sqf_type": "Array"
            },
            {
                "name": "interval",
                "description": "interpolation interval (variable value, normally between 0 and 1)",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setViewDistance",
        "description": "Set rendering distance. Setting view distance to &lt;",
        "introduced_version": null,
        "syntax": "[[setViewDistance]] distance",
        "parameters": [
            {
                "name": "distance",
                "description": "distance in metres",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setVisibleIfTreeCollapsed",
        "description": "Sets whether or not the object is visible even if the tree is collapsed.",
        "introduced_version": null,
        "syntax": "map '''setVisibleIfTreeCollapsed''' [object, visible]",
        "parameters": [
            {
                "name": "map",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "visible",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWPPos",
        "description": "Sets waypoint position <br><br>",
        "introduced_version": null,
        "syntax": "waypoint '''setWPPos''' pos",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "pos",
                "description": "format [[PositionAGL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWantedRPMRTD",
        "description": "Tell the helicopter engine RPMs to reach the given value within a period of time. The simulation will try to reach the RPMs, but it does not guarantee it will reach the precise value!\n* engine index 0: engine #1\n* engine index 1: engine #2\n* engine index 2: engine #3\n* engine index -1: all engines",
        "introduced_version": null,
        "syntax": "helicopterRTD '''setWantedRPMRTD''' [value, time, engineIndex]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaves",
        "description": "Changes the waves value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.<br><br>\n'''NOTE''': This command will have no effect (even though the value of [[waves]] changes) unless <tt>Manual Override</tt> option is selected in the editor in the Intel, which is normally off.<br><br>\n[[Image:setWaves.jpg|left|600px]]",
        "introduced_version": null,
        "syntax": "time '''setWaves''' value",
        "parameters": [
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointBehaviour",
        "description": "Switches the unit behaviour when the waypoint becomes active.\n<br>\n<br>\nPossible values are:\n* \"UNCHANGED\"\n* \"CARELESS\"\n* \"SAFE\"\n* \"AWARE\"\n* \"COMBAT\"\n* \"STEALTH\"\n\nSee the [[AIBehaviour]] page for details of the effect of this command on AI units.",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointBehaviour''' mode",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "mode",
                "description": "As Above",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointCombatMode",
        "description": "The group combat mode is switched when the waypoint becomes active.\n<br>\n<br>\nPossible mode values are:\n* '''\"NO CHANGE\"''' (No change)\n* '''\"[[ArmA:_AI_Combat_Modes#Engagement_rules|BLUE]]\"''' (Never fire)\n* '''\"[[ArmA:_AI_Combat_Modes#Engagement_rules|GREEN]]\"''' (Hold fire - defend only)\n* '''\"[[ArmA:_AI_Combat_Modes#Engagement_rules|WHITE]]\"''' (Hold fire, engage at will)\n* '''\"[[ArmA:_AI_Combat_Modes#Engagement_rules|YELLOW]]\"''' (Fire at will)\n* '''\"[[ArmA:_AI_Combat_Modes#Engagement_rules|RED]]\"''' (Fire at will, engage at will)",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointCombatMode''' mode",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "mode",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointCompletionRadius",
        "description": "The completion radius allows units to call the waypoint completed once they are inside of the given circle.",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointCompletionRadius''' radius",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointDescription",
        "description": "Sets the description shown in the HUD while the waypoint is active.",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointDescription''' text",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointForceBehaviour",
        "description": "Forces the behavior of waypoint, disables AUTOCOMBAT.",
        "introduced_version": null,
        "syntax": "waypoint [[setWaypointForceBehaviour]] state",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [",
                "sqf_type": "Waypoint"
            },
            {
                "name": "state",
                "description": "Force or not",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointFormation",
        "description": "Switches the group formation when the waypoint becomes active.\n<br>\n<br>\nPossible values are: \n* \"NO CHANGE\"\n* \"COLUMN\"\n* \"STAG COLUMN\"\n* \"WEDGE\"\n* \"ECH LEFT\"\n* \"ECH RIGHT\"\n* \"VEE\"\n* \"LINE\"\n* \"FILE\"\n* \"DIAMOND\"",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointFormation''' formation",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "formation",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointHousePosition",
        "description": "For waypoints attached to a house, this defines the target [[buildingPos]] index.",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointHousePosition''' pos",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "pos",
                "description": "[[buildingPos]] index",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointLoiterAltitude",
        "description": "Assignes loiter altitude to waypoint",
        "introduced_version": null,
        "syntax": "waypoint [[setWaypointLoiterAltitude]] loiterAltitude",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "loiterAltitude",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointLoiterRadius",
        "description": "Assignes loiter radius to waypoint",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointLoiterRadius''' radius",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Waypoint"
            },
            {
                "name": "radius",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointLoiterType",
        "description": "Sets the waypoint loiter type.",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointLoiterType''' type",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Waypoint"
            },
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointName",
        "description": "Changes the waypoint name.",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointName''' name",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Waypoint"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointPosition",
        "description": "Attempts to move given waypoint to a random position inside a circle with the given center and radius.",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointPosition''' [center, radius]",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "center",
                "description": "or [[Object]] (or [[PositionASL]] if the radius is negative)",
                "sqf_type": "PositionAGL"
            },
            {
                "name": "radius",
                "description": "random placement radius in meters. Set it to -1 and convert center to [[PositionASL]] for the exact center placement.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointScript",
        "description": "Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use [[SQS]]-Syntax. The script receives the following arguments in [[_this]] variable: [group, position, target] + [the optional passed arguments]. The optional arguments are [[append]]ed to the end of the arguments array.",
        "introduced_version": null,
        "syntax": "waypoint [[setWaypointScript]] command",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "command",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointSpeed",
        "description": "Switches the group speed mode when the waypoint becomes active.\n<br>\n<br>\nPossible values are:\n* \"UNCHANGED\"\n* \"LIMITED\"\n* \"NORMAL\"\n* \"FULL\"",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointSpeed''' mode",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "mode",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointStatements",
        "description": "The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.<br>\nWithin the Condition & Statement code string:\n* [[Magic Variables#this_2|this]] refers to the group leader\n* [[Magic Variables#thisList|thisList]] refers to the group's units",
        "introduced_version": null,
        "syntax": "waypoint [[setWaypointStatements]] [condition, statement]",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "condition",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "statement",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointTimeout",
        "description": "Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointTimeout''' [min, mid, max]",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "min",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "mid",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "max",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointType",
        "description": "Changes the waypoint type. \n\nType can be:\n* <tt>\"MOVE\"</tt>\n* <tt>\"DESTROY\"</tt>\n* <tt>\"GETIN\"</tt>\n* <tt>\"SAD\"</tt> ''(Seek And Destroy)''\n* <tt>\"JOIN\"</tt>\n* <tt>\"LEADER\"</tt>\n* <tt>\"GETOUT\"</tt>\n* <tt>\"CYCLE\"</tt>\n* <tt>\"LOAD\"</tt>\n* <tt>\"UNLOAD\"</tt>\n* <tt>\"TR UNLOAD\"</tt>\n* <tt>\"HOLD\"</tt>\n* <tt>\"SENTRY\"</tt>\n* <tt>\"GUARD\"</tt> ''(for use with GUARDED BY trigger or [[createGuardedPoint]])''\n* <tt>\"TALK\"</tt>\n* <tt>\"SCRIPTED\"</tt>\n* <tt>\"SUPPORT\"</tt>\n* <tt>\"GETIN NEAREST\"</tt>\n* <tt>\"DISMISS\"</tt>\n* <tt>\"LOITER\"</tt> ''(new in Arma 3)''\n* <tt>\"HOOK\"</tt> ''(new in Arma 3)'' - slingload object\n* <tt>\"UNHOOK\"</tt> ''(new in Arma 3)'' - drop slingload\n* <tt>\"AND\"</tt> ''(only for game logics)''\n* <tt>\"OR\"</tt> ''(only for game logics)''\n\nMore details at [[Waypoints]].",
        "introduced_version": null,
        "syntax": "waypoint [[setWaypointType]] type",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "type",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWaypointVisible",
        "description": "Sets the visibility of the given waypoint in 3D HUD view (for map visibility see [[showWaypoint]]).",
        "introduced_version": null,
        "syntax": "waypoint '''setWaypointVisible''' visible",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "visible",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWeaponReloadingTime",
        "description": "Sets states and/or makes an action of/on weapon. Reload time is between 0 and 1 inclusive, where 1 is 100% of maximum reloading time.",
        "introduced_version": null,
        "syntax": "vehicle '''setWeaponReloadingTime''' [gunner, muzzleName, reloadTime]",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "gunner",
                "description": "alive and able gunner operating desired turret",
                "sqf_type": "Object"
            },
            {
                "name": "muzzleName",
                "description": "muzzle on desired turret",
                "sqf_type": "String"
            },
            {
                "name": "reloadTime",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if given weapon is found",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "setWind",
        "description": "Set current (forced",
        "introduced_version": null,
        "syntax": "'''setWind''' [x, y, forced]",
        "parameters": [
            {
                "name": "x",
                "description": "Easterly component (in m/s, positive = to the east)",
                "sqf_type": "Number"
            },
            {
                "name": "y",
                "description": "Northerly component (in m/s, positive = to the north)",
                "sqf_type": "Number"
            },
            {
                "name": "forced",
                "description": "true: wind constantly blows in set direction, false: wind can change direction (default)",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWindDir",
        "description": "Changes the wind direction smoothly during the given time (in seconds). A time of zero means there will be an immediate change.  <br>\n'''NOTE''': Effect is global only when executed on the server. On clients wind direction will sync to server value in a while.",
        "introduced_version": null,
        "syntax": "time '''setWindDir''' value",
        "parameters": [
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "Azimuth.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWindForce",
        "description": "Set max. wind overall wind changes in time. A time of zero means there will be an immediate change. A wind level of zero is minimal changes and a wind level of one means that wind can change rapidly.",
        "introduced_version": null,
        "syntax": "time '''setWindForce''' wind",
        "parameters": [
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "wind",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWindStr",
        "description": "Changes the wind strength smoothly during the given time (in seconds). A time of zero means there will be an immediate change.",
        "introduced_version": null,
        "syntax": "time '''setWindStr''' value",
        "parameters": [
            {
                "name": "time",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "value",
                "description": "new value in range 1...0",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "setWingForceScaleRTD",
        "description": "Set effectivity of wings.",
        "introduced_version": null,
        "syntax": "helicopterRTD [[setWingForceScaleRTD]] [leftHorizontal, rightHorizontal, vertical]",
        "parameters": [
            {
                "name": "helicopterRTD",
                "description": "helicopter",
                "sqf_type": "ObjectRTD"
            },
            {
                "name": "leftHorzontal",
                "description": "-",
                "sqf_type": "Number"
            },
            {
                "name": "rightHorizontal",
                "description": "-",
                "sqf_type": "Number"
            },
            {
                "name": "vertical",
                "description": "-",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "show3DIcons",
        "description": "Toggle the drawing of 3D icons.",
        "introduced_version": null,
        "syntax": "map '''show3DIcons''' bool",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "bool",
                "description": "-",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showChat",
        "description": "Shows/hides the whole chat window.",
        "introduced_version": null,
        "syntax": "'''showChat''' bool",
        "parameters": [
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showCinemaBorder",
        "description": "Forces drawing of cinema borders when using custom camera [[camCreate]]. This is normally used in cutscenes to indicate player has no control.",
        "introduced_version": null,
        "syntax": "'''showCinemaBorder''' show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showCommandingMenu",
        "description": "Create the commanding menu described by the given config class or menu name. When the name is empty, the current menu is hidden.<br><br>\nIf commanding menu has \"expression\" set up, the expression will receive the following arguments when user activated the menu item:\n* Local variable  <tt>_target</tt>: [[Object]] - Target under the cursor. This works in both 3D and 2D (when cursor is over the unit icon on the map).\n* Local variable <tt>_pos</tt>: [[Array]] - Cursor position.\n* Local variable <tt>_is3D</tt>: [[Boolean]] - [[false]] if cursor is over the map, otherwise [[true]].",
        "introduced_version": null,
        "syntax": "'''showCommandingMenu''' name",
        "parameters": [
            {
                "name": "name",
                "description": "Class name or user menu name (with \"#USER:\" prefix and \"_#\" page number suffix, where # is the page number starting with 0).",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showCompass",
        "description": "Shows or hides the compass on the map screen, if enabled for the mission and you possess the item. (default [[true]])",
        "introduced_version": null,
        "syntax": "'''showCompass''' show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showCuratorCompass",
        "description": "Hides or shows compass in curator interface.",
        "introduced_version": null,
        "syntax": "'''showCuratorCompass''' bool",
        "parameters": [
            {
                "name": "bool",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showGPS",
        "description": "Shows or hides the GPS receiver on the map screen, if enabled for the mission and you possess the item. (default [[false]])",
        "introduced_version": null,
        "syntax": "'''showGPS''' show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showHUD",
        "description": "Enable / disable showing of HUD. Defines visibility of weapon crosshair and any informational tags that appear when pointing the weapon at an object as well as availability of the default action menu. Unfortunately, it also hides icons drawn with [[drawIcon3D]].",
        "introduced_version": null,
        "syntax": "[[showHUD]] enable",
        "parameters": [
            {
                "name": "enable",
                "description": "",
                "sqf_type": "Boolean"
            },
            {
                "name": "hud",
                "description": "show scripted HUD (same as normal [[showHUD]] true/false)",
                "sqf_type": "Boolean"
            },
            {
                "name": "info",
                "description": "show vehicle + soldier info (hides weapon info from the HUD as well)",
                "sqf_type": "Boolean"
            },
            {
                "name": "radar",
                "description": "show vehicle radar",
                "sqf_type": "Boolean"
            },
            {
                "name": "compass",
                "description": "show vehicle compass",
                "sqf_type": "Boolean"
            },
            {
                "name": "direction",
                "description": "show tank direction indicator (not present in vanilla Arma 3)",
                "sqf_type": "Boolean"
            },
            {
                "name": "menu",
                "description": "show commanding menu (hides HC related menus)",
                "sqf_type": "Boolean"
            },
            {
                "name": "group",
                "description": "show group info bar (hides squad leader info bar)",
                "sqf_type": "Boolean"
            },
            {
                "name": "cursors",
                "description": "show HUD weapon cursors (connected with scripted HUD)",
                "sqf_type": "Boolean"
            },
            {
                "name": "panels",
                "description": "show vehicle panels",
                "sqf_type": "Boolean"
            },
            {
                "name": "kills",
                "description": "show \"x killed by y\" [[systemChat]] messages",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "showLegend",
        "description": "Show/hide map legend.",
        "introduced_version": null,
        "syntax": "map '''showLegend''' bool",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            },
            {
                "name": "bool",
                "description": "-",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showMap",
        "description": "Enable Map (default [[true]])",
        "introduced_version": null,
        "syntax": "'''showMap''' show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showNewEditorObject",
        "description": "Show the add editor object dialog,type is editor object type,class is,class definition to automatically select,side filters by a certain,side,pos is position to create the object.",
        "introduced_version": null,
        "syntax": "map '''showNewEditorObject''' [type,class,side,position]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Any]]",
            "sqf_type": "Any"
        }
    },
    {
        "name": "showPad",
        "description": "Shows or hides the notebook on the map screen, if enabled for the mission. (default [[true]]). It is no longer relevant to Arma 2.",
        "introduced_version": null,
        "syntax": "'''showPad''' show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showRadio",
        "description": "Shows or hides the radio on the map screen, if enabled for the mission and you possess the item. (default [[true]])",
        "introduced_version": null,
        "syntax": "'''showRadio''' show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showScoretable",
        "description": "Forces the score table to be shown, hidden or reset to default functionality. Forcing score table will make it show even in SP. When score table is forced opened it cannot be  closed manually, when it is force closed, it cannot be opened manually.",
        "introduced_version": null,
        "syntax": "[[showScoretable]] force",
        "parameters": [
            {
                "name": "force",
                "description": "1 to force visible, 0 to force invisible, -1 default",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showSubtitles",
        "description": "Enables / disables showing of subtitles in a chat. Only scripted/engine chatter is affected, player manual chat is unaffected. Returns the previous state.",
        "introduced_version": null,
        "syntax": "'''showSubtitles''' enable",
        "parameters": [
            {
                "name": "enable",
                "description": "-",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "showUAVFeed",
        "description": "Shows/hides video feed transmitted from UAV in [[Arma 3 Custom Info|its custom info panel]].",
        "introduced_version": null,
        "syntax": "[[showUAVFeed]] show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - always [[true]] unless error",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "showWarrant",
        "description": "Enable ID card.",
        "introduced_version": null,
        "syntax": "'''showWarrant''' show",
        "parameters": [
            {
                "name": "show",
                "description": "(default [[false]])",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showWatch",
        "description": "Shows or hides the watch on the map screen, if enabled for the mission and you possess the item. (default [[true]])",
        "introduced_version": null,
        "syntax": "'''showWatch''' show",
        "parameters": [
            {
                "name": "show",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showWaypoint",
        "description": "Sets the condition determining if the given waypoint is shown on the map view (for 3D HUD visibility see [[setWaypointVisible]]). Possible values are:\n* \"NEVER\" - never show it\n* \"EASY\" - show only if <tt>showCadetWP</tt> is enabled in global [[Arma_3_Difficulty_Menu | difficulty]].\n* \"ALWAYS\" - always show it",
        "introduced_version": null,
        "syntax": "waypoint '''showWaypoint''' show",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "show",
                "description": "see description",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "showWaypoints",
        "description": "Shows/Hides task HUD markers and waypoints that will fade out in time. Dependable on difficulty settings.",
        "introduced_version": null,
        "syntax": "[[showWaypoints]] enabled",
        "parameters": [
            {
                "name": "enabled",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "shownArtilleryComputer",
        "description": "Checks whether the player has the artillery computer currently open.",
        "introduced_version": null,
        "syntax": "'''shownArtilleryComputer'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownChat",
        "description": "Returns [[true]] if chat window is enabled. Chat window can be disabled with [[showChat]] command.",
        "introduced_version": null,
        "syntax": "'''shownChat'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownCompass",
        "description": "Checks if client has Compass enabled in [[description.ext]] (''showCompass'' param) or force enabled with [[showCompass]] command.",
        "introduced_version": null,
        "syntax": "'''shownCompass'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownCuratorCompass",
        "description": "Returns true if compass is shown.",
        "introduced_version": null,
        "syntax": "[[shownCuratorCompass]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownGPS",
        "description": "Checks if client has GPS reciever enabled in [[description.ext]] (''showGPS'' param) or force enabled with [[showGPS]] command.",
        "introduced_version": null,
        "syntax": "'''shownGPS'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownHUD",
        "description": "Returns array of [[Boolean]]s corresponding to the visibility of various HUD elements (see extended [[showHUD]]).",
        "introduced_version": null,
        "syntax": "'''shownHUD'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]] in format [hud, info, radar, compass, direction, menu, group, cursors, panels, kills]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "shownMap",
        "description": "Checks if client has Map enabled in [[description.ext]] (''showMap'' param) or force enabled with [[showMap]] command.",
        "introduced_version": null,
        "syntax": "'''shownMap'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownPad",
        "description": "Checks if client has Notepad enabled.",
        "introduced_version": null,
        "syntax": "'''shownPad'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownRadio",
        "description": "Check if player has Radio enabled.",
        "introduced_version": null,
        "syntax": "'''shownRadio'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownScoretable",
        "description": "Returns the state of the score table set with [[showScoretable]] command.",
        "introduced_version": null,
        "syntax": "[[shownScoretable]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - 0: Force hidden, 1: Force shown, -1: Default",
            "sqf_type": "Number"
        }
    },
    {
        "name": "shownUAVFeed",
        "description": "Returns [[true]] if video feed transmitted from UAV is shown. A getter for [[showUAVFeed]].",
        "introduced_version": null,
        "syntax": "[[shownUAVFeed]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownWarrant",
        "description": "Check if player has ID card enabled. Obsolete command.",
        "introduced_version": null,
        "syntax": "[[shownWarrant]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "shownWatch",
        "description": "Checks if client has Watch enabled in [[description.ext]] (''showWatch'' param) or force enabled with [[showWatch]] command.",
        "introduced_version": null,
        "syntax": "'''shownWatch'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "side",
        "description": "Returns the side of a unit, vehicle, object or location.\n* side of a renegade soldier is [[sideEnemy]]\n* side of an empty vehicle is [[civilian]]\n* side of a crewed vehicle is, if present, commander's > gunner's > driver's or > cargo's side, in this order\n* side of a captive or dead unit is [[civilian]]. Use",
        "introduced_version": null,
        "syntax": "[[side]] object",
        "parameters": [
            {
                "name": "object",
                "description": ", [[Group]] or [[Location]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "sideAmbientLife",
        "description": "Returns side of ambient life, for example ambient life placed in [[Eden Editor]].",
        "introduced_version": null,
        "syntax": "[[sideAmbientLife]]",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "sideChat",
        "description": "Types text to the side radio channel. Must have assigned \"ItemRadio\" to see or transmit the messages. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see [[remoteExec]])",
        "introduced_version": null,
        "syntax": "unitName [[sideChat]] chatText",
        "parameters": [
            {
                "name": "unitName",
                "description": "unit transmitting message",
                "sqf_type": "Object"
            },
            {
                "name": "chatText",
                "description": "message to transmit",
                "sqf_type": "String"
            },
            {
                "name": "side",
                "description": "side to which the message will be seen",
                "sqf_type": "Side"
            },
            {
                "name": "identity",
                "description": "class name of one of the identities in CfgHQIdentities. Possible identities in",
                "sqf_type": "String"
            },
            {
                "name": "chatText",
                "description": "message to transmit",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sideEmpty",
        "description": "Returns empty side, for example static buildings in [[Eden Editor]].",
        "introduced_version": null,
        "syntax": "'''sideEmpty'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "sideEnemy",
        "description": "The enemy [[Side|side]] (used for renegades). Unit of this side is enemy to everyone.\n<br>To become one, you can attack members of your own side or use [[addRating]].\n<br>When below a [[rating]] of -2000 units switch automatically to this side.",
        "introduced_version": null,
        "syntax": "'''sideEnemy'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "sideFriendly",
        "description": "The Friendly side - friendly to all, see [[Side relations]].",
        "introduced_version": null,
        "syntax": "[[sideFriendly]]",
        "parameters": [],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "sideLogic",
        "description": "The Logic [[Side|side]].\n<br>Side of [[Game Logic]]s and [[Modules]].",
        "introduced_version": null,
        "syntax": "'''sideLogic'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "sideRadio",
        "description": "Sends the audio message to the side radio channel. Must have assigned \"ItemRadio\" to send or receive the transmission. The message is defined in CfgRadio in the [[description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see [[remoteExec]]).\n<br><br>Note:  When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.",
        "introduced_version": null,
        "syntax": "unit '''sideRadio''' radioName",
        "parameters": [
            {
                "name": "unit",
                "description": "unit to transmit",
                "sqf_type": "Object"
            },
            {
                "name": "radioName",
                "description": "class name from CfgRadio",
                "sqf_type": "String"
            },
            {
                "name": "side",
                "description": "side to which the transmission will be played",
                "sqf_type": "Side"
            },
            {
                "name": "radioName",
                "description": "class name from CfgRadio",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sideUnknown",
        "description": "The unknown [[Side|side]].\n<br>Used when the side of a unit is unknown, e.g. for spotted targets with insufficient information.",
        "introduced_version": null,
        "syntax": "'''sideUnknown'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "simpleTasks",
        "description": "Return all simple tasks assigned to given person.",
        "introduced_version": null,
        "syntax": "'''simpleTasks''' person",
        "parameters": [
            {
                "name": "person",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "simulationEnabled",
        "description": "Check if the entity has enabled simulation. \n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''simulationEnabled''' entity",
        "parameters": [
            {
                "name": "entity",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "lnbSetPictureColorRight",
        "description": "Sets color of the right picture in a [[CT_LISTNBOX]].",
        "introduced_version": null,
        "syntax": "[[lnbSetPictureColorRight]] [idc, [row, column], color]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "Color RGBA",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "Color RGBA",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "lnbSetPictureColorSelectedRight",
        "description": "Sets the color of the right picture when it is selected.",
        "introduced_version": null,
        "syntax": "[[lnbSetPictureColorSelectedRight]] [idc, [row, column], color]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "Color RGBA",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "color",
                "description": "Color RGBA",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "lnbTextRight",
        "description": "Returns [[CT_LISTNBOX]]'s right aligned cell text.",
        "introduced_version": null,
        "syntax": "[[lnbTextRight]] [idc, [row, column]]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "row",
                "description": "Index of the row",
                "sqf_type": "Number"
            },
            {
                "name": "column",
                "description": "Index of the column",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "setEngineRpmRTD",
        "description": "Sets the RPM of given engines.",
        "introduced_version": null,
        "syntax": "helicopter [[setEngineRpmRTD]] [rpm, engineIndex]",
        "parameters": [
            {
                "name": "helicopter",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "rpm",
                "description": "Wanted RPM",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "UAVControl",
        "description": "Returns array with current operator of UAV and his vehicle role in UAV. If nobody is controlling the UAV, the command tries to find any person with connected terminal to this UAV, in which case the vehicle role is an empty string. If command cannot find anyone, output is <tt>",
        "introduced_version": null,
        "syntax": "[[UAVControl]] uav",
        "parameters": [
            {
                "name": "uav",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - in format [unit, vehicleRole] (or sometimes [unit1, vehicleRole, unit2, vehicleRole], see description), where:\n* unit: [[Object]] - UAV operator\n* vehicleRole: [[String]] - vehicle role of the operator in UAV. Could be \"DRIVER\", \"GUNNER\" or \"\" (see description)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "WFSideText",
        "description": "Returns the un[[localize]]d text value of an object's side / a group's side or a side as:\n\n* [[east]], [[opfor]] - \"East\" \n* [[west]], [[blufor]] - \"West\"\n* [[resistance]], [[independent]] - \"Resistance\"\n* [[civilian]] - \"Civilian\"\n* [[sideUnknown]] - \"Unknown\"\n* [[sideEnemy]] - \"Unknown\"\n* [[sideFriendly]] - \"Unknown\"\n* [[sideLogic]] - \"Unknown\"\n* [[sideEmpty]] - \"Unknown\"\n* [[sideAmbientLife]] - \"Unknown\"",
        "introduced_version": null,
        "syntax": "'''WFSideText''' param",
        "parameters": [
            {
                "name": "param",
                "description": ", [[Group]] or [[Side]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]] - unlocalized side text value",
            "sqf_type": "String"
        }
    },
    {
        "name": "simulCloudDensity",
        "description": "Returns density of clouds at given position.",
        "introduced_version": null,
        "syntax": "'''simulCloudDensity''' pos",
        "parameters": [
            {
                "name": "pos",
                "description": "",
                "sqf_type": "Position"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "simulCloudOcclusion",
        "description": "Returns clouds occlusion between two given points (0 - no clouds, 1 - full clouds).",
        "introduced_version": null,
        "syntax": "'''simulCloudOcclusion''' [pos1,pos2]",
        "parameters": [
            {
                "name": "pos1",
                "description": "",
                "sqf_type": "Position"
            },
            {
                "name": "pos2",
                "description": "",
                "sqf_type": "Position"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "simulInClouds",
        "description": "Returns if given position is in clouds.",
        "introduced_version": null,
        "syntax": "'''simulInClouds''' pos",
        "parameters": [
            {
                "name": "pos",
                "description": "",
                "sqf_type": "Position"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "simulWeatherSync",
        "description": "Synchronizes Simul Weather with Arma weather, generates all keyframes.",
        "introduced_version": null,
        "syntax": "'''simulWeatherSync'''",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sin",
        "description": "Sine of x, argument in [[Number#Degrees|Degrees]].",
        "introduced_version": null,
        "syntax": "'''sin''' x",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "size",
        "description": "Returns a location's size.",
        "introduced_version": null,
        "syntax": "'''size''' location",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "sizeOf",
        "description": "Returns the diameter of bounding sphere of the object of given classname in meters. Size returned is usually bigger than the biggest size of the object along any of the axes. For example if object is 10 x 4 x 5 the [[sizeOf]] value returned expected to be around 10. If you need to estimate the size of the object more precisely, use [[boundingBox]] or [[boundingBoxReal]].<br><br>",
        "introduced_version": null,
        "syntax": "'''sizeOf''' classname",
        "parameters": [
            {
                "name": "classname",
                "description": "object classname",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "skill",
        "description": "Returns current level of ability of a unit, in range between 0 and 1, 1 being the highest level of skill.",
        "introduced_version": null,
        "syntax": "'''skill''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "skillFinal",
        "description": "Returns final, recalculated sub skill value of given unit. (with regard to AI Level coefficient (Difficulty settings)).",
        "introduced_version": null,
        "syntax": "unit [[skillFinal]] skillName",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "skipTime",
        "description": "Jumps the specified number of hours forward or backward.<br>The time of day and tides are adjusted, but no changes are made to any units. If present, the lower level of clouds instantly jump to the position they would be in if time had passed normally.",
        "introduced_version": null,
        "syntax": "'''skipTime''' duration",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sleep",
        "description": "Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a [[Script (Handle)|script]] executed by [[execVM]] or [[spawn]].",
        "introduced_version": null,
        "syntax": "'''sleep''' delay",
        "parameters": [
            {
                "name": "delay",
                "description": "in seconds. Negative values will not be considered.",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sliderPosition",
        "description": "Returns current thumb position of <tt>CT_SLIDER</tt> or <tt>CT_XSLIDER</tt> with given idc of topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''sliderPosition''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "sliderRange",
        "description": "Returns limits, as an [[Array]] [min, max] of <tt>CT_SLIDER</tt> or <tt>CT_XSLIDER</tt> with given idc of topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''sliderRange''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]] - [min, max]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "sliderSetPosition",
        "description": "Sets current thumb position of <tt>CT_SLIDER</tt> or <tt>CT_XSLIDER</tt> with given idc of topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''sliderSetPosition''' [idc, pos]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "pos",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "pos",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sliderSetRange",
        "description": "Sets limits of <tt>CT_SLIDER</tt> or <tt>CT_XSLIDER</tt> with given idc of topmost user [[dialog]].",
        "introduced_version": null,
        "syntax": "'''sliderSetRange''' [idc, min, max]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "min",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "max",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "min",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "max",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sliderSetSpeed",
        "description": "Sets speed of <tt>CT_SLIDER</tt> or <tt>CT_XSLIDER</tt> with given idc of topmost user [[dialog]]. \n* Click to arrow - move by line\n* Click to scale outside thumb - move by page.",
        "introduced_version": null,
        "syntax": "'''sliderSetSpeed''' [idc,line,page]",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "line",
                "description": "value delta to move the slider when clicking on the outer arrows",
                "sqf_type": "Number"
            },
            {
                "name": "page",
                "description": "value delta to move the slider when clicking inside the slider bar",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "line",
                "description": "value delta to move the slider when clicking on the outer arrows",
                "sqf_type": "Number"
            },
            {
                "name": "page",
                "description": "value delta to move the slider when clicking inside the slider bar",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "sliderSpeed",
        "description": "Returns speed, as an [[Array]] [min, max] of <tt>CT_SLIDER</tt> or <tt>CT_XSLIDER</tt> with given idc of topmost user [[dialog]]",
        "introduced_version": null,
        "syntax": "'''sliderSpeed''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": "of control",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]] - [min, max]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "slingLoadAssistantShown",
        "description": "Returns [[true]] if Sling Load Assistant is open.",
        "introduced_version": null,
        "syntax": "[[slingLoadAssistantShown]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]] - [[true]] if sling load assistant is shown, [[false]] otherwise",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "soldierMagazines",
        "description": "Get array with all magazines of the given unit.",
        "introduced_version": null,
        "syntax": "'''soldierMagazines''' unit",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "someAmmo",
        "description": "Check if unit has some ammo.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "sort",
        "description": "Attempts to sort given array either in ascending ([[true]]) or descending ([[false]]) order. All array elements should be one of the following types:\n* [[String]] - array of strings ([\"a\",\"b\",\"c\"...])\n* [[Number]] - array of numbers ([1,2,3...])\n* [[Array]] - array of subarrays (",
        "introduced_version": null,
        "syntax": "array '''sort''' order",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            },
            {
                "name": "order",
                "description": "[[true]]: ascending, [[false]]: descending",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "soundVolume",
        "description": "Returns the current sound volume (set by [[fadeSound]]).",
        "introduced_version": null,
        "syntax": "'''soundVolume'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "spawn",
        "description": "Adds given set of compiled instructions to the [[Scheduler|scheduler]]. Exactly when the code will be executed is unknown, it depends on how busy is the engine and how filled up is the [[Scheduler|scheduler]]. Therefore [[spawn]] does not wait for the supplied code to finish, instead, [[spawn]] returns a [[Script (Handle)|Script]] handle to the [[Scheduler|scheduler]] task. [[scriptDone]] command can be used to check the code completion. Additional arguments are passed to the code in local variable [[_this]]. Since Arma 3 v1.55 the script handle also exists inside the code in <tt>_thisScript</tt> variable. To see what spawned scripts are currently in the scheduler, use [[diag_activeSQFScripts]] command.<br><br>",
        "introduced_version": null,
        "syntax": "arguments '''spawn''' code",
        "parameters": [
            {
                "name": "code",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Script_(Handle)|Script Handle]] - can be used to determine (via [[scriptDone]] (also via [[isNull]] in Arma 3)) when the spawned script has finished. In Arma 3, the handle is also available inside the spawned script in <tt>_thisScript</tt> variable.",
            "sqf_type": "Script"
        }
    },
    {
        "name": "speaker",
        "description": "Returns the speaker of a person.",
        "introduced_version": null,
        "syntax": "'''speaker''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "speed",
        "description": "Object speed (in km/h). Returns relative speed of given object along Y axis. An equivalent to:<br><br><tt>3.6 * ([[velocityModelSpace]] _obj [[select]] 1)</tt>",
        "introduced_version": null,
        "syntax": "'''speed''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "speedMode",
        "description": "Returns speed mode of the group, which can be any of the following: \n* '''\"LIMITED\"'''\n* '''\"NORMAL\"'''\n* '''\"FULL\"'''",
        "introduced_version": null,
        "syntax": "[[String]]",
        "parameters": [
            {
                "name": "groupName",
                "description": "or [[Group]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "splitString",
        "description": "An SQF version of C++ [http://www.cplusplus.com/reference/cstring/strtok/ strtok]. Splits given ANSI string ''str'' into an array of tokens according to given ''delimiters''. In addition, if empty string \"\" is used for ''delimiters'', ''str'' is split by each character. If Unicode support is desired, see [[forceUnicode]].",
        "introduced_version": null,
        "syntax": "str '''splitString''' delimiters",
        "parameters": [
            {
                "name": "str",
                "description": "A string to split",
                "sqf_type": "String"
            },
            {
                "name": "delimiters",
                "description": "one or more characters, each used as a separate delimiter.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "sqrt",
        "description": "Returns square root of x.",
        "introduced_version": null,
        "syntax": "'''sqrt''' x",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "squadParams",
        "description": "Returns data about squad of given unit loaded from squad.xml.<br>\nAll items in returned array are [[String]].",
        "introduced_version": null,
        "syntax": "'''squadParams''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] -",
            "sqf_type": "Array"
        }
    },
    {
        "name": "stance",
        "description": "Returns the stance of the given unit. It can be one of: \n* <tt>\"STAND\"</tt>\n* <tt>\"CROUCH\"</tt>\n* <tt>\"PRONE\"</tt>\n* <tt>\"UNDEFINED\"</tt> (for example, swimming)\n* <tt>\"\"</tt> (on non-person [[Object|object]])",
        "introduced_version": null,
        "syntax": "'''stance''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "startLoadingScreen",
        "description": "Shows loading screen with the given text, using the given resource. While loading screen is shown, simulation and scene drawing is disabled, user control is disabled, mouse cursor is hidden, scripts run at full speed (50ms per frame instead of 3ms per frame for [[Scheduler|Scheduled Scripts]]).<br>",
        "introduced_version": null,
        "syntax": "[[startLoadingScreen]] [text, resource]",
        "parameters": [
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "step",
        "description": "Optionally can set step. If you want to count down, step must be specified, and set negative. Default value is 1.",
        "introduced_version": null,
        "syntax": "for '''step''' stepSize",
        "parameters": [
            {
                "name": "stepSize",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[For Type]]",
            "sqf_type": "For"
        }
    },
    {
        "name": "stop",
        "description": "Stop AI unit.<br>Stopped unit will not be able to move, fire, or change its orientation to follow a watched object.<br>It may still change the stance if deemed appropriate (e.g. under fire).<br>Use [[disableAI]] to disable specific AI capabilities.",
        "introduced_version": null,
        "syntax": "unitName '''stop''' toggle",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "toggle",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "stopEngineRTD",
        "description": "Instant engines stop.",
        "introduced_version": null,
        "syntax": "[[stopEngineRTD]] heli",
        "parameters": [
            {
                "name": "heli",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "stopped",
        "description": "Check if unit is stopped by [[stop]] command.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "str",
        "description": "Converts any value into a string by placing \" and \" around the argument. Since Arma 3 v1.63.137891 this command will correctly escape all \" inside a string:\n\n<code>// Before the fix:\n[[hint]] [[str]] \"string \"\" string\"; // \"string \" string\" <- invalid string\n[[call]] [[compile]] [[str]] \"string \"\" string\"; // ERROR\n// After the fix:\n[[hint]] [[str]] \"string \"\" string\"; // \"string \"\" string\" <- valid string\n[[call]] [[compile]] [[str]] \"string \"\" string\"; // OK\n</code>\n\nWhen used on object, object debug name is returned.",
        "introduced_version": null,
        "syntax": "'''str''' value",
        "parameters": [
            {
                "name": "value",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "sunOrMoon",
        "description": "<code style",
        "introduced_version": null,
        "syntax": "[[sunOrMoon]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "supportInfo",
        "description": "Creates a list of supported operators and type. Each field of array has the format: \"x:name\" Where x can be:\n*'t' - type\n*'n' - [[SQF_syntax#Nular_Operators|nullar]] operator\n*'u' - [[SQF_syntax#Unary_Operators|unary]] operator\n*'b' - [[SQF_syntax#Binary_Operators|binary]] operator.\n\n'name' is the operator or type name (in case operator, type of input operands is included). \n''mask'' parameter can be an empty string, or one of field. In this case, function returns empty array, if operator is not included in the list. Limited wildcard support is available. Type ''x'' may be replaced with ''*'', meaning all types. For the ''mask'' partial match may be used, like ''abc*'', meaning any operators starting with 'abc' are reported, for example: \n* <tt>\"\"</tt> - list all types and commands\n* <tt>\"t:*\"</tt> - list all types\n* <tt>\"*:&lt;command&gt;*\"</tt> - list all entries for script &lt;command&gt;\n* <tt>\"i:&lt;command&gt;\"</tt> - (since Arma 3 v1.99.146528) extended information about script &lt;command&gt; in format: <br>&nbsp;&nbsp;<tt>[",
        "introduced_version": null,
        "syntax": "'''supportInfo''' mask",
        "parameters": [
            {
                "name": "mask",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - array with requested info or empty array []",
            "sqf_type": "Array"
        }
    },
    {
        "name": "suppressFor",
        "description": "Force [[Suppressive Fire|suppressive fire]] from the unit.",
        "introduced_version": null,
        "syntax": "unit '''suppressFor''' duration",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "duration",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "surfaceIsWater",
        "description": "Returns whether water is at given position.",
        "introduced_version": null,
        "syntax": "'''surfaceIsWater''' position",
        "parameters": [
            {
                "name": "position",
                "description": "format [[Position2D]]  or [[Position3D]] in which case Z will be ignored",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "surfaceNormal",
        "description": "Returns [http://en.wikipedia.org/wiki/Normal_(geometry) surface normal] on given position.",
        "introduced_version": null,
        "syntax": "'''surfaceNormal''' position",
        "parameters": [
            {
                "name": "position",
                "description": "format [[Position2D]] or [[Position3D]] in which case Z will be ignored",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - Example: [-0.102321,0.19977,0.974486]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "surfaceType",
        "description": "Returns what surface type is at the given position. For surface texture see [[surfaceTexture]] command.<br>\n<br>",
        "introduced_version": null,
        "syntax": "[[surfaceType]] position",
        "parameters": [
            {
                "name": "position",
                "description": "format [[Position2D]] or [[Position3D]] in which case Z will be ignored",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "swimInDepth",
        "description": "Sets the target depth level for swimming soldier. Depth should be a negative number.",
        "introduced_version": null,
        "syntax": "unit '''swimInDepth''' value",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "value",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "switch",
        "description": "Creates a switch type that can be used inside a [[switch do|switch-do]] block.\n<br><br>",
        "introduced_version": null,
        "syntax": "[[switch]] condition",
        "parameters": [
            {
                "name": "condition",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[Switch Type]]",
            "sqf_type": "Switch"
        }
    },
    {
        "name": "switchAction",
        "description": "When used on a person, the given action is started immediately (there is no transition). Use switchmove \"\" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.",
        "introduced_version": null,
        "syntax": "soldier '''switchAction''' action",
        "parameters": [
            {
                "name": "soldier",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "action",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "switchCamera",
        "description": "Switch camera to given vehicle / camera. Mode is one of:\n* '''\"INTERNAL\"''': 1st person\n* '''\"GUNNER\"''': optics / sights\n* '''\"EXTERNAL\"''': 3rd person\n* '''\"GROUP\"''': group\n* '''\"CARGO\"''': same as \"INTERNAL\"\n\nIf you switch to a unit in a vehicle, this command uses the correct turret.",
        "introduced_version": null,
        "syntax": "target [[switchCamera]] mode",
        "parameters": [
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mode",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "switchGesture",
        "description": "When used on a person,the given move is started immediately (without transition).",
        "introduced_version": null,
        "syntax": "soldier [[switchGesture]] moveName",
        "parameters": [
            {
                "name": "soldier",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "moveName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "switchLight",
        "description": "Controls whether a lamp is lit or not.",
        "introduced_version": null,
        "syntax": "lamp [[switchLight]] mode",
        "parameters": [
            {
                "name": "lamp",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "mode",
                "description": "Mode can be: \"ON\", \"OFF\" or \"AUTO\" (''lamp'' is on only during nighttime, default)",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "switchMove",
        "description": "Applies given animation to a unit. When used on a person, the given move is started immediately (there is no transition). Use",
        "introduced_version": null,
        "syntax": "person [[switchMove]] moveName",
        "parameters": [
            {
                "name": "person",
                "description": "unit",
                "sqf_type": "Object"
            },
            {
                "name": "moveName",
                "description": "unit animation (see [[animationState]])",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "switchableUnits",
        "description": "Returns a list of playable units available for switching to.\nCommand is relative to the client on which it is executed and will only show playable units for the same [[side]] as [[player]]'s [[group]] + [[player]] himself,\nunless in singleplayer where playable units from all sides will be accessible via this command.<br>\nDead and player-controlled units are automatically removed from the resulting array.<br><br>",
        "introduced_version": null,
        "syntax": "[[switchableUnits]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "synchronizeObjectsAdd",
        "description": "Add given objects to the unit's list of synchronized objects.",
        "introduced_version": null,
        "syntax": "unit '''synchronizeObjectsAdd''' objects",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "objects",
                "description": "An array of objects",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "synchronizeObjectsRemove",
        "description": "Remove given objects from the unit's list of synchronized objects.",
        "introduced_version": null,
        "syntax": "unit '''synchronizeObjectsRemove''' objects",
        "parameters": [
            {
                "name": "unit",
                "description": "-",
                "sqf_type": "Object"
            },
            {
                "name": "objects",
                "description": "An array of objects",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "synchronizeTrigger",
        "description": "[[ArmA:_Mission_Editor#Synchronize_Mode_.28F5.29|Synchronizes]] the trigger with zero or more waypoints.",
        "introduced_version": null,
        "syntax": "trigger '''synchronizeTrigger''' [waypoint1, waypoint2, ...]",
        "parameters": [
            {
                "name": "trigger",
                "description": "trigger to synchronize",
                "sqf_type": "Object"
            },
            {
                "name": "waypoint1",
                "description": "first waypoint",
                "sqf_type": "Waypoint"
            },
            {
                "name": "waypoint2",
                "description": "second waypoint",
                "sqf_type": "Waypoint"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "synchronizeWaypoint",
        "description": "Synchronizes the waypoint with other waypoints. Each waypoint is given as an array [group, index].",
        "introduced_version": null,
        "syntax": "waypoint '''synchronizeWaypoint''' [waypoint1, waypoint2, ...]",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "waypoint1",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "waypoint2",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "synchronizedObjects",
        "description": "Return the list of objects synchronized with the given unit.",
        "introduced_version": null,
        "syntax": "'''synchronizedObjects''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "-",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "synchronizedTriggers",
        "description": "Returns the list of triggers synchronized with a given waypoint.",
        "introduced_version": null,
        "syntax": "'''synchronizedTriggers''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Waypoint"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "synchronizedWaypoints",
        "description": "Returns the list of waypoints synchronized with a given trigger or waypoint.",
        "introduced_version": null,
        "syntax": "'''synchronizedWaypoints''' obj",
        "parameters": [
            {
                "name": "obj",
                "description": "or [[Waypoint]]",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "systemChat",
        "description": "Types text to the system radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see [[remoteExec]])",
        "introduced_version": null,
        "syntax": "[[systemChat]] text",
        "parameters": [
            {
                "name": "text",
                "description": "message to transmit",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "systemOfUnits",
        "description": "Returns the currently selected system of units.\n* 0: Metric\n* 1: Mixed (ground vehicles use Metric / air vehicles use Imperial)\n* 2: Imperial",
        "introduced_version": null,
        "syntax": "'''systemOfUnits'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "tan",
        "description": "Tangent of x, argument in [[Number#Degrees|Degrees]].",
        "introduced_version": null,
        "syntax": "'''tan''' x",
        "parameters": [
            {
                "name": "x",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "targetKnowledge",
        "description": "Returns unit's knowledge about target. The returned array includes information whether the target is \n# known by group\n# known by the unit\n# last time the target was seen by the unit\n# last time the target endangered the unit\n# target side\n# position error\n# target position",
        "introduced_version": null,
        "syntax": "unit '''targetKnowledge''' target",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "target",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] (7 elements)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "targets",
        "description": "Retrives list of given unit targets matching specified filter. If the filter is not specified, all targets are returned.",
        "introduced_version": null,
        "syntax": "unit '''targets''' [enemyOnly, maxDistance, sides, maxAge, alternateCenter]",
        "parameters": [
            {
                "name": "unit",
                "description": "unit which target knowledge is retrieved",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - unit's targets matching the criteria",
            "sqf_type": "Array"
        }
    },
    {
        "name": "targetsAggregate",
        "description": "Aggregate candidates.",
        "introduced_version": null,
        "syntax": "[speaker, side, unit, place, time] '''targetsAggregate''' candidates",
        "parameters": [
            {
                "name": "candidates",
                "description": " array of targets in the following format:",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "targetsQuery",
        "description": "Returns sorted array of targets, '''known''' to the enquirer (including own troops), where the accuracy coefficient reflects how close the result matches the query. This command could be CPU intensive.",
        "introduced_version": null,
        "syntax": "enquirer '''targetsQuery''' [targetIgnore, targetSide, targetType, targetPosition, targetMaxAge]",
        "parameters": [
            {
                "name": "enquirer",
                "description": "For whom the query will be made",
                "sqf_type": "Object"
            },
            {
                "name": "targetIgnore",
                "description": "Target object to exclude from results. [[objNull]] - return every target",
                "sqf_type": "Object"
            },
            {
                "name": "targetSide",
                "description": "Desired side of the target. [[sideUnknown]] - any side",
                "sqf_type": "Side"
            },
            {
                "name": "targetType",
                "description": "Desired target [[typeOf]]. \"\" - any type",
                "sqf_type": "String"
            },
            {
                "name": "targetPosition",
                "description": "Desired target position in format of [[Position2D]] or [[Position3D]] (only [x,y] is considered). Position tolerance is 200m from the actual position of the target. [] - any position",
                "sqf_type": "Array"
            },
            {
                "name": "targetMaxAge",
                "description": "Desired max age of the target. This will limit returned results to the targets younger than specified age. 0 - any age",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] - '''sorted''' array of returned targets in the following format:",
            "sqf_type": "Array"
        }
    },
    {
        "name": "taskAlwaysVisible",
        "description": "Returns true if the task is flagged to be always visible or false if not.",
        "introduced_version": null,
        "syntax": "'''taskAlwaysVisible''' task",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "taskChildren",
        "description": "Return the child tasks of the specified task.",
        "introduced_version": null,
        "syntax": "'''taskChildren''' task",
        "parameters": [
            {
                "name": "task",
                "description": "-",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Array]] - array of children [[Task]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "taskCompleted",
        "description": "Return if task is completed. (state Succeeded, Failed or Canceled)",
        "introduced_version": null,
        "syntax": "'''taskCompleted''' task",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if task has been Succeeded, Failed or Canceled",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "taskCustomData",
        "description": "Returns custom data attached to the local task or an empty array if there are no custom data attached.",
        "introduced_version": null,
        "syntax": "'''taskCustomData''' task",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Array]] of string - iconPath, iconText, descriptionText",
            "sqf_type": "Array"
        }
    },
    {
        "name": "taskDescription",
        "description": "Returns the sub-parts of the task description. The returned Array is in format [Task description, Task title, Task waypoint description].",
        "introduced_version": null,
        "syntax": "'''taskDescription''' task",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "taskDestination",
        "description": "Returns the position of the task (as specified by destination parameter in config).",
        "introduced_version": null,
        "syntax": "'''taskDestination''' task",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Array]] (A3 1.28 Returns [[Nothing]] if identity is [[taskNull]])",
            "sqf_type": "Array"
        }
    },
    {
        "name": "taskHint",
        "description": "Shows info about new, changed or failed task. The text can contain several lines. <tt>\\n</tt> is used to set a line return.",
        "introduced_version": null,
        "syntax": "[[taskHint]] [text, colour, icon]",
        "parameters": [
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "colour",
                "description": "format [[Color|Color (RGBA)]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "taskMarkerOffset",
        "description": "Returns model space position for the task marker",
        "introduced_version": null,
        "syntax": "[[taskMarkerOffset]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - offset in format [x, y, z]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "taskNull",
        "description": "A non-existing [[Task]]. To compare non-existent tasks use [[isNull]] or [[isEqualTo]]:\n* <tt>[[taskNull]]",
        "introduced_version": null,
        "syntax": "'''taskNull'''",
        "parameters": [],
        "returns": {
            "description": "[[Task]]",
            "sqf_type": "Task"
        }
    },
    {
        "name": "taskParent",
        "description": "Returns the parent task of the specified task.",
        "introduced_version": null,
        "syntax": "'''taskParent''' task",
        "parameters": [
            {
                "name": "task",
                "description": "-",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Task]]",
            "sqf_type": "Task"
        }
    },
    {
        "name": "taskResult",
        "description": "Send a result of the task to the task sender.",
        "introduced_version": null,
        "syntax": "[[",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[Array]] -  [state, result] (see [[setTaskResult]])",
            "sqf_type": "Array"
        }
    },
    {
        "name": "taskState",
        "description": "Returns the current state of a task. \n\n'''Possible return values are:'''\n* None\n* Created\n* Assigned\n* Succeeded\n* Failed\n* Canceled",
        "introduced_version": null,
        "syntax": "'''taskState'''  task",
        "parameters": [
            {
                "name": "task",
                "description": "the task you want to query",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[String]] - current state of task",
            "sqf_type": "String"
        }
    },
    {
        "name": "taskType",
        "description": "Returns the type of the given task",
        "introduced_version": null,
        "syntax": "'''taskType''' task",
        "parameters": [
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "teamMember",
        "description": "Return an agent for given person.",
        "introduced_version": null,
        "syntax": "'''teamMember''' person",
        "parameters": [
            {
                "name": "person",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Team Member]]",
            "sqf_type": "Team"
        }
    },
    {
        "name": "teamMemberNull",
        "description": "A non-existent [[Team Member]]. To compare non-existent team members use [[isNull]] or [[isEqualTo]]:\n* <tt>[[teamMemberNull]]",
        "introduced_version": null,
        "syntax": "[[teamMemberNull]]",
        "parameters": [],
        "returns": {
            "description": "[[Team Member]]",
            "sqf_type": "Team"
        }
    },
    {
        "name": "teamName",
        "description": "Return a name of given [[Team|team]].",
        "introduced_version": null,
        "syntax": "'''teamName''' [[Team|team]]",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "teamSwitch",
        "description": "Invoke the [[Team_Switch|Team Switch]] dialog (force it even when conditions are not met).\nThere has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in [[description.ext]] should be 5 (SIDE).<br><br>",
        "introduced_version": null,
        "syntax": "[[teamSwitch]]",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "teamSwitchEnabled",
        "description": "Check if [[Team Switch]] is currently enabled.\n\nTeam Switch is enabled by default.",
        "introduced_version": null,
        "syntax": "[[teamSwitchEnabled]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "teamType",
        "description": "Returns a type of given team.",
        "introduced_version": null,
        "syntax": "'''teamType''' team",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "teams",
        "description": "Return a list of teams in the current mission.",
        "introduced_version": null,
        "syntax": "'''teams'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "terminate",
        "description": "Terminates (aborts) [[spawn]]ed or [[execVM]]ed script.",
        "introduced_version": null,
        "syntax": "'''terminate''' scriptHandle",
        "parameters": [
            {
                "name": "scriptHandle",
                "description": "",
                "sqf_type": "Script"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "terrainIntersect",
        "description": "Checks for intersection of terrain between two AGL positions. Returns [[true]] if intersects with terrain. For ASL variant see [[terrainIntersectASL]]",
        "introduced_version": null,
        "syntax": "'''terrainIntersect''' [pos1, pos2]",
        "parameters": [
            {
                "name": "pos1",
                "description": "start position in format [[PositionAGL]]",
                "sqf_type": "Array"
            },
            {
                "name": "pos2",
                "description": "end position in format [[PositionAGL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "terrainIntersectASL",
        "description": "Checks for intersection of terrain between two ASL positions. Returns [[true]] if intersects with terrain.\nFor AGL variant, see [[terrainIntersect]].",
        "introduced_version": null,
        "syntax": "[[terrainIntersectASL]] [pos1, pos2]",
        "parameters": [
            {
                "name": "pos1",
                "description": "start position in format [[PositionASL]]",
                "sqf_type": "Array"
            },
            {
                "name": "pos2",
                "description": "end position in format [[PositionASL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "terrainIntersectAtASL",
        "description": "Checks for intersection of terrain between two ASL positions. Same as [[terrainIntersectASL]], only returns intersect position instead of [[Boolean]]",
        "introduced_version": null,
        "syntax": "'''terrainIntersectAtASL''' [pos1, pos2]",
        "parameters": [
            {
                "name": "pos1",
                "description": "start position in format [[PositionASL]]",
                "sqf_type": "Array"
            },
            {
                "name": "pos2",
                "description": "end position in format [[PositionASL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - intersect position in format [[PositionASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "text",
        "description": "Creates a structured text containing the given plain text if argument is [[String]]. Use [[setAttributes]] to set additional [[Structured_Text#Attributes | attributes]] on the text. If the argument is [[location]], returns location's text value (see Alt Syntax).",
        "introduced_version": null,
        "syntax": "'''text''' string",
        "parameters": [
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            }
        ],
        "returns": {
            "description": "[[Structured Text]]",
            "sqf_type": "Structured"
        }
    },
    {
        "name": "textLog",
        "description": "Dump argument value to debugging output. <br>",
        "introduced_version": null,
        "syntax": "'''textLog''' anything",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "textLogFormat",
        "description": "Debugging output.",
        "introduced_version": null,
        "syntax": "'''textLogFormat''' [format, arg1, arg2, ...]",
        "parameters": [
            {
                "name": "format",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "then",
        "description": "First or second element of array is executed depending on result of [[if]] condition. Result of the expression executed is returned as a result (result may be [[Nothing]]).",
        "introduced_version": null,
        "syntax": "if [[then]] else",
        "parameters": [
            {
                "name": "else",
                "description": "or [[Array]] with 2 [[Code]] elements. See [[else]].",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Anything]]",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "throw",
        "description": "Throws an exception. The exception is processed by first [[catch]] block. This command will terminate further execution of the code.",
        "introduced_version": null,
        "syntax": "[[throw]] expression",
        "parameters": [
            {
                "name": "expression",
                "description": "",
                "sqf_type": "Anything"
            },
            {
                "name": "exception",
                "description": "value that will be put into ''_exception'' variable inside [[catch]] block",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "time",
        "description": "Returns time elapsed since mission started (in seconds). The value is different on each client. If you need unified time, use [[serverTime]].",
        "introduced_version": null,
        "syntax": "[[time]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "timeMultiplier",
        "description": "Returns the value set with [[setTimeMultiplier]].",
        "introduced_version": null,
        "syntax": "'''timeMultiplier'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]] - current time muliplier",
            "sqf_type": "Number"
        }
    },
    {
        "name": "titleFadeOut",
        "description": "Terminate the title effect and set duration of the fade out phase to the given time. Same as [[cutFadeOut]] but for the title layer.",
        "introduced_version": null,
        "syntax": "[[titleFadeOut]] duration",
        "parameters": [
            {
                "name": "duration",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "titleObj",
        "description": "Shows object defined in global config in CfgTitles",
        "introduced_version": null,
        "syntax": "'''titleObj''' [class, type, speed, showInMap]",
        "parameters": [
            {
                "name": "class",
                "description": "defined in <tt>[[configFile]] >> \"CfgTitles\" >> class</tt>",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "titleRsc",
        "description": "Display a resource defined in RscTitles. Also see [[cutRsc]], with these two commands you can show two different resources at once.",
        "introduced_version": null,
        "syntax": "[[titleRsc]] [text, type, speed, showInMap]",
        "parameters": [
            {
                "name": "text",
                "description": "the class name of the resource. (\"Default\" will remove the current resource.)",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            },
            {
                "name": "speed",
                "description": "(Optional, default -1) time in seconds to fade in resource",
                "sqf_type": "Number"
            },
            {
                "name": "showInMap",
                "description": "(Optional, default [[true]]) [[false]] to hide the text when the map is opened.",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "titleText",
        "description": "Displays text across the screen. If used along with [[cutText]] two different texts (in different type styles) can be shown at once. The text can be displayed on multiple lines by using \"\\n\" new line characters:\n<tt>[[titleText]] [\"line1\\nline2\\nline3\", \"PLAIN\"];</tt>. Since Arma 3 v1.73.142260 this command supports [[Structured Text]] formatting.",
        "introduced_version": null,
        "syntax": "'''titleText''' [text, type, speed,  showInMap, isStructuredText]",
        "parameters": [
            {
                "name": "text",
                "description": "text to be displayed",
                "sqf_type": "String"
            },
            {
                "name": "type",
                "description": "one of \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" and \"WHITE IN\". See [[Title Effect Type]]s for more information about these values.",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "toArray",
        "description": "Converts the supplied [[String]] into an [[Array]] of [[Number|Numbers]]. <br>\nThe numbers in the created array are the decimal [http://en.wikipedia.org/wiki/Unicode Unicode] representations of characters.",
        "introduced_version": null,
        "syntax": "'''toArray''' string",
        "parameters": [
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "toFixed",
        "description": "Converts a number into a string, keeping the specified number of decimals. If the desired number of decimals is higher than the actual number, nulls are added to create the desired decimal length. This command is almost identical in behaviour to JavaScript [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed toFixed()]<br><br>\n'''NOTE:''' Converted number is never presented in scientific notation unlike with other number to string commands. Also Arma's default string conversion limits numbers to 6 [https://en.wikipedia.org/wiki/Significant_figures significant figures], whereas with this command it is possible to preserve some extra precision.\n<code>[[str]] ([[pi]]/100000); //\"3.14159e-005\" - scientific notation\n([[pi]]/100000) [[toFixed]] 10; //\"0.0000314159\" - no scientific notation\n[[str]] [[pi]]; //\"3.14159\" - 6 significant figures (default)\n[[pi]] [[toFixed]] 6; //\"3.141593\" - forced to 7 significant figures\n[[pi]] [[toFixed]] 7; //\"3.1415927\" - forced to 8 significant figures</code>\n\nSince Arma 3 v1.71.141859 an alternative syntax is added, which takes no number and returns [[Nothing]]. Instead it acts as keyword and switches engine [[Number]] to [[String]] global conversion into desired format, from the moment it is applied until the end of script. To reset output back to default at any time, use <tt>toFixed -1</tt>. For example:\n<code>[[systemChat]] [[str]] [[position]] [[player]];\n[[call]]\n{\n\t[[toFixed]] 6; \n\t[[systemChat]] [[str]] [[position]] [[player]];\n}; \n[[systemChat]] [[str]] [[position]] [[player]];\n[[toFixed]] -1;\n[[systemChat]] [[str]] [[position]] [[player]];</code>\nThe result is:\n* <tt>[11580.3,11797.7,0.00146675]</tt>\n* <tt>[11580.341797,11797.737305,0.001467]</tt>\n* <tt>[11580.341797,11797.737305,0.001467]</tt>\n* <tt>[11580.3,11797.7,0.00146675]</tt>\nIdeal to be used when saving data to a database when more precise positioning is required.",
        "introduced_version": null,
        "syntax": "number '''toFixed''' decimals",
        "parameters": [
            {
                "name": "number",
                "description": "number to convert",
                "sqf_type": "Number"
            },
            {
                "name": "decimals",
                "description": "number of decimals to display (range 0-20)",
                "sqf_type": "Number"
            },
            {
                "name": "decimals",
                "description": "number of decimals to display (range 0-20). -1 to reset to default number of decimals",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "toLower",
        "description": "Converts the supplied Unicode string to all lowercase characters. If the string doesn't have characters with [[toArray | codes]] > 255, you could benefit from faster conversion using [[toLowerANSI]]",
        "introduced_version": null,
        "syntax": "'''toLower''' string",
        "parameters": [
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "toLowerANSI",
        "description": "[[File:ISO-8859-1.jpg|thumb|right|ISO-8859-1]]Converts the supplied string to all lower case characters fast (could be 3x faster than [[toLower]]). [https://stackoverflow.com/questions/701882/what-is-ansi-format/701920 ANSI] in this case refers to [https://en.wikipedia.org/wiki/ISO/IEC_8859-1 ISO-8859-1] code page. The command is primary designed to convert characters with [[toArray | codes]] 0...127 however will also convert other characters in 128...255 range as long as they are present in ISO-8859-1 codepage. For Unicode alternative see [[toLower]].",
        "introduced_version": null,
        "syntax": "[[toLowerANSI]] string",
        "parameters": [
            {
                "name": "string",
                "description": "string to convert",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]] - all lower case string",
            "sqf_type": "String"
        }
    },
    {
        "name": "toString",
        "description": "Converts the supplied [[Array]] of [[Number|Numbers]] into a [[String]]. <br>\nThe numbers in the array to be converted are the decimal [http://en.wikipedia.org/wiki/Unicode Unicode] representations of characters.",
        "introduced_version": null,
        "syntax": "'''toString''' array",
        "parameters": [
            {
                "name": "array",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "toUpper",
        "description": "Converts the supplied Unicode string to all uppercase characters. If the string doesn't have characters with [[toArray | codes > 255]], you could benefit from faster conversion using [[toUpperANSI]]",
        "introduced_version": null,
        "syntax": "'''toUpper''' string",
        "parameters": [
            {
                "name": "string",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "toUpperANSI",
        "description": "[[File:ISO-8859-1.jpg|thumb|right|ISO-8859-1]]Converts the supplied string to all upper case characters fast (could be 3x faster than [[toUpper]]). [https://stackoverflow.com/questions/701882/what-is-ansi-format/701920 ANSI] in this case refers to [https://en.wikipedia.org/wiki/ISO/IEC_8859-1 ISO-8859-1] code page. The command is primary designed to convert characters with [[toArray | codes]] 0...127 however will also convert other characters in 128...255 range as long as they are present in ISO-8859-1 codepage. For Unicode alternative see [[toUpper]].",
        "introduced_version": null,
        "syntax": "[[toUpperANSI]] string",
        "parameters": [
            {
                "name": "string",
                "description": "string to convert",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[String]] - all upper case string",
            "sqf_type": "String"
        }
    },
    {
        "name": "triggerActivated",
        "description": "Returns true if the trigger has been activated.",
        "introduced_version": null,
        "syntax": "[[triggerActivated]] trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "triggerActivation",
        "description": "Returns trigger activation in the form [by, type, repeating]. \n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''triggerActivation''' trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "triggerAmmo",
        "description": "Triggers a munition such as shells, bullets, missiles, rockets and bombs (''shotSubmunition/shotShell/shotBullet/shotMissile/shotRocket'') as if it did hit. If ammo uses submunition, then creation of submunition will be triggered.",
        "introduced_version": null,
        "syntax": "[[triggerAmmo]] munition",
        "parameters": [
            {
                "name": "munition",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "triggerArea",
        "description": "Returns currently monitored trigger area. Since Arma 3 v1.59.135137, the command returns 3rd dimension for the monitored area. If height is not set, the value for it would be -1;\n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''triggerArea''' trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] in format [a, b, angle, isRectangle, c], where:\n* a - trigger area X size / 2\n* b - trigger area Y size / 2\n* angle\n* isRectangle\n* c - trigger area Z size / 2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(''since Arma 3 v1.59.135137'')",
            "sqf_type": "Array"
        }
    },
    {
        "name": "triggerAttachObject",
        "description": "Assigns a static object to the trigger. The activation source is changed to \"STATIC\".",
        "introduced_version": null,
        "syntax": "triggerName [[triggerAttachObject]] objectId",
        "parameters": [
            {
                "name": "triggerName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "objectId",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "triggerAttachVehicle",
        "description": "Specifies the entity which will activate the selected trigger.<br>\n*If '''[]''' is given, the trigger is decoupled from the assigned vehicle (example 2).\n*If the activation source is '''\"VEHICLE\"''', '''\"GROUP\"''', '''\"LEADER\"''' or '''\"MEMBER\"''', it is changed to '''\"NONE\"'''. \n*If '''[vehicle]''' is given, the trigger is coupled to the vehicle or its group. \n*When the source is '''\"GROUP\"''', '''\"LEADER\"''' or '''\"MEMBER\"''', it is coupled to the group, otherwise it is coupled to the vehicle and the source is changed to '''\"VEHICLE\"'''.",
        "introduced_version": null,
        "syntax": "triggerName '''triggerAttachVehicle''' objects",
        "parameters": [
            {
                "name": "triggerName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "objects",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "triggerAttachedVehicle",
        "description": "Returns vehicle attached to the trigger (for example using [[triggerAttachVehicle]]).\n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''triggerAttachedVehicle''' trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "triggerDynamicSimulation",
        "description": "Controls ability of given unit to activate entities with disabled [[Arma_3_Dynamic_Simulation]]. If [[false]] dynamically disabled entities will not be activated by unit presence",
        "introduced_version": null,
        "syntax": "unit '''triggerDynamicSimulation''' trigger",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "triggerInterval",
        "description": "Returns trigger condition check frequency in seconds. <br><br>",
        "introduced_version": null,
        "syntax": "[[triggerInterval]] trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "Trigger object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - Trigger interval in seconds",
            "sqf_type": "Number"
        }
    },
    {
        "name": "triggerStatements",
        "description": "Returns trigger statements.",
        "introduced_version": null,
        "syntax": "'''triggerStatements''' trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] in format:<br>\n0: condition: [[String]]<br>\n1: code on activation: [[String]]<br>\n2: code on deactivation: [[String]]<br>",
            "sqf_type": "Array"
        }
    },
    {
        "name": "triggerText",
        "description": "Returns trigger text.\n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''triggerText''' trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "triggerTimeout",
        "description": "Returns trigger timeout in the form [min, mid, max, interruptable].\n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''triggerTimeout''' trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "triggerTimeoutCurrent",
        "description": "Returns current timeout of the given trigger or -1 if countdown is not in progress.",
        "introduced_version": null,
        "syntax": "[[triggerTimeoutCurrent]] trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "trigger object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]] - time remaining before trigger activation.",
            "sqf_type": "Number"
        }
    },
    {
        "name": "triggerType",
        "description": "Returns trigger type (see [[setTriggerType]]). \n\n<br><br>",
        "introduced_version": null,
        "syntax": "'''triggerType''' trigger",
        "parameters": [
            {
                "name": "trigger",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "true",
        "description": "Always true",
        "introduced_version": null,
        "syntax": "'''true'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "turretLocal",
        "description": "Checks if a turret is [[local]].  <br><br>\n'''Some info on turrets:''' A vehicle turret will change locality when player gunner gets in it, just like vehicle changes locality when player driver gets in it. Many commands for turrets work only where turret is [[local]]. When gunner leaves turret it is supposed to change locality to the locality of the vehicle.",
        "introduced_version": null,
        "syntax": "vehicle '''turretLocal''' turretPath",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]] (or, prior to Arma 3 v1.93.145625, [[Nothing]] if the turret is non-existent)",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "turretOwner",
        "description": "Returns id of the [[owner]] of the turret. Server only. Returns 0 on non-server and SP. <br><br>\n'''Some info on turrets:''' A vehicle turret will change locality when player gunner gets in it, just like vehicle changes locality when player driver gets in it. Many commands for turrets work only where turret is [[local]]. When gunner leaves turret it is supposed to change locality to the locality of the vehicle. A vehicle can have one [[owner]] while turrets have different [[owner]]s.",
        "introduced_version": null,
        "syntax": "vehicle '''turretOwner''' turretPath",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]] - [[owner]] id",
            "sqf_type": "Number"
        }
    },
    {
        "name": "turretUnit",
        "description": "Returns the unit in the vehicle turret. Driver turret <tt>[-1]</tt> is supported since Arma 3 v1.57.135045. To find turret path of known unit see [[unitTurret]]",
        "introduced_version": null,
        "syntax": "vehicle '''turretUnit''' turretpath",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretpath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "tvAdd",
        "description": "Adds an item with given text to Tree View control. The position on Tree View where to add the item and the actual path to this item once added are different. If item is added to existing item, then parent item path is used. If no parent exists, empty array [] is used. See [[Tree View Path]] for more information.",
        "introduced_version": null,
        "syntax": "[[tvAdd]] [idc, pathParent, text]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "pathParent",
                "description": "[[Tree View Path]] of parent item or [] if no parent exists",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "pathParent",
                "description": "[[Tree View Path]] of parent item or [] if no parent exists",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Number]] - Index of the added item relative to the branch it was added to",
            "sqf_type": "Number"
        }
    },
    {
        "name": "tvClear",
        "description": "Removes all items from Tree View with given idc.",
        "introduced_version": null,
        "syntax": "[[tvClear]] idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvCollapse",
        "description": "Collapses tree item pointed to by the path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "'''tvCollapse''' [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "Item [[Tree View Path]]. [] will collapse the whole tree and it will disappear",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "Item [[Tree View Path]]. [] will collapse the whole tree and it will disappear",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvCollapseAll",
        "description": "Collapses all tree items for the given Tree View.",
        "introduced_version": null,
        "syntax": "'''tvCollapseAll''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvCount",
        "description": "Returns children count on given path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "[[tvCount]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "tvCurSel",
        "description": "Returns path to currently selected item. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "[[tvCurSel]] idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Array]] - [[Tree View Path]] of selected item",
            "sqf_type": "Array"
        }
    },
    {
        "name": "tvData",
        "description": "Returns string data from item on given path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "'''tvData''' [idc, [path]]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "tvDelete",
        "description": "Removes an item with given [[Tree View Path]] from Tree View.",
        "introduced_version": null,
        "syntax": "'''tvDelete''' [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "[[Tree View Path]] of the item",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "[[Tree View Path]] of the item",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvExpand",
        "description": "Expands tree item pointed to by the path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "'''tvExpand''' [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "Item [[Tree View Path]]. [] will expand the whole tree if it was collapsed previously with []",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "Item [[Tree View Path]]. [] will expand the whole tree if it was collapsed previously with []",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvExpandAll",
        "description": "Expands all tree items for the given Tree View.",
        "introduced_version": null,
        "syntax": "'''tvExpandAll''' idc",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvPicture",
        "description": "Returns name of picture from item pointed to by path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "[[tvPicture]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "tvPictureRight",
        "description": "Returns the right picture of a [[CT_TREE]] on given path.",
        "introduced_version": null,
        "syntax": "[[tvPictureRight]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "Path",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "Path",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "tvSetColor",
        "description": "Sets text color on given Tree View Item",
        "introduced_version": null,
        "syntax": "'''tvSetColor''' [idc, path, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "[[Tree View Path]] of the item",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "Item text color",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "[[Tree View Path]] of the item",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "item text color in format [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetCurSel",
        "description": "Sets cursor to given item on given path. IDC means id of parent Tree View. To deselect all items use [-1] for the path param (''available since Arma 3 v1.55.133898'')",
        "introduced_version": null,
        "syntax": "[[tvSetCurSel]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetData",
        "description": "Sets string data to item on given path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "[[tvSetData]] [idc, path, data]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "data",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "data",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetPicture",
        "description": "Sets picture to item selected by path. IDC means id of parent Tree View. Name is picture name. The picture is searched in the mission directory.",
        "introduced_version": null,
        "syntax": "[[tvSetPicture]] [idc, path, name]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "name",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetPictureColor",
        "description": "Sets the colour of the picture (set via [[tvSetPicture]]) under the specified tree view path.",
        "introduced_version": null,
        "syntax": "[[tvSetPictureColor]] [idc, path, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "IDC of the tree view control.",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "Array containing path numbers.",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "Array containing path numbers.",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetPictureColorDisabled",
        "description": "Sets the color of left picture of a tree item defined by path when item is disabled",
        "introduced_version": null,
        "syntax": "control [[tvSetPictureColorDisabled]] [path, color]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "path to tree view item",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "color in format [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetPictureColorSelected",
        "description": "Sets the color of the left picture of a tree item defined by path when item is selected",
        "introduced_version": null,
        "syntax": "control [[tvSetPictureColorSelected]] [path, color]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "path to tree view item",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "color in format [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetPictureRight",
        "description": "Sets right picture on the tree view item defined by path",
        "introduced_version": null,
        "syntax": "[[tvSetPictureRight]] [idc, path, name]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "path to tree view item",
                "sqf_type": "Array"
            },
            {
                "name": "name",
                "description": "picture texture",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "path to tree view item",
                "sqf_type": "Array"
            },
            {
                "name": "name",
                "description": "picture texture",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetPictureRightColor",
        "description": "Sets color of the right picture on the tree view item defined by path",
        "introduced_version": null,
        "syntax": "[[tvSetPictureRightColor]] [idc, path, color]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "path to tree view item",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "path to tree view item",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "in format [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetPictureRightColorDisabled",
        "description": "Sets the color of the right picture of a tree item defined by path when item is disabled",
        "introduced_version": null,
        "syntax": "control [[tvSetPictureRightColorDisabled]] [path, color]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "path to tree view item",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "color in format [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetPictureRightColorSelected",
        "description": "Sets the color of the right picture of a tree item defined by path when item is selected",
        "introduced_version": null,
        "syntax": "control [[tvSetPictureRightColorSelected]] [path, color]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "path to tree view item",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "color in format [r,g,b,a]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetText",
        "description": "Sets string text to item on given path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "[[tvSetText]] [idc, path, text]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetTooltip",
        "description": "Sets the tooltip text associated with the specified tree view path.",
        "introduced_version": null,
        "syntax": "[[tvSetTooltip]] [idc, path, text]",
        "parameters": [
            {
                "name": "idc",
                "description": "IDC of the tree view control.",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "Array containing path numbers.",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "Array containing path numbers.",
                "sqf_type": "Array"
            },
            {
                "name": "text",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSetValue",
        "description": "Sets scalar data to item on given path. IDC means id of parent Tree View. If the given value is not integer, it will be converted to integer",
        "introduced_version": null,
        "syntax": "[[tvSetValue]] [idc, path, val]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "val",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "val",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSort",
        "description": "Sorts all children of given path. Text of [[CT_TREE|Tree View]] entries is used for sorting.",
        "introduced_version": null,
        "syntax": "control [[tvSort]] [path, reversed]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "[[Tree View Path]] of the parent item to sort",
                "sqf_type": "Array"
            },
            {
                "name": "idc",
                "description": "control idc",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "[[Tree View Path]] of the parent item to sort",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvSortByValue",
        "description": "Sorts all children of given path. Value of [[CT_TREE|Tree View]] entries is used for sorting.",
        "introduced_version": null,
        "syntax": "control [[tvSortByValue]] [path, reversed]",
        "parameters": [
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "[[Tree View Path]] of the parent item to sort",
                "sqf_type": "Array"
            },
            {
                "name": "idc",
                "description": "control idc",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "[[Tree View Path]] of the parent item to sort",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "tvText",
        "description": "Returns shown text in the item on given path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "[[tvText]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "Array containing numbers.",
                "sqf_type": "Array"
            },
            {
                "name": "control",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "tvTooltip",
        "description": "Gets the tooltip text associated with the specified tree view path.",
        "introduced_version": null,
        "syntax": "[[tvTooltip]] [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "IDC of the tree view control.",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "Array containing path numbers.",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "Array containing path numbers.",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]] - Tooltip text",
            "sqf_type": "String"
        }
    },
    {
        "name": "tvValue",
        "description": "Returns scalar data from item on given path. IDC means id of parent Tree View.",
        "introduced_version": null,
        "syntax": "'''tvValue''' [idc, path]",
        "parameters": [
            {
                "name": "idc",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            },
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "of [[Number]]s",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]] - integer",
            "sqf_type": "Number"
        }
    },
    {
        "name": "type",
        "description": "Returns a string of a [[Location]]'s class name or [[Task]]'s type.",
        "introduced_version": null,
        "syntax": "'''type''' location",
        "parameters": [
            {
                "name": "location",
                "description": "",
                "sqf_type": "Location"
            },
            {
                "name": "task",
                "description": "",
                "sqf_type": "Task"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "typeName",
        "description": "Returns the [[:Category:Data Types|data type]] of an expression. \n\nThe type is returned as on of the following all-uppercase strings:\n* \"[[Array|ARRAY]]\"\n* \"[[Bool|BOOL]]\"\n* \"[[Code|CODE]]\"\n* \"[[Config|CONFIG]]\"\n* \"[[Control|CONTROL]]\"\n* \"[[Display|DISPLAY]]\"\n* \"[[Group|GROUP]]\"\n* \"[[Location|LOCATION]]\"\n* \"[[Object|OBJECT]]\"\n* \"[[Scalar|SCALAR]]\"\n* \"[[Script|SCRIPT]]\"\n* \"[[Side|SIDE]]\"\n* \"[[String|STRING]]\"\n* \"[[Text|TEXT]]\"\n* \"[[Team Member|TEAM_MEMBER]]\"\n* \"[[Namespace|NAMESPACE]]\"\n* \"[[Diary Record|DIARY_RECORD]]\"\n* \"[[Task|TASK]]\"\nThey represent the available [[Data_Types|data types]] in Arma.",
        "introduced_version": null,
        "syntax": "'''typeName''' anything",
        "parameters": [
            {
                "name": "anything",
                "description": "",
                "sqf_type": "Anything"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "typeOf",
        "description": "Returns the config class name of given object or \"\" if object does not have a config class.",
        "introduced_version": null,
        "syntax": "[[typeOf]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "uiNamespace",
        "description": "Returns the global namespace attached to user interface.",
        "introduced_version": null,
        "syntax": "'''uiNamespace'''",
        "parameters": [],
        "returns": {
            "description": "[[Namespace]]",
            "sqf_type": "Namespace"
        }
    },
    {
        "name": "uiSleep",
        "description": "Suspend execution of script for given uitime.  uiSleep is a sleep method to delay script execution where script time/simulation time is stopped. uiSleep is basically using the system time (uiTime more specifically) and not simulation time. So in the cases where sleep command would get stuck indefinitely, uiSleep can still be used to effectively delay script execution. For example in a mission briefing or an editor or when simulation is paused in general.",
        "introduced_version": null,
        "syntax": "'''uiSleep''' delay",
        "parameters": [],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "unassignCurator",
        "description": "Unassign curator (will destroy both sides of connection).",
        "introduced_version": null,
        "syntax": "'''unassignCurator''' curatorObj",
        "parameters": [
            {
                "name": "curatorObj",
                "description": "Curator module.",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "unassignItem",
        "description": "Unassigns existing item and tries to put it into inventory. If there is no space in inventory the item simply disappears.",
        "introduced_version": null,
        "syntax": "unit '''unassignItem''' item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "unassignTeam",
        "description": "Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit [[assignTeam]] \"MAIN\".",
        "introduced_version": null,
        "syntax": "'''unassignTeam''' vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "unassignVehicle",
        "description": "Unassigns individual unit from a vehicle, i.e removes [[assignedVehicleRole]] of the unit.\nIf the unit is currently in that vehicle, the group leader will issue an order to disembark.\n<br><br>\nNotes:\n* Important is to understand the basic system first: \n# [[addVehicle]] creates a vehicle pool for the AI group to use.\n# [[leaveVehicle]] removes a vehicle from the pool (and makes AI disembark when in that vehicle).\n# However there is also [[assignedVehicle]]. This is about the ''current vehicle in use'' essentially. The assignment happens via the various assignAsXXX/moveInXXX commands, or player/AI GL getIn radio commands, getIn waypoint, or when units start in vehicles or get moved in to a vehicle by Zeus/via Eden.\n# So the idea of [[unassignVehicle]] is to remove the ''current vehicle in use''.\n# However as long as the vehicle is still part of the vehicle pool of the group the AI GL may order the AI to re-enter the vehicle immediately.\n# To stop this from happening, one can use [[orderGetIn]]/[[allowGetIn]] [[false]] to (temporarily) disallow the AI from entering any vehicle.\n* If you use [[leaveVehicle]] on an AI group not in the vehicle, only the AI GL will get the vehicle removed from [[assignedVehicle]]. However when you now apply [[unassignVehicle]] on the whole group, it will stick/the AI GL not order to re-enter immediately - as the AI GL no longer has the vehicle in his pool for the group.\n* For player GL lead AI, the command removes the assignment. However it won't make the AI disembark the vehicle.",
        "introduced_version": null,
        "syntax": "[[unassignVehicle]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "underwater",
        "description": "Returns whether the object is fully underwater<br><br>",
        "introduced_version": null,
        "syntax": "'''underwater''' object",
        "parameters": [
            {
                "name": "object",
                "description": "mini-submarine",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if submerged",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "uniform",
        "description": "Returns name of uniform.",
        "introduced_version": null,
        "syntax": "[[uniform]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "uniformContainer",
        "description": "Returns a cargo container of a unit's uniform.",
        "introduced_version": null,
        "syntax": "[[uniformContainer]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "a soldier",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - cargo container or <NULL-object>",
            "sqf_type": "Object"
        }
    },
    {
        "name": "uniformItems",
        "description": "Get array with all items (of any kind, even weapons) from uniform.",
        "introduced_version": null,
        "syntax": "'''uniformItems''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "uniformMagazines",
        "description": "Get array with all magazines from uniform of the given unit.",
        "introduced_version": null,
        "syntax": "'''uniformMagazines''' unit",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "unitAddons",
        "description": "Returns list with addons the unit belongs to.",
        "introduced_version": null,
        "syntax": "[[unitAddons]] className",
        "parameters": [
            {
                "name": "className",
                "description": "class name of a unit/vehicle or object",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - addon names",
            "sqf_type": "Array"
        }
    },
    {
        "name": "unitAimPosition",
        "description": "Returns the position on the unit other units can aim at. Same as [[aimPos]] only returns position in [[PositionAGL]] format and has render scope alternative [[unitAimPositionVisual]].",
        "introduced_version": null,
        "syntax": "'''unitAimPosition''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - position in format [[PositionAGL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "unitAimPositionVisual",
        "description": "Returns the position on the unit other units can aim at in render scope. See also [[aimPos]], [[unitAimPosition]].",
        "introduced_version": null,
        "syntax": "'''unitAimPositionVisual''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - position in format [[PositionAGL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "unitBackpack",
        "description": "Returns unit's backpack",
        "introduced_version": null,
        "syntax": "'''unitBackpack''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "unitIsUAV",
        "description": "Returns true if the unit type is UAV - coresponding to transport param \"isUAV\"",
        "introduced_version": null,
        "syntax": "[[unitIsUAV]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] when UAV",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "unitPos",
        "description": "Return the unit position rules.\n\n<br>The return value is always \"Auto\" unless the unit has gotten a [[setUnitPos]] command. In that case the value is the last stance the unit was ordered to.\n<br>Available modes are listed at [[setUnitPos]].",
        "introduced_version": null,
        "syntax": "'''unitPos''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "unitReady",
        "description": "Check if the unit is ready. Unit is busy when it is given some command like [[move]], until the command is finished.",
        "introduced_version": null,
        "syntax": "[[unitReady]] unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "unitRecoilCoefficient",
        "description": "Returns recoil coefficient of a soldier.",
        "introduced_version": null,
        "syntax": "'''unitRecoilCoefficient''' soldier",
        "parameters": [
            {
                "name": "soldier",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "units",
        "description": "Returns an array with all the units in the group or group of the unit.<br>\nFor a destroyed object an empty array is returned.",
        "introduced_version": null,
        "syntax": "[[units]] type",
        "parameters": [
            {
                "name": "type",
                "description": "or [[Object]],",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "unitsBelowHeight",
        "description": "Returns units in group/array below given Above Terrain Level (ATL) height.",
        "introduced_version": null,
        "syntax": "units [[unitsBelowHeight]] height",
        "parameters": [
            {
                "name": "units",
                "description": "of [[Object]]s",
                "sqf_type": "Array"
            },
            {
                "name": "height",
                "description": "height above terrain level ([[PositionATL]])",
                "sqf_type": "Number"
            },
            {
                "name": "group",
                "description": "AI group",
                "sqf_type": "Group"
            },
            {
                "name": "height",
                "description": "height above terrain level ([[PositionATL]])",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[Object]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "unlinkItem",
        "description": "Unassign and delete existing item from its assigned slot. If item does not exist or is not in the assigned slot, command simply fails.",
        "introduced_version": null,
        "syntax": "unit [[unlinkItem]] item",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "item",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "unlockAchievement",
        "description": "Unlocks the given achievement. The achievements are listed in CfgAchievements, however none of the currently listed achievements is used in Arma 3, hence the command always returns [[false]].<br></br>",
        "introduced_version": null,
        "syntax": "[[unlockAchievement]] name",
        "parameters": [
            {
                "name": "name",
                "description": "achievement name",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] if achievement was unlocked",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "unregisterTask",
        "description": "Unregisters a task type from given agent. The task type is the name given in <tt>CfgTasks</tt> classes in <tt>name</tt> property. Also available from [[registeredTasks]] array.",
        "introduced_version": null,
        "syntax": "teamMember '''unregisterTask''' name",
        "parameters": [
            {
                "name": "name",
                "description": "name of the task",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - [[true]] on success",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "updateDrawIcon",
        "description": "Updates the icon to be shown in 2D editor for the specified editor,object. If maintain size is false,icon will not scale depending on the,scale of the map. If maintain size is a number,the icon will maintain,size if map scale is below that number.",
        "introduced_version": null,
        "syntax": "map '''updateDrawIcon''' [object,string identifier,color,offset,width,height,maintain size?,angle,shadow]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "updateMenuItem",
        "description": "Sets the text and command for the menu item. index is index as returned from addMenuItem command. command is optional.",
        "introduced_version": null,
        "syntax": "map '''updateMenuItem''' [menu item index,text,command]",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "Nothing",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "updateObjectTree",
        "description": "Update the editor object tree.",
        "introduced_version": null,
        "syntax": "'''updateObjectTree''' map",
        "parameters": [
            {
                "name": "map",
                "description": "-",
                "sqf_type": "Control"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "useAIOperMapObstructionTest",
        "description": "Toggle secondary obstruction test on road paths.",
        "introduced_version": null,
        "syntax": "'''useAIOperMapObstructionTest''' state",
        "parameters": [
            {
                "name": "state",
                "description": "[[true]] to enable, [[false]] to disable",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "useAISteeringComponent",
        "description": "Enable the new [https://forums.bistudio.com/topic/191515-ai-driving-feedback-topic/ AI driving], used to test the old and new AI driving.",
        "introduced_version": null,
        "syntax": "[[useAISteeringComponent]] state",
        "parameters": [
            {
                "name": "state",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "useAudioTimeForMoves",
        "description": "Switch between elapsed game time and audio time being used as animation timer. Used for audio/animation synchronization.",
        "introduced_version": null,
        "syntax": "soldier '''useAudioTimeForMoves''' toggle",
        "parameters": [
            {
                "name": "soldier",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "toggle",
                "description": "",
                "sqf_type": "Boolean"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "userInputDisabled",
        "description": "Returns true if user input is disabled",
        "introduced_version": null,
        "syntax": "'''userInputDisabled'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "vectorAdd",
        "description": "Adds two 3D vectors. Replaces [[BIS_fnc_vectorAdd]].",
        "introduced_version": null,
        "syntax": "vector1 [[vectorAdd]] vector2",
        "parameters": [
            {
                "name": "vector1",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "vector2",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorCos",
        "description": "Cosine of angle between two 3D vectors.",
        "introduced_version": null,
        "syntax": "vector1 [[vectorCos]] vector2",
        "parameters": [
            {
                "name": "vector1",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "vector2",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "vectorCrossProduct",
        "description": "Cross product of two 3D vectors. \n<br>In layman's terms, if you have a polygon (surface) defined by 3 points, you can find a normal to it (just like terrain [[surfaceNormal]]). To invert direction of the normal, swap arguments around.",
        "introduced_version": null,
        "syntax": "vector1 [[vectorCrossProduct]] vector2",
        "parameters": [
            {
                "name": "vector1",
                "description": "in form [x, y, z] or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "vector2",
                "description": "in form [x, y, z] or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] -  vector [x, y, z] \n<br><br>\n[[Image:crossProduct.jpg|300px]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorDiff",
        "description": "Subtracts one 3D vector from another. (vector1 - vector2)",
        "introduced_version": null,
        "syntax": "vector1 [[vectorDiff]] vector2",
        "parameters": [
            {
                "name": "vector1",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "vector2",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorDir",
        "description": "Returns object's normalized direction vector in world space (<tt>[x,y,z]</tt>). \n* A unit facing North would return <tt>[0,1,0]</tt>\n* A unit facing East would return <tt>[1,0,0]</tt>\n* A unit facing South would return <tt>[0,-1,0]</tt>\n* A unit facing West would return <tt>[-1,0,0]</tt>",
        "introduced_version": null,
        "syntax": "[[vectorDir]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Vector3D]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorDirVisual",
        "description": "Return object's normalized direction vector in world space (<tt>[x,y,z]</tt>) in render time scope. \n* A unit facing North would return <tt>[0,1,0]</tt>\n* A unit facing East would return <tt>[1,0,0]</tt>\n* A unit facing South would return <tt>[0,-1,0]</tt>\n* A unit facing West would return <tt>[-1,0,0]</tt>",
        "introduced_version": null,
        "syntax": "'''vectorDirVisual''' objectName",
        "parameters": [
            {
                "name": "objectName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Vector3D]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorDistance",
        "description": "Returns Euclidean distance between two 3D vectors or two 3D positions.",
        "introduced_version": null,
        "syntax": "vector1 [[vectorDistance]] vector2",
        "parameters": [
            {
                "name": "vector1",
                "description": "in format [x,y,z] or [[Position3D]] or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "vector2",
                "description": "in format [x,y,z] or [[Position3D]] or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "vectorDistanceSqr",
        "description": "Squared distance between two 3D vectors.",
        "introduced_version": null,
        "syntax": "vector1 [[vectorDistanceSqr]] vector2",
        "parameters": [
            {
                "name": "vector1",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "vector2",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "vectorDotProduct",
        "description": "Dot product of two 3D vectors.",
        "introduced_version": null,
        "syntax": "vector1 [[vectorDotProduct]] vector2",
        "parameters": [
            {
                "name": "vector1",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "vector2",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "vectorFromTo",
        "description": "Unit vector, equal to direction from vector1 to vector2. In other words this command produces [[vectorNormalized | normalised vector]] between given 2 points. To get a normal vector use [[vectorDiff]].",
        "introduced_version": null,
        "syntax": "vector1 [[vectorFromTo]] vector2",
        "parameters": [
            {
                "name": "vector1",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "vector2",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorLinearConversion",
        "description": "Interpolates vector between the given \"vectorFrom\" and \"vectorTo\" value according to the given range value",
        "introduced_version": null,
        "syntax": "[[vectorLinearConversion]] [rangeFrom, rangeTo, rangeValue, vectorFrom, vectorTo, clip]",
        "parameters": [
            {
                "name": "rangeFrom",
                "description": "start \"from\" range",
                "sqf_type": "Number"
            },
            {
                "name": "rangeTo",
                "description": "end \"to\" range",
                "sqf_type": "Number"
            },
            {
                "name": "rangeValue",
                "description": "variable range value",
                "sqf_type": "Number"
            },
            {
                "name": "vectorFrom",
                "description": "start \"from\" vector",
                "sqf_type": "Array"
            },
            {
                "name": "vectorTo",
                "description": "end \"to\" vector",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - interpolated vector",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorMagnitude",
        "description": "Magnitude of a 3D vector.",
        "introduced_version": null,
        "syntax": "[[vectorMagnitude]] vector",
        "parameters": [
            {
                "name": "vector",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "vectorMagnitudeSqr",
        "description": "Squared magnitude of a 3D vector.",
        "introduced_version": null,
        "syntax": "[[vectorMagnitudeSqr]] vector",
        "parameters": [
            {
                "name": "vector",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "vectorModelToWorld",
        "description": "Converts vector direction from model to world space.",
        "introduced_version": null,
        "syntax": "object '''vectorModelToWorld''' modelDir",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "modelDir",
                "description": "vector direction in model space in format [x,y,z]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - vector direction in world space in format [x,y,z]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorModelToWorldVisual",
        "description": "Converts vector from model to world space in render time scope.",
        "introduced_version": null,
        "syntax": "object '''vectorModelToWorldVisual''' modelDir",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "modelDir",
                "description": "vector direction in model space in format [x,y,z]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - vector direction in world space in format [x,y,z]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorMultiply",
        "description": "Multiplies 3D vector by a scalar.",
        "introduced_version": null,
        "syntax": "vector [[vectorMultiply]] scalar",
        "parameters": [
            {
                "name": "vector",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            },
            {
                "name": "scalar",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorNormalized",
        "description": "Returns normalized vector (unit vector, [[vectorMagnitude]]",
        "introduced_version": null,
        "syntax": "[[vectorNormalized]] vector",
        "parameters": [
            {
                "name": "vector",
                "description": "vector 3D or 2D (since Arma 3 v1.99.146539, z coordinate is defaulted to 0)",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorUp",
        "description": "Returns up vector of the given object in format [[Vector3D]].",
        "introduced_version": null,
        "syntax": "[[vectorUp]] object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - up vector in format [[Vector3D]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorUpVisual",
        "description": "Return object's up vector in world [[Position]] coordinates ( [x, y, z] ) in render time scope.",
        "introduced_version": null,
        "syntax": "'''vectorUpVisual''' objectName",
        "parameters": [
            {
                "name": "objectName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Position]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorWorldToModel",
        "description": "Converts vector direction from world to model space.",
        "introduced_version": null,
        "syntax": "object '''vectorWorldToModel''' worldDir",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "worldDir",
                "description": "vector direction in world space in format [x,y,z]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - vector direction in model space in format [x,y,z]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vectorWorldToModelVisual",
        "description": "Converts vector direction from world to model space in [[Simulation vs Render Time Scope|render time scope]].",
        "introduced_version": null,
        "syntax": "object [[vectorWorldToModelVisual]] worldDir",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "worldDir",
                "description": "vector direction in world space in format [x,y,z]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - vector direction in model space in format [x,y,z]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vehicle",
        "description": "Vehicle in which given unit is mounted. If none, unit is returned. Alternatively, use [[objectParent]]",
        "introduced_version": null,
        "syntax": "'''vehicle''' unitName",
        "parameters": [
            {
                "name": "unitName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "vehicleCargoEnabled",
        "description": "Check if the vehicle has enabled transporting other vehicles or not.",
        "introduced_version": null,
        "syntax": "[[vehicleCargoEnabled]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - returns true if the vehicle has enabled transporting other vehicles, and false if the vehicle has not enabled transporting other vehicles",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "vehicleChat",
        "description": "Types text to the vehicle radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see [[remoteExec]])\n<br>\n<br>Note: Object parameter must be a vehicle, not a player.\n<br>Note: If you are in a crew seat (i.e. driver, gunner or commander), then it will include that role in the chat name output (Eg: Driver (you_name): \"Message\").",
        "introduced_version": null,
        "syntax": "vehicleName '''vehicleChat''' chatText",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "vehicle unit is in",
                "sqf_type": "Object"
            },
            {
                "name": "chatText",
                "description": "message to transmit",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "vehicleMoveInfo",
        "description": "Returns current vehicle move/turn info (a getter for [[sendSimpleCommand]]) in format [moveInfo, turnInfo]. Possible values:\n\n{",
        "introduced_version": null,
        "syntax": "[[vehicleMoveInfo]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] in format [moveInfo, turnInfo], where:\n* moveInfo: [[String]] - state of vehicle forward/backward movement (see description)\n* turnInfo: [[String]] - state of vehicle left/right turning (see description)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vehicleRadio",
        "description": "Sends the audio message to the vehicle radio channel. The message is defined in CfgRadio in the [[description.ext]] file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see [[remoteExec]]).\n<br><br>Note:  When transmitting unit gets killed, transmission will be interrupted, however when receiving unit gets killed, the transmission continues to play.",
        "introduced_version": null,
        "syntax": "unit '''vehicleRadio''' radioName",
        "parameters": [
            {
                "name": "unit",
                "description": "unit to transmit",
                "sqf_type": "Object"
            },
            {
                "name": "radioName",
                "description": "class name from CfgRadio",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "vehicleReceiveRemoteTargets",
        "description": "Gets whether the vehicle can acquire targets via datalink from the [[Side]] center.",
        "introduced_version": null,
        "syntax": "'''vehicleReceiveRemoteTargets''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "vehicleReportOwnPosition",
        "description": "Gets whether the vehicle shares its own position via datalink with the [[Side]] center.",
        "introduced_version": null,
        "syntax": "'''vehicleReportOwnPosition''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "vehicleReportRemoteTargets",
        "description": "Gets whether the vehicle shares acquired targets via datalink with the [[Side]] center.",
        "introduced_version": null,
        "syntax": "'''vehicleReportRemoteTargets''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "vehicleVarName",
        "description": "Returns the name of the variable which contains a primary editor reference to this object. This is the variable given in the Insert Unit dialog / name field, in the editor. It can be changed using [[setVehicleVarName]]. <br>\nIf ''object'' refers to a vehicle that wasn't given a name in the editor, the return value is an empty string, \"\".\n<br>Since it is possible to [[setVehicleVarName]] individually on each PC, the value of [[vehicleVarName]] returned will be [[local]] to the PC on which command is executed.",
        "introduced_version": null,
        "syntax": "'''vehicleVarName''' object",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "vehicles",
        "description": "Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles <u>but not soldiers</u>. It will also return \"WeaponHolderSimulated\" of dead bodies (weapon on the ground). Vehicles created with [[createVehicleLocal]] will only be returned on the client that created them.",
        "introduced_version": null,
        "syntax": "'''vehicles'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "velocity",
        "description": "Return velocity (speed vector) of [[Object#Unit|Unit]] as an array with format [x, y, z].",
        "introduced_version": null,
        "syntax": "[[velocity]] vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "velocityModelSpace",
        "description": "Returns the velocity (speed vector) of the vehicle as an array with format [x, y, z]. Vector is in model space.",
        "introduced_version": null,
        "syntax": "'''velocityModelSpace''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "verifySignature",
        "description": "Check if file is signed by any key present in game keys folders. Note: On client, it does not check against the keys accepted by server.",
        "introduced_version": null,
        "syntax": "[[Boolean]]",
        "parameters": [
            {
                "name": "filename",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "vest",
        "description": "Returns name of vest.",
        "introduced_version": null,
        "syntax": "'''vest''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "vestContainer",
        "description": "Returns a cargo container of a unit's vest.",
        "introduced_version": null,
        "syntax": "'''vestContainer''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "a soldier",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Object]] - cargo container or <NULL-object>",
            "sqf_type": "Object"
        }
    },
    {
        "name": "vestItems",
        "description": "Get array with all items (of any kind, even weapons) from vest.",
        "introduced_version": null,
        "syntax": "'''vestItems''' unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "vestMagazines",
        "description": "Get array with all magazines from vest of the given unit.",
        "introduced_version": null,
        "syntax": "'''vestMagazines''' unit",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "viewDistance",
        "description": "Returns the rendering distance.",
        "introduced_version": null,
        "syntax": "'''viewDistance'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "visibleCompass",
        "description": "Checks if the player has compass opened and visible",
        "introduced_version": null,
        "syntax": "'''visibleCompass'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "visibleGPS",
        "description": "Checks if the player has GPS receiver opened and visible",
        "introduced_version": null,
        "syntax": "'''visibleGPS'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "visibleMap",
        "description": "Return true if the main map is shown (active).",
        "introduced_version": null,
        "syntax": "'''visibleMap'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "visiblePosition",
        "description": "Returns an object's rendered position (z value above surface underneath) in render time scope. Same as [[getPosVisual]]",
        "introduced_version": null,
        "syntax": "'''visiblePosition''' object",
        "parameters": [
            {
                "name": "object",
                "description": ": - name of the object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionAGLS]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "visiblePositionASL",
        "description": "Returns an object's rendered [[PositionASL|3D position ASL]] (z value above sea level) in render time scope.",
        "introduced_version": null,
        "syntax": "'''visiblePositionASL''' object",
        "parameters": [
            {
                "name": "object",
                "description": ": - name of the object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionASL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "visibleScoretable",
        "description": "Checks whether the score table is visible.",
        "introduced_version": null,
        "syntax": "[[visibleScoretable]]",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "visibleWatch",
        "description": "Checks if the player has watch opened and visible",
        "introduced_version": null,
        "syntax": "'''visibleWatch'''",
        "parameters": [],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "waitUntil",
        "description": "Suspends execution of [[Scheduler | scheduled]] script until the given condition satisfied. This command will loop and call the code inside <tt>{}</tt> ''mostly'' every frame (depends on complexity of condition and overall engine load) until the [[Code|code]] returns [[true]]. The execution of the rest of the script therefore will be suspended until [[waitUntil]] completes. <br><br>\nIf the very first execution of the code returns [[true]] the command will exit immediately, therefore it will not produce any \"Suspending not allowed in this context\" error when used inside [[Scheduler#Unscheduled_Environment|non-scheduled]] script. For all other uses it must be executed in environment that allows [[Scheduler#Suspension|suspension]] ([[canSuspend]]), such as [[spawn]]ed or [[execVM]]ed code.",
        "introduced_version": null,
        "syntax": "[[waitUntil]] condition",
        "parameters": [
            {
                "name": "condition",
                "description": "the expression that '''must''' return a [[Boolean]], [[true]] to finish waiting or [[false]] to continue waiting",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[Anything]] - the value the condition evaluates to when the wait is over (normally [[true]])",
            "sqf_type": "Anything"
        }
    },
    {
        "name": "waves",
        "description": "Return waves value.",
        "introduced_version": null,
        "syntax": "'''waves'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "waypointAttachObject",
        "description": "Attaches a static object via it is numeric ID to the given waypoint.",
        "introduced_version": null,
        "syntax": "waypoint [[waypointAttachObject]] objectID",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "objectID",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            },
            {
                "name": "object",
                "description": "static object",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "waypointAttachVehicle",
        "description": "Attaches a vehicle [[Object]] to the given [[Waypoint]].\n<br><br>",
        "introduced_version": null,
        "syntax": "waypoint [[waypointAttachVehicle]] vehicleName",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Waypoint"
            },
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Nothing]]",
            "sqf_type": "Nothing"
        }
    },
    {
        "name": "waypointAttachedObject",
        "description": "Gets the object attached to the waypoint.",
        "introduced_version": null,
        "syntax": "'''waypointAttachedObject''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "waypointAttachedVehicle",
        "description": "Gets the vehicle attached to the waypoint.\n<br>A vehicle can be attached to a waypoint by\n*creating the waypoint on top of the vehicle (in the editor)\n*using [[waypointAttachVehicle]]",
        "introduced_version": null,
        "syntax": "'''waypointAttachedVehicle''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Object]]",
            "sqf_type": "Object"
        }
    },
    {
        "name": "waypointBehaviour",
        "description": "Gets the waypoint behavior.",
        "introduced_version": null,
        "syntax": "'''waypointBehaviour''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointCombatMode",
        "description": "Gets the waypoint combat mode.",
        "introduced_version": null,
        "syntax": "'''waypointCombatMode''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointCompletionRadius",
        "description": "Gets the radius around the waypoint where the waypoint is completed.",
        "introduced_version": null,
        "syntax": "'''waypointCompletionRadius''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "waypointDescription",
        "description": "Gets the waypoint description.",
        "introduced_version": null,
        "syntax": "'''waypointDescription''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointForceBehaviour",
        "description": "Returns true if the waypoint behavior is forced.",
        "introduced_version": null,
        "syntax": "[[waypointForceBehaviour]] waypoint;",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [",
                "sqf_type": "Waypoint"
            }
        ],
        "returns": {
            "description": "[[Boolean]] - is forced",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "waypointFormation",
        "description": "Gets the waypoint formation.\n\nPossible values are: \n* \"NO CHANGE\"\n* \"COLUMN\"\n* \"STAG COLUMN\"\n* \"WEDGE\"\n* \"ECH LEFT\"\n* \"ECH RIGHT\"\n* \"VEE\"\n* \"LINE\"\n* \"FILE\"\n* \"DIAMOND\"",
        "introduced_version": null,
        "syntax": "'''waypointFormation''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointHousePosition",
        "description": "Returns [[buildingPos]] index assigned to the waypoint.",
        "introduced_version": null,
        "syntax": "'''waypointHousePosition''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]] - [[buildingPos]] index",
            "sqf_type": "Number"
        }
    },
    {
        "name": "waypointLoiterAltitude",
        "description": "Gets the waypoint loiter altitude. Waypoint uses format Waypoint.",
        "introduced_version": null,
        "syntax": "[[waypointLoiterAltitude]] waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "waypointLoiterRadius",
        "description": "Gets the waypoint loiter radius. Waypoint uses format [[Waypoint]].",
        "introduced_version": null,
        "syntax": "'''waypointLoiterRadius''' Waypoint",
        "parameters": [
            {
                "name": "Waypoint",
                "description": "",
                "sqf_type": "Waypoint"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "waypointLoiterType",
        "description": "Gets the waypoint loiter type. Waypoint uses format [[Waypoint]].",
        "introduced_version": null,
        "syntax": "[[waypointLoiterType]] waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Waypoint"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointName",
        "description": "Gets the waypoint name.",
        "introduced_version": null,
        "syntax": "'''waypointName''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "",
                "sqf_type": "Waypoint"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointPosition",
        "description": "Returns [[Position]] of the given waypoint. <br><br>",
        "introduced_version": null,
        "syntax": "'''waypointPosition''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[PositionAGL]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "waypointScript",
        "description": "Gets the waypoint script.",
        "introduced_version": null,
        "syntax": "'''waypointScript''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointShow",
        "description": "A getter for [[showWaypoint]] command. Possible values are:\n* \"NEVER\" - never show it\n* \"EASY\" - show only in cadet mode\n* \"ALWAYS\" - always show it\n* \"ERROR\" - when set to any different string",
        "introduced_version": null,
        "syntax": "'''waypointShow''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]] - see description",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointSpeed",
        "description": "Gets the waypoint speed.\n\nPossible values are:\n* \"UNCHANGED\"\n* \"LIMITED\"\n* \"NORMAL\"\n* \"FULL\"",
        "introduced_version": null,
        "syntax": "'''waypointSpeed''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]] - see description",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointStatements",
        "description": "Gets the waypoint statements.",
        "introduced_version": null,
        "syntax": "'''waypointStatements''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "waypointTimeout",
        "description": "Gets the waypoint timeout values.",
        "introduced_version": null,
        "syntax": "'''waypointTimeout''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "waypointTimeoutCurrent",
        "description": "Gets the current timeout for [[currentWaypoint]] of a [[group]] or -1 if countdown is not in progress.",
        "introduced_version": null,
        "syntax": "'''waypointTimeoutCurrent''' group",
        "parameters": [
            {
                "name": "group",
                "description": "",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "waypointType",
        "description": "Gets the waypoint type.\n\nType can be:\n* \"MOVE\"\n* \"DESTROY\"\n* \"GETIN\"\n* \"SAD\"\n* \"JOIN\"\n* \"LEADER\"\n* \"GETOUT\"\n* \"CYCLE\"\n* \"LOAD\"\n* \"UNLOAD\"\n* \"TR UNLOAD\"\n* \"HOLD\"\n* \"SENTRY\"\n* \"GUARD\"\n* \"TALK\"\n* \"SCRIPTED\"\n* \"SUPPORT\"\n* \"GETIN NEAREST\"\n* \"DISMISS\"\n* \"AND\"\n* \"OR\"\n\nMore details at [[Waypoints]].",
        "introduced_version": null,
        "syntax": "'''waypointType''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "waypointVisible",
        "description": "A getter for [[setWaypointVisible]] command.",
        "introduced_version": null,
        "syntax": "'''waypointVisible''' waypoint",
        "parameters": [
            {
                "name": "waypoint",
                "description": "format [[Waypoint]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "waypoints",
        "description": "Returns an array of waypoints for the specified unit/group.",
        "introduced_version": null,
        "syntax": "'''waypoints''' groupName",
        "parameters": [
            {
                "name": "groupName",
                "description": "",
                "sqf_type": "Group"
            }
        ],
        "returns": {
            "description": "[[Array]] of waypoints each in format [[Waypoint]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "waypointsEnabledUAV",
        "description": "Checks if the UAV has waypoints enabled.",
        "introduced_version": null,
        "syntax": "[[waypointsEnabledUAV]] uav",
        "parameters": [
            {
                "name": "uav",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "weaponAccessories",
        "description": "Get array with all items linked to a given weapon.",
        "introduced_version": null,
        "syntax": "unit '''weaponAccessories''' weapon",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weapon",
                "description": "primary, secondary or handgun",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - [silencer, laserpointer/flashlight, optics, bipod]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weaponAccessoriesCargo",
        "description": "Returns array with all items assigned to the given weapon in given cargo container.",
        "introduced_version": null,
        "syntax": "container '''weaponAccessoriesCargo''' [weaponId, creatorId]",
        "parameters": [
            {
                "name": "container",
                "description": "cargo container",
                "sqf_type": "Object"
            },
            {
                "name": "weaponId",
                "description": "",
                "sqf_type": "Number"
            },
            {
                "name": "creatorId",
                "description": "",
                "sqf_type": "Number"
            }
        ],
        "returns": {
            "description": "[[Array]] -  [silencer, laserpointer/flashlight, optics, bipod]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weaponCargo",
        "description": "Get array with weapons from ammo box (or any general weapon holder container).",
        "introduced_version": null,
        "syntax": "[[weaponCargo]] box",
        "parameters": [
            {
                "name": "box",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]] - list of present classes",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weaponDirection",
        "description": "Returns the direction that the vehicle weapon is aiming in. For addons the weapon name must be an entry in CfgWeapons.",
        "introduced_version": null,
        "syntax": "vehicleName [[weaponDirection]] weaponName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "weaponName",
                "description": "",
                "sqf_type": "String"
            }
        ],
        "returns": {
            "description": "[[Array]] - format [[Vector3D]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weaponInertia",
        "description": "Returns current rate of how much the weapon view is distorted because of quick aiming",
        "introduced_version": null,
        "syntax": "[[weaponInertia]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weaponLowered",
        "description": "Returns [[true]] if given soldier's weapon is lowered. <br><br>",
        "introduced_version": null,
        "syntax": "[[weaponLowered]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Boolean]]",
            "sqf_type": "Boolean"
        }
    },
    {
        "name": "weaponState",
        "description": "Returns the currently selected weapon state for unit or vehicle.<br><br>",
        "introduced_version": null,
        "syntax": "[[weaponState]] unit",
        "parameters": [
            {
                "name": "unit",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - in format [weapon, muzzle, firemode, magazine, ammoCount], where:\n* weapon: [[String]]\n* muzzle: [[String]]\n* firemode: [[String]]\n* magazine: [[String]]\n* ammoCount: [[Number]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weapons",
        "description": "Returns array of names of all unit's weapons.",
        "introduced_version": null,
        "syntax": "'''weapons''' vehicleName",
        "parameters": [
            {
                "name": "vehicleName",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] of weapon names.",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weaponsItems",
        "description": "[[Image:Weaponsitems.jpg|150px|right|border]]Returns an array with subarrays contains class names and also names of connected items of all the vehicle's weapons.",
        "introduced_version": null,
        "syntax": "'''weaponsItems''' vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "unit or vehicle",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - array containing arrays of weapon items info in format <tt>",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weaponsItemsCargo",
        "description": "Returns an array with subarrays contains class names and also names of connected items of all the vehicle's cargo weapons in [[weaponsItems]] format. If weapon has no magazine, an empty array [] is returned instead of magazine info. If the argument is a vehicle with weapons, vehicles cargo is searched, unlike with [[weaponsItems]] command, which will return vehicle's weapons instead. \n* Since Arma 3 v1.95.145811 the returned array always contains secondary muzzle magazine info and consistent with [[getUnitLoadout]] format for weapon items.",
        "introduced_version": null,
        "syntax": "[[weaponsItemsCargo]] vehicle",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] - see [[weaponsItems]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weaponsTurret",
        "description": "Returns all weapons of given turret. Use turret path [-1] for driver's turret.",
        "introduced_version": null,
        "syntax": "vehicle [[weaponsTurret]] turretPath",
        "parameters": [
            {
                "name": "vehicle",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "turretPath",
                "description": "",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] of [[String]]s",
            "sqf_type": "Array"
        }
    },
    {
        "name": "weightRTD",
        "description": "Returns weight of RTD helicopter.",
        "introduced_version": null,
        "syntax": "[[weightRTD]] helicopter",
        "parameters": [
            {
                "name": "helicopter",
                "description": "",
                "sqf_type": "Object"
            }
        ],
        "returns": {
            "description": "[[Array]] -  [fuselage weight, crew weight, fuel weight, [[setCustomWeightRTD|custom weight]], weapons weight] (kilograms)",
            "sqf_type": "Array"
        }
    },
    {
        "name": "west",
        "description": "West [[Side|side]].",
        "introduced_version": null,
        "syntax": "'''west'''",
        "parameters": [],
        "returns": {
            "description": "[[Side]]",
            "sqf_type": "Side"
        }
    },
    {
        "name": "while",
        "description": "Repeats [[Code]] while condition is [[true]]. A part of [[while]] [[do]] construct.",
        "introduced_version": null,
        "syntax": "'''while''' condition",
        "parameters": [
            {
                "name": "condition",
                "description": "",
                "sqf_type": "Code"
            }
        ],
        "returns": {
            "description": "[[While Type]]",
            "sqf_type": "While"
        }
    },
    {
        "name": "wind",
        "description": "Returns the current wind vector (in m/s) as array [x, y, z].<br>\n'''NOTE:''' the last value (z, \"up-down\") always returns 0 \u2013 wind being only horizontal.",
        "introduced_version": null,
        "syntax": "'''wind'''",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "windDir",
        "description": "Returns the current wind azimuth.",
        "introduced_version": null,
        "syntax": "[[windDir]]",
        "parameters": [],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    },
    {
        "name": "windRTD",
        "description": "Returns wind strength and direction.",
        "introduced_version": null,
        "syntax": "[[windRTD]]",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "windStr",
        "description": "Returns the current wind strength.",
        "introduced_version": null,
        "syntax": "'''windStr'''",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "wingsForcesRTD",
        "description": "Returns force produced by wings.",
        "introduced_version": null,
        "syntax": "'''wingsForcesRTD''' RTD_helicopter",
        "parameters": [],
        "returns": {
            "description": "[[Array]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "with",
        "description": "Creates a [[With Type]] that is used inside a [[do]] construct in order to execute code inside a given namespace.",
        "introduced_version": null,
        "syntax": "[[with]] namespace",
        "parameters": [
            {
                "name": "namespace",
                "description": "",
                "sqf_type": "Namespace"
            }
        ],
        "returns": {
            "description": "[[With Type]]",
            "sqf_type": "With"
        }
    },
    {
        "name": "worldName",
        "description": "Return the name of the currently loaded world.",
        "introduced_version": null,
        "syntax": "'''worldName'''",
        "parameters": [],
        "returns": {
            "description": "[[String]]",
            "sqf_type": "String"
        }
    },
    {
        "name": "worldSize",
        "description": "Returns the engine calculated size (terrain side length) of the current world ([[BIS_fnc_mapSize]] may return the same value, but is just a simple look up in [[configFile | config]]).",
        "introduced_version": null,
        "syntax": "[[worldSize]]",
        "parameters": [],
        "returns": {
            "description": "[[Number]]",
            "sqf_type": "Number"
        }
    },
    {
        "name": "worldToModel",
        "description": "Converts position from world space to object model space.",
        "introduced_version": null,
        "syntax": "model [[worldToModel]] position",
        "parameters": [
            {
                "name": "model",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "position",
                "description": "world position, format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - position relative to model, format [[PositionRelative]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "worldToModelVisual",
        "description": "Converts position from world space to object model space in [[Simulation vs Render Time Scope|render time scope]].",
        "introduced_version": null,
        "syntax": "object [[worldToModelVisual]] worldPosition",
        "parameters": [
            {
                "name": "object",
                "description": "",
                "sqf_type": "Object"
            },
            {
                "name": "worldPosition",
                "description": "format [[PositionAGL]] or [[Position2D]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - [[PositionRelative]]",
            "sqf_type": "Array"
        }
    },
    {
        "name": "worldToScreen",
        "description": "Converts position in world space into screen (UI) space. If a specified position is not within the current screen view, an empty array is returned.",
        "introduced_version": null,
        "syntax": "[[worldToScreen]] position",
        "parameters": [
            {
                "name": "position",
                "description": "World position 2D [x,y] or [[PositionAGL]]",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": "[[Array]] - Screen position [x,y] (see [[SafeZone]] for more info) - [] if not on-screen",
            "sqf_type": "Array"
        }
    },
    {
        "name": "tvSetSelectColor",
        "description": "Sets the select color of given path.",
        "introduced_version": null,
        "syntax": "ctrl [[tvSetSelectColor]] [path, color]",
        "parameters": [
            {
                "name": "ctrl",
                "description": "",
                "sqf_type": "Control"
            },
            {
                "name": "path",
                "description": "Path of the item",
                "sqf_type": "Array"
            },
            {
                "name": "color",
                "description": "Color RGBA",
                "sqf_type": "Array"
            }
        ],
        "returns": {
            "description": null,
            "sqf_type": null
        }
    }
]