{"parse":{"title":"spawn","pageid":3006,"parsetree":{"*":"<root><template><title>Command</title><part><name>Comments</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"1\"/><value> arma </value></part><part><name>Game name</name>=<value>\n\n</value></part><part><name>gr1</name>=<value> Program Flow </value></part><part><name>GROUP1</name>=<value>\n\n\n\n</value></part><part><name index=\"2\"/><value>1.00</value></part><part><name>Game version</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"3\"/><value> Adds given set of compiled instructions to the [[Scheduler|scheduler]]. Exactly when the code will be executed is unknown, it depends on how busy is the engine and how filled up is the [[Scheduler|scheduler]]. Therefore [[spawn]] does not wait for the supplied code to finish, instead, [[spawn]] returns a [[Script (Handle)|Script]] handle to the [[Scheduler|scheduler]] task. [[scriptDone]] command can be used to check the code completion. Additional arguments are passed to the code in local variable [[_this]]. Since Arma 3 v1.55 the script handle also exists inside the code in &lt;tt&gt;_thisScript&lt;/tt&gt; variable. To see what spawned scripts are currently in the scheduler, use [[diag_activeSQFScripts]] command.&lt;br&gt;&lt;br&gt;\n<template lineStart=\"1\"><title>Warning</title><part><name index=\"1\"/><value> When multiple [[Code]] is [[spawn]]ed in an order, there is &lt;u&gt;no guarantee&lt;/u&gt; that the [[spawn]]ed [[Code]] will also execute in the same order. If you need such guarantee, use [[BIS_fnc_spawnOrdered]] function</value></part></template></value></part><part><name>DESCRIPTION</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"4\"/><value> arguments '''spawn''' code </value></part><part><name>SYNTAX</name>=<value>\n\n</value></part><part><name>p1</name>=<value> arguments: [[Any Value]] - arguments passed to the script, which later available in &lt;tt&gt;_this&lt;/tt&gt; variable inside the script. </value></part><part><name>PARAMETER1</name>=<value>\n\n</value></part><part><name>p2</name>=<value> code: [[Code]] </value></part><part><name>PARAMETER2</name>=<value>\n\n</value></part><part><name index=\"5\"/><value> [[Script_(Handle)|Script Handle]] - can be used to determine (via [[scriptDone]] (also via [[isNull]] in Arma 3)) when the spawned script has finished. In Arma 3, the handle is also available inside the spawned script in &lt;tt&gt;_thisScript&lt;/tt&gt; variable. </value></part><part><name>RETURNVALUE</name>=<value>\n____________________________________________________________________________________________\n\t\t  \n\n____________________________________________________________________________________________\n\t\t  \n</value></part><part><name>x1</name>=<value> &lt;code&gt;_handle = [] [[spawn]] {[[player]] [[globalChat]] \"Hello world!\"};&lt;/code&gt; </value></part><part><name>EXAMPLE1</name>=<value>\n\n</value></part><part><name>x2</name>=<value> There is no guarantee that spawned scripts will be executed in the same order they spawned: \n&lt;code&gt;[[for]] \"_i\" [[from]] 0 [[to]] 100 [[do]] \n{\n\t_null = _i [[spawn]] \n\t{\n\t\t[[diag_log]] _this;\n\t};\n};&lt;/code&gt;\n// Result: 51,1,2...49,50,0,52,53...100 </value></part><part><name>EXAMPLE2</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"6\"/><value> [[call]], [[execVM]], [[execFSM]], [[exec]], [[compile]], [[preprocessFileLineNumbers]], [[preprocessFile]], [[terminate]], [[scriptDone]], [[remoteExec]], [[sleep]], [[uiSleep]], [[canSuspend]] </value></part><part><name>SEEALSO</name>=<value>\n\n</value></part></template>\n\n&lt;h3 style=\"display:none\"&gt;Notes&lt;/h3&gt;\n&lt;dl class=\"command_description\"&gt;\n<comment>&lt;!-- Note Section BEGIN --&gt;\n</comment>&lt;dd class=\"notedate\"&gt;Posted on 5 March, 2009\t \n&lt;dt class=\"note\"&gt;[[User:Kronzky|Kronzky]]\n&lt;dd class=\"note\"&gt;\t \n[[spawn]] cannot call other local functions on the same scope as itself.&lt;br&gt;\nIt can, however, call other global functions:\n&lt;code&gt;_addOne = {TST=TST+1};\nTST_addOne = {TST=TST+1};\n\n_add = {\n    TST=TST+1;\n    [[player]] [[sideChat]] [[format]] [\"added: %1\",TST];\n    [] [[call]] _addOne;\n    [[player]] [[sideChat]] [[format]] [\"called local: %1\",TST];\n    [] [[call]] TST_addOne;\n    [[player]] [[sideChat]] [[format]] [\"called global: %1\",TST];\n};\nTST=0;\n[] [[call]] _add;\n[] [[spawn]] _add;&lt;/code&gt;\nThe call of _addOne from the spawned function does not do anything.\n\n<comment>&lt;!-- Note Section END --&gt;\n</comment>&lt;/dl&gt;\n\n&lt;h3 style=\"display:none\"&gt;Bottom Section&lt;/h3&gt;\n[[Category:Scripting Commands|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands OFP Elite |<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands Armed Assault|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands Arma 2|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands Arma 3|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands Take On Helicopters|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n\n\n<comment>&lt;!-- CONTINUE Notes --&gt;\n</comment>&lt;dl class=\"command_description\"&gt;\n&lt;dd class=\"notedate\"&gt;Posted on October 21, 2014 - 23:33 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:DreadedEntity|DreadedEntity]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\n[[spawn]] requires a script handle when used in the 2D editor. '''(A3)'''&lt;br&gt;\nIn scripts and in the debug console, it is not required, but very useful for keeping track of running scripts. Having a script handle also makes it easy to [[terminate]] scripts at any time.\n&lt;br&gt;&lt;br&gt;\nSince [[spawn]] creates a new [[Scheduler#Scheduled_Environment|scheduled environment]], having an excess of open [[Scheduler#Threads|threads]] can make the [[Scheduler#Scheduler|scheduler]] queue extremely long, significantly increasing the execution time of each [[Scheduler#Threads|thread]]. (it takes an extremely large amount of [[Scheduler#Threads|threads]], though)\n&lt;/dd&gt;\n&lt;/dl&gt;\n<comment>&lt;!-- DISCONTINUE Notes --&gt;\n</comment>\n<comment>&lt;!-- CONTINUE Notes --&gt;\n</comment>&lt;dl class=\"command_description\"&gt;\n&lt;dd class=\"notedate\"&gt;Posted on August 25, 2015 - 13:39 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:IT07|IT07]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nIf you want to call a local function which has NOT been created inside a spawned function, then do this:\n&lt;code&gt;_fncOne = { systemChat\"This is _fncOne\" }; _fncTwo = { call (_this select 0) }; [_fncOne] spawn _fncTwo;&lt;/code&gt;\n&lt;/dd&gt;\n&lt;/dl&gt;\n<comment>&lt;!-- DISCONTINUE Notes --&gt;</comment></root>"}}}