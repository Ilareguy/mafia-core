{"parse":{"title":"deleteAt","pageid":16646,"parsetree":{"*":"<root><template><title>RV</title><part><name>type</name>=<value>command\n\n</value></part><part><name index=\"1\"/><value> arma3\n\n</value></part><part><name index=\"2\"/><value>1.32\n\n</value></part><part><name>gr1</name>=<value> Arrays\n\n</value></part><part><name>gr2</name>=<value> HashMap\n\n</value></part><part><name index=\"3\"/><value> Removes array element at the given index and returns removed element (modifies the original array, just like [[resize]] or [[set]]). Will not issue error when -1 index is passed making it ideal for using with [[find]](see Example 2) or [[findIf]](see Example 3) command\n\n</value></part><part><name index=\"4\"/><value> array '''deleteAt''' index\n\n</value></part><part><name>p1</name>=<value> array: [[Array]]\n</value></part><part><name>p2</name>=<value> index: [[Number]]\n\n</value></part><part><name index=\"5\"/><value> [[Anything]] - returns the deleted element\n\n\t\n</value></part><part><name> s2</name>=<value> hashMap [[deleteAt]] key\n\n</value></part><part><name> p21</name>=<value> hashMap: [[HashMap]]\n</value></part><part><name> p22</name>=<value> key : [[HashMapKey]]\n\n</value></part><part><name> r2</name>=<value> [[Anything]]\n\t\t  \n</value></part><part><name>x1</name>=<value> &lt;code&gt;_arr = [1,2,3];\n_rem = _arr [[deleteAt]] 1;\n[[hint]] [[str]] [_rem, _arr]; //[2,[1,3]]&lt;/code&gt;\n\n</value></part><part><name>x2</name>=<value> &lt;code&gt;_arr = [1,2,3];\n_arr [[deleteAt]] (_arr [[find]] 0); // non existent item\n[[hint]] [[str]] _arr; // [1,2,3]\n_arr [[deleteAt]] (_arr [[find]] 2); // existent item\n[[hint]] [[str]] _arr; // [1,3]&lt;/code&gt;\n\n</value></part><part><name>x3</name>=<value> &lt;code&gt;_arr = [1,2,3];\n_arr [[deleteAt]] (_arr [[findIf]] {(_x [[%]] 5) [[==]] 0}); // Remove first number that's divisible by 5\n[[hint]] [[str]] _arr; // [1,2,3]\n_arr [[deleteAt]] (_arr [[findIf]] {(_x [[%]] 2) [[==]] 0}); // Remove first number that's divisible by 2\n[[hint]] [[str]] _arr; // [1,3]&lt;/code&gt;\n\n</value></part><part><name>seealso</name>=<value> [[deleteRange]], [[set]], [[resize]], [[select]], [[in]], [[find]], [[findIf]], [[toArray]], [[toString]], [[forEach]], [[count]], [[pushBack]], [[pushBackUnique]], [[apply]], [[append]], [[sort]], [[param]], [[params]], [[arrayIntersect]], [[splitString]], [[joinString]]\n</value></part></template>\n\n\n\n[[Category:Scripting Commands|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n<template lineStart=\"1\"><title>GameCategory</title><part><name index=\"1\"/><value>arma3</value></part><part><name index=\"2\"/><value>New Scripting Commands</value></part></template>\n<template lineStart=\"1\"><title>GameCategory</title><part><name index=\"1\"/><value>arma3</value></part><part><name index=\"2\"/><value>Scripting Commands</value></part></template>\n\n<comment>&lt;!-- CONTINUE Notes --&gt;\n</comment>&lt;dl class=\"command_description\"&gt;\n&lt;dd class=\"notedate\"&gt;Posted on October 15, 2014 - 16:55 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Heeeere's Johnny!|Heeeere's Johnny!]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt; &lt;code&gt;_array [[deleteAt]] 0&lt;/code&gt;is almost 60x faster than&lt;code&gt;_array = _array - [_array select 0]&lt;/code&gt;(Tested with an array of 10.000 strings, iterating through it using a for-from-to-do loop)\n&lt;/dd&gt;\n\n&lt;dd class=\"notedate\"&gt;Posted on March 4, 2016 - 15:58 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Highhead|Highhead]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nDeleting from an array with foreach and _foreachIndex variable is tricky. The array is being altered, the _foreachIndex won't keep up and other elements in the array will be skipped and in worst case not being deleted.\nIf you delete elements from an array in descending order (using while or for) it will work.\n&lt;/dd&gt;\n\n&lt;dd class=\"notedate\"&gt;Posted on February 9, 2017 - 22:45 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Igneous01|Igneous01]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nTo expand on Highheads comment above - this is because forEach implements iterators to traverse a collection, which are read only by definition. \nThe variable _x is an iterator that points to the current item in the collection. Trying to alter _x will have no effect. \n&lt;code&gt;ARRAY = [1,2,3,4,5,6,7,8]; \n{ _x = 2; } forEach ARRAY\n// ARRAY is still [1,2,3,4,5,6,7,8]&lt;/code&gt;\nWhen trying to use deleteAt inside forEach, the behaviour would be undefined as you are invalidating the iterator reference, and it will not know how to traverse to the next element. \nIn short, only use forEach when reading data from an array.\nFor more info about iterators, see C++ Iterators.\n&lt;/dd&gt;\n\n&lt;dd class=\"notedate\"&gt;Posted on October 3, 2019 - 13:16 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Tankbuster|Tankbuster]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nThe index you pass to this command is zero based. The first element is number 0 and the second is 1 etc\n&lt;/dd&gt;\n&lt;/dl&gt;\n<comment>&lt;!-- DISCONTINUE Notes --&gt;\n</comment>\n\n&lt;dl class=\"command_description\"&gt;\n&lt;dd class=\"notedate\"&gt;Posted on February 1, 2021 - 18:06 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Freghar|Freghar]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nAs you would expect from a simple array implementation,\n&lt;code&gt;array deleteAt (count array - 1);&lt;/code&gt;\nis virtually zero cost (0.0005ms on an array of 1000000 elements), while\n&lt;code&gt;array deleteAt 0;&lt;/code&gt;\nis very performance heavy (0.7ms on the same huge array).\n&lt;/dd&gt;\n&lt;/dl&gt;</root>"}}}