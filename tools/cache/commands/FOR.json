{"parse":{"title":"for","pageid":4642,"parsetree":{"*":"<root><template><title>RV</title><part><name>type</name>=<value>command\n\n</value></part><part><name index=\"1\"/><value> arma1\n\n</value></part><part><name>gr1</name>=<value> Program Flow\n\n</value></part><part><name index=\"2\"/><value>1.00\n\n</value></part><part><name index=\"3\"/><value> This operator creates a [[For Type]] which is used in the for-constructs.\n<template lineStart=\"1\"><title>Feature</title><part><name index=\"1\"/><value>important</value></part><part><name index=\"2\"/><value>Alternative syntax <template><title>ic</title><part><name index=\"1\"/><value>[[for]] ''array'' [[do]] ''code''</value></part></template> is [[Code_Optimisation#for|slower]] than the alternative because the condition is checked every iteration.</value></part></template>\n\n</value></part><part><name index=\"4\"/><value> [[for]] arguments\n\n</value></part><part><name>p1</name>=<value> arguments: [[String]] - declares the index variable name like \"_myVar\". [[from]] and [[to]] are required, [[step]] is optional.\n\n</value></part><part><name index=\"5\"/><value> [[For Type]]\n\n</value></part><part><name>s2</name>=<value> [[for]] [init, condition, codeToExecute]\n\n</value></part><part><name>p21</name>=<value> init: [[Code]] - loop variable definition\n</value></part><part><name>p22</name>=<value> condition: [[Code]] - [[call]]ed code returns [[false]], leave the [[for]]-loop\n</value></part><part><name>p23</name>=<value> codeToExecute: [[Code]] - code to be run on each loop\n\n</value></part><part><name>r2</name>=<value> [[For Type]]\n\n</value></part><part><name>x1</name>=<value> &lt;code&gt;<template><title>cc</title><part><name index=\"1\"/><value>will output 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 (the to value being inclusive)</value></part></template>\n[[for]] \"_i\" [[from]] 1 [[to]] 10 [[do]] { [[systemChat]] [[str]] _i; };&lt;/code&gt;\n\n</value></part><part><name>x2</name>=<value> &lt;code&gt;[[for]] \"_i\" [[from]] 9 [[to]] 1 [[step]] -2 [[do]] { [[systemChat]] [[str]] _i; };&lt;/code&gt;\n\n</value></part><part><name>x3</name>=<value> &lt;code&gt;[[for]] [{ _i = 0 }, { _i &lt; 10 }, { _i = _i + 1 }] [[do]] { [[systemChat]] [[str]] _i };&lt;/code&gt;\n\n</value></part><part><name>x4</name>=<value> &lt;code&gt;<template><title>cc</title><part><name index=\"1\"/><value>BAD CODE</value></part></template>\n_i = 100; \n[[for]] [{_i = 0}, {_i &lt; 5}, {_i = _i + 1}] [[do]] {}; \n[[hint]] [[str]] _i; <template><title>cc</title><part><name index=\"1\"/><value>5</value></part></template>\n\n<template lineStart=\"1\"><title>cc</title><part><name index=\"1\"/><value>GOOD CODE ([[private]] keyword is recommended)</value></part></template>\n_i = 100; \n[[for]] [{[[private]] _i = 0}, {_i &lt; 5}, {_i = _i + 1}] [[do]] {}; \n[[hint]] [[str]] _i; <template><title>cc</title><part><name index=\"1\"/><value>100</value></part></template>&lt;/code&gt;\n\n</value></part><part><name>seealso</name>=<value> [[Control Structures]], [[while]], [[do]]\n</value></part></template>\n\n&lt;dl class=\"command_description\"&gt;\n<comment>&lt;!-- Note Section BEGIN --&gt;\n</comment>\n&lt;dd class=\"notedate\"&gt;Posted on 29 April 2010 (CEST)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Alef|alef]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;&lt;code&gt;[[for]] \"_i\" [[from]] 0 [[to]]  0 [[do]] {}; <template><title>cc</title><part><name index=\"1\"/><value>will do once, with _i <template><title>=</title></template> 0</value></part></template>\n[[for]] \"_i\" [[from]] 0 [[to]] -1 [[do]] {}; <template><title>cc</title><part><name index=\"1\"/><value>will not do</value></part></template>\n&lt;/code&gt;\n\n&lt;dd class=\"notedate\"&gt;Posted on Apr 15, 2014 - 12:54&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:ffur2007slx2_5|ffur2007slx2_5]]&lt;dd class=\"note\"&gt;\n\n*<template><title>GVI</title><part><name index=\"1\"/><value>arma 3</value></part><part><name index=\"2\"/><value>1.16</value></part></template> Please note the difference between the two syntaxes; <template><title>ic</title><part><name index=\"1\"/><value>[[for]] ''arguments''</value></part></template> detects Boolean in each scope while <template><title>ic</title><part><name index=\"1\"/><value>[[for]] ''array''</value></part></template> doesn\u2019t. e.g.\n{| class=\"wikitable\"\n! command\n! Structure\n! Summary\n|-\n| [[for]]&amp;nbsp;''array''\n|\n a = 0; b = [[true]];\n [[for]] [{ _i = 0 }, { _i &lt; 10 &amp;&amp; b }, { _i = _i + 1 }] [[do]] {\n \ta = a + 1; \n \t[[if]] (a &gt;= 7) [[then]] {b = [[false]]}\n }\n| loop can be exited via [[Boolean]] control, possible workaround can be e.g [[BIS_fnc_areEqual]]\n|-\n|[[for]]&amp;nbsp;''arguments''\n|\n a = 0;\n [[for]] \"_i\" [[from]] 0 [[to]] 10 [[do]] {\n \ta = a + 1;\n \t[[if]] (a &gt;= 7) [[exitwith]] {}\n };\n| has to be exited via [[exitWith]]\n\n|}\n&lt;br&gt;\n* Never try to tell a decimal number via binary number in a loop; otherwise the loop will be infinite:\n&lt;code&gt;[[for]] [{_a = 0},{_a != 1},{_a = _a + 0.1}] [[do]] {}; <template><title>cc</title><part><name index=\"1\"/><value>an infinite loop; _a will never be 1 so the scope will always be true</value></part></template>&lt;/code&gt;\nAny binary number behind the decimal point is always the sum of 1/2, 1/4, 1/8, 1/16 etc. so decimal number with odd denominator like 1/3 or 1/10 cannot be exactly equal to each other.\n* Avoid too large factorial multiply which may loose the leading indicator in result. And 12 is the biggest accessable factor in this example.\n&lt;code&gt;[[for]] [{_a = 2; _b = 1;},{_a &lt; 100},{_a = _a + 1}] [[do]] {_b = _b * _a}; <template><title>cc</title><part><name index=\"1\"/><value>_b <template><title>=</title></template> 1.#INF</value></part></template>&lt;/code&gt;\n\n&lt;dd class=\"notedate\"&gt;Posted on June 4, 2015 - 19:27 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Killzone Kid|Killzone Kid]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nVariable name doesn't have to start with _. could be:&lt;code&gt;[[for]] \"LAlala\" [[from]] 0 [[to]] 0 [[do]] {[[hint]] [[str]] LAlala}; <template><title>cc</title><part><name index=\"1\"/><value>0</value></part></template>&lt;/code&gt;\nThe variable ''LAlala'' will exist only inside [[do]] {} scope and will not overwrite any variable of the same name that existed before.\n&lt;/dd&gt;\n\n&lt;dd class=\"notedate\"&gt;Posted on June 4, 2015 - 19:45 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Nickorr|Nickorr]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nDont use this notation if you plan to change the cycle ranges dynamically. The range values are checked only before the cycle started. Use <template><title>ic</title><part><name index=\"1\"/><value>[[for]] ''array''</value></part></template> instead. &lt;br&gt;\n\nExample, that won't work correctly:\n&lt;code&gt;<ext><name>nowiki</name><attr/><inner>_xy = [1,2,3,4,5,6,7,8,9,10];\nfor \"_i\" from 0 to (count _xy - 1) do {\n\tif ( _xy select _i == 3 ) then {\n\t\t_xy deleteAt _i;\n\t\t_i = _i - 1;\t\n\t};\n};</inner><close>&lt;/nowiki&gt;</close></ext>&lt;/code&gt;\n(Here the &lt;tt&gt;<ext><name>nowiki</name><attr/><inner>_i = 9</inner><close>&lt;/nowiki&gt;</close></ext>&lt;/tt&gt; step will still be checked by the cycle, which will lead to \"out of the array range\" error.) &lt;br&gt;\nThis code will work correctly:\n&lt;code&gt;<ext><name>nowiki</name><attr/><inner>_xy = [1,2,3,4,5,6,7,8,9,10];\nfor [{_i=1},{_i&lt;=(count _xy - 1)},{_i=_i+1}] do {\n\tif ( _xy select _i == 3 ) then {\n\t\t_xy deleteAt _i;\n\t\t_i = _i - 1;\t\n\t};\n};</inner><close>&lt;/nowiki&gt;</close></ext>&lt;/code&gt;\n(The last step here will be &lt;tt&gt;<ext><name>nowiki</name><attr/><inner>_i = 8</inner><close>&lt;/nowiki&gt;</close></ext>&lt;/tt&gt; with array looking like this: &lt;tt&gt;<ext><name>nowiki</name><attr/><inner>[1,2,4,5,6,7,8,9,10]</inner><close>&lt;/nowiki&gt;</close></ext>&lt;/tt&gt;)\n&lt;/dd&gt;\n\n&lt;dd class=\"notedate\"&gt;Posted on January 29, 2016 - 05:18 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:DreadedEntity|DreadedEntity]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nFor loops can be safely nested. This means that there should not be any problems with recursion.\n&lt;code&gt;_array = [];\n[[for]] \"_i\" from 0 to 3 do\n{\n\t[[for]] \"_i\" from 0 to 3 do\n\t{\n\t\t_array [[pushBack]] _i;\n\t};\n\t_array [[pushBack]] _i;\n};\n[[hint]] [[str]] _array;&lt;/code&gt;\n&lt;/dd&gt;\n\n&lt;dd class=\"notedate\"&gt;Posted on June 3, 2020 - 11:45&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Lou Montana|Lou Montana]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt; There is an [[<template><title>arma2</title></template>]] issue (not present in Arrowhead nor in <template><title>arma3</title></template>) where having a capital letter in the variable name '''will''' throw an error:\n&lt;code&gt;[[for]] \"_i\" [[from]] 0 [[to]] 2 [[do]] { [[hintSilent]] [[str]] _i; }; <template><title>cc</title><part><name index=\"1\"/><value>works</value></part></template>\n[[for]] \"_I\" [[from]] 0 [[to]] 2 [[do]] { [[hintSilent]] [[str]] _I; }; <template><title>cc</title><part><name index=\"1\"/><value>\"variable _i is not defined\" error</value></part></template>&lt;/code&gt;&lt;/dd&gt;\n\n<comment>&lt;!-- Note Section END --&gt;\n</comment>&lt;/dl&gt;\n\n\n<template lineStart=\"1\"><title>GameCategory</title><part><name index=\"1\"/><value>arma2</value></part><part><name index=\"2\"/><value>Scripting Commands</value></part></template>\n<template lineStart=\"1\"><title>GameCategory</title><part><name index=\"1\"/><value>arma3</value></part><part><name index=\"2\"/><value>Scripting Commands</value></part></template>\n<template lineStart=\"1\"><title>GameCategory</title><part><name index=\"1\"/><value>tkoh</value></part><part><name index=\"2\"/><value>Scripting Commands</value></part></template></root>"}}}