{"parse":{"title":"waitUntil","pageid":2517,"parsetree":{"*":"<root><template><title>RV</title><part><name>type</name>=<value>command\n\n</value></part><part><name index=\"1\"/><value> arma1\n\n</value></part><part><name index=\"2\"/><value>1.00\n\n</value></part><part><name>gr1</name>=<value> Program Flow\n\n</value></part><part><name index=\"3\"/><value> Suspends execution of [[Scheduler | scheduled]] script until the given condition satisfied. This command will loop and call the code inside &lt;tt&gt;{}&lt;/tt&gt; ''mostly'' every frame (depends on complexity of condition and overall engine load) until the [[Code|code]] returns [[true]]. The execution of the rest of the script therefore will be suspended until [[waitUntil]] completes. &lt;br&gt;&lt;br&gt;\nIf the very first execution of the code returns [[true]] the command will exit immediately, therefore it will not produce any \"Suspending not allowed in this context\" error when used inside [[Scheduler#Unscheduled_Environment|non-scheduled]] script. For all other uses it must be executed in environment that allows [[Scheduler#Suspension|suspension]] ([[canSuspend]]), such as [[spawn]]ed or [[execVM]]ed code.\n<template lineStart=\"1\"><title>Feature </title><part><name index=\"1\"/><value> important </value></part><part><name index=\"2\"/><value> Since Arma 3 v1.93.145618, a ''condition'' returning anything other than [[true]] or [[false]] '''will''' result in an appropriate type error.</value></part></template>\n</value></part><part><name>pr</name>=<value> For some unknown reason if you have [[waitUntil]] loop active and game is '''saved/loaded''', some variables in the expression may appear undefined for a short time. As a workaround, assign expression to a variable and make sure it is defined before [[waitUntil]] checks it:\n&lt;code&gt;[[waitUntil]] { [[private]] _expression <template><title>=</title></template> var1 &amp;&amp; (var2 &gt; 10); ![[isNil]] \"_expression\" &amp;&amp; { _expression } };&lt;/code&gt;\n\n</value></part><part><name index=\"4\"/><value> [[waitUntil]] condition\n\n</value></part><part><name>p1</name>=<value> condition: [[Code]] - the expression that '''must''' return a [[Boolean]], [[true]] to finish waiting or [[false]] to continue waiting\n\n</value></part><part><name index=\"5\"/><value> [[Anything]] - the value the condition evaluates to when the wait is over (normally [[true]])\n\n</value></part><part><name>x1</name>=<value> &lt;code&gt;[[waitUntil]] { [[not]] [[alive]] [[player]] };&lt;/code&gt;\n\n</value></part><part><name>x2</name>=<value> &lt;code&gt;_i = 0; [[waitUntil]] { _i = _i + 1; _i &gt;= 100 }; &lt;/code&gt;\n\n</value></part><part><name>x3</name>=<value> &lt;code&gt;[[waitUntil]] {[[sleep]] 1; [[not]] [[alive]] [[player]] }; <template><title>cc</title><part><name index=\"1\"/><value>Checks every 1 second</value></part></template>&lt;/code&gt;\n\n</value></part><part><name>x4</name>=<value> An on-the-fly custom ''[[Arma_3:_Event_Handlers|event handler]]'':\n&lt;code&gt;_myEH = [\"ZoomIn\"] [[spawn]] {\n\t[[while]] { [[true]] } [[do]] {\n\t\t[[waitUntil]] {\n\t\t\t[[inputAction]] ([[Magic Variables#this|_this]] [[select]] 0) == 1;\n\t\t};\n\t\t[[diag_log]] [[format]] [\"%1 @ %2\", [[Magic Variables#this|_this]] [[select]] 0, [[diag_tickTime]]<ext><name>nowiki</name><attr/><inner>]</inner><close>&lt;/nowiki&gt;</close></ext>;\n\t};\n};&lt;/code&gt;\nAlthough perhaps better to use [[BIS_fnc_addStackedEventHandler|onEachFrame]], depending on the application.\n\n</value></part><part><name>x5</name>=<value> Use [[getVariable]] with default value:&lt;code&gt;<template><title>cc</title><part><name index=\"1\"/><value>bad</value></part></template>\n[[waitUntil]] { bank [[getVariable]] \"money\" &gt; 0 };\n<template lineStart=\"1\"><title>cc</title><part><name index=\"1\"/><value>good</value></part></template>\n[[waitUntil]] { bank [[getVariable]] [\"money\", 0] &gt; 0 };&lt;/code&gt;\n&lt;code&gt;<template><title>cc</title><part><name index=\"1\"/><value>bad</value></part></template>\n[[waitUntil]] { isready };\n<template lineStart=\"1\"><title>cc</title><part><name index=\"1\"/><value>good</value></part></template>\n[[waitUntil]] { [[missionNamespace]] [[getVariable]] [\"isready\", [[false]]] };&lt;/code&gt;\nAlways return [[Boolean]]:&lt;code&gt;<template><title>cc</title><part><name index=\"1\"/><value>bad</value></part></template>\n[[waitUntil]] { [[if]] ([[not]] [[alive]] [[player]]) [[exitWith]] {}; _time <template><title>=</title></template> _time + 1 };\n<template lineStart=\"1\"><title>cc</title><part><name index=\"1\"/><value>good</value></part></template>\n[[waitUntil]] { [[if]] ([[not]] [[alive]] [[player]]) [[exitWith]] { [[true]] }; _time <template><title>=</title></template> _time + 1; [[false]] };\n<template lineStart=\"1\"><title>cc</title><part><name index=\"1\"/><value>perfect</value></part></template>\n[[waitUntil]] { [[not]] [[alive]] [[player]] };&lt;/code&gt;\n\n</value></part><part><name>seealso</name>=<value> [[sleep]], [[uiSleep]], [[canSuspend]], [[spawn]], [[execVM]], [[while]], [[Control Structures]]\n</value></part></template>\n\n&lt;dl class=\"command_description\"&gt;\n<comment>&lt;!-- Note Section BEGIN --&gt;\n</comment>\n&lt;dd class=\"notedate\"&gt;Posted on December 20, 2006 - 19:55&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:CrashDome|CrashDome]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nwaitUntil suspends both SQF functions and SQF scripts. In functions, the calling script is still in suspension due to waiting for a return from the [[call]] command. The game engine will continue, however. See [[Function]] for more detail.\n\n&lt;dd class=\"notedate\"&gt;Posted on April 2, 2010 - 17:10&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Roehre|Roehre]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nPrior to Arma 3 v1.92.145618 if [[waitUntil]] uses an undefined [[call]] code, [[waitUntil]] won't release, even when this code is separated from other conditions through [[or]]. Be warned that this won't cause an error message.\n\n&lt;dd class=\"notedate\"&gt;Posted on Jan 07, 2011&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:kju|kju]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nBy default the cycle time for the condition check is per frame. Look at the example 3, how to set it at a lower rate yourself.\nOften times one does not need per-frame checking. Saves a lot CPU checks; especially when the condition is complex to compute.\n\n&lt;dd class=\"notedate\"&gt;Posted on December 13, 2014 - 23:25 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Commy2|Commy2]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nIf you want to use [[waitUntil]] together with [[exitWith]], remember that the loop only exits if the code block returns true.&lt;br&gt;\n&lt;br&gt;\nIt should look like this:\n&lt;code&gt;[[waitUntil]] {\n\t<template><title>cc</title><part><name index=\"1\"/><value>exit loop if the unit gets deleted</value></part></template>\n\t{{cc|[[if]] ([[isNull]] _unit) [[exitWith]] { [[true]] }; <template><title>cc</title><part><name index=\"1\"/><value>has to return true to continue</value></part></template>\n\n\t![[alive]] _unit;\n};\n&lt;/code&gt;\n&lt;/dd&gt;\n\n<comment>&lt;!-- Note Section END --&gt;\n</comment>&lt;/dl&gt;\n\n\n<template lineStart=\"1\"><title>GameCategory</title><part><name index=\"1\"/><value>arma2</value></part><part><name index=\"2\"/><value>Scripting Commands</value></part></template>\n<template lineStart=\"1\"><title>GameCategory</title><part><name index=\"1\"/><value>arma3</value></part><part><name index=\"2\"/><value>Scripting Commands</value></part></template>\n<template lineStart=\"1\"><title>GameCategory</title><part><name index=\"1\"/><value>tkoh</value></part><part><name index=\"2\"/><value>Scripting Commands</value></part></template></root>"}}}