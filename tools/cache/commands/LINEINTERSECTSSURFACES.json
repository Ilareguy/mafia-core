{"parse":{"title":"lineIntersectsSurfaces","pageid":17425,"parsetree":{"*":"<root><template><title>Command</title><part><name>Comments</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"1\"/><value> arma3 </value></part><part><name>Game name</name>=<value>\n</value></part><part><name index=\"2\"/><value>1.50</value></part><part><name>Game version</name>=<value>\n</value></part><part><name>arg</name>=<value> global</value></part><part><name>Multiplayer Arguments</name>=<value>\n\n</value></part><part><name>gr1</name>=<value> Math - Geometry </value></part><part><name>GROUP1</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"3\"/><value> Returns list of intersections with surfaces from ''begPosASL'' to ''endPosASL''. If there is ground intersection, it is also included. Works on units. Works underwater. Doesn't return intersection with sea surface. Hardcoded max distance: 5000m. By default, for speed purposes, command will return only 1st intersection with unique objects. Since Arma 3 v1.69.140138, this could be tweaked with an optional param. \n<template lineStart=\"1\"><title>Informative </title><part><name index=\"1\"/><value> If ''begPosASL'' is under the ground and ''endPosASL'' is above it, the command will only return intersection with the ground, this is engine limitation and none of the intersectXXX commands will work when initiated from under the ground.</value></part></template>\nSince Arma v1.51.131920 it is possible to indicate primary and secondary [[LOD]] to look for intersection. Available options are:\n* \"FIRE\"\n* \"VIEW\"\n* \"GEOM\"\n* \"IFIRE\" - (\"I\" stands for Indirect, practically the same as FIRE)\n* \"NONE\"\n* \"PHYSX\" - PhysX geometry LOD (since Arma 3 v2.01.146666)\n\nDefault [[LOD]]s are \"VIEW\" and \"FIRE\"\n<template lineStart=\"1\"><title>Important </title><part><name index=\"1\"/><value> Only a single LOD is checked for intersection. LOD1 is Primary LOD and will be checked first. LOD2 is Secondary LOD. If LOD1 is not possible to check, LOD2 will be used.</value></part></template>   </value></part><part><name>DESCRIPTION</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"4\"/><value> '''lineIntersectsSurfaces''' [begPosASL, endPosASL, ignoreObj1, ignoreObj2, sortMode, maxResults, LOD1, LOD2, returnUnique] </value></part><part><name>SYNTAX</name>=<value>\n</value></part><part><name>p1</name>=<value> [begPosASL, endPosASL, ignoreObj1, ignoreObj2, sortMode, maxResults, LOD1, LOD2]: [[Array]]</value></part><part><name>PARAMETER1</name>=<value>\n</value></part><part><name>p2</name>=<value> begPosASL: [[PositionASL]] - virtual line start </value></part><part><name>PARAMETER2</name>=<value>\n\n</value></part><part><name>p3</name>=<value> endPosASL: [[PositionASL]] - virtual line end </value></part><part><name>PARAMETER3</name>=<value>\n</value></part><part><name>p4</name>=<value> ignoreObj1 (Optional): [[Object]] - first object to ignore or [[objNull]]: Default: [[objNull]]</value></part><part><name>PARAMETER4</name>=<value>\n</value></part><part><name>p5</name>=<value> ignoreObj2 (Optional): [[Object]] - second object to ignore or [[objNull]]: Default: [[objNull]] </value></part><part><name>PARAMETER5</name>=<value>\n</value></part><part><name>p6</name>=<value> sortMode (Optional): [[Boolean]] - [[true]]: closest to furthest, [[false]]: furthest to closest. Default: [[true]]  </value></part><part><name>PARAMETER6</name>=<value>\n</value></part><part><name>p7</name>=<value> maxResults (Optional): [[Number]] - Max results to return. -1 to return every result. Default: 1</value></part><part><name>PARAMETER7</name>=<value>\n</value></part><part><name>p8</name>=<value> LOD1 (Optional): [[String]] (added in v1.51.131920) - Primary [[LOD]] to look for intersection. Default: \"VIEW\" </value></part><part><name>PARAMETER8</name>=<value>\n</value></part><part><name>p9</name>=<value> LOD2 (Optional): [[String]] (added in v1.51.131920) - Secondary [[LOD]] to look for intersection. Default: \"FIRE\" </value></part><part><name>PARAMETER9</name>=<value>\n</value></part><part><name>p10</name>=<value> returnUnique (Optional): [[Boolean]] (added in v1.69.140138) - When [[false]], all intersections in the same object are included not just the 1st one. Default: [[true]] </value></part><part><name>PARAMETER10</name>=<value>\n\n</value></part><part><name index=\"5\"/><value> [[Array]] of intersections in format [<ext><name>nowiki</name><attr/></ext>[intersectPosASL, surfaceNormal, intersectObj, parentObject],...] where:\n* intersectPosASL - the actual position where line intersects surface\n* [[surfaceNormal]] - a normal to the intersected surface \n* intersectObject - the object the surface belongs to (could be proxy object) - [[objNull]] if terrain\n* parentObject - the object proxy object belongs to (not always the same as intersect object) - objNull if terrain </value></part><part><name>RETURNVALUE</name>=<value>\n____________________________________________________________________________________________\n</value></part><part><name>x1</name>=<value> &lt;code&gt;_intersections = [[lineIntersectsSurfaces]] [<ext><name>nowiki</name><attr/></ext>[[eyePos]] [[player]], [[aimPos]] chopper, [[player]], chopper, [[true]], -1];&lt;/code&gt; </value></part><part><name>EXAMPLE1</name>=<value>\n\n</value></part><part><name>x2</name>=<value> &lt;code&gt;arrow = \"Sign_Arrow_F\" [[createVehicle]] [0,0,0];\n[[onEachFrame]] {\n\t_ins = [[lineIntersectsSurfaces]] [\n\t\t[[AGLToASL]] [[positionCameraToWorld]] [0,0,0], \n\t\t[[AGLToASL]] [[positionCameraToWorld]] [0,0,1000], \n\t\t[[player]]\n\t];\n\t[[if]] ([[count]] _ins == 0) [[exitWith]] {arrow [[setPosASL]] [0,0,0]};\n\tarrow [[setPosASL]] (_ins [[select]] 0 [[select]] 0); \n\tarrow [[setVectorUp]] (_ins [[select]] 0 [[select]] 1);\n\t[[hintSilent]] [[str]] _ins;\n};&lt;/code&gt; </value></part><part><name>EXAMPLE2</name>=<value>\n\n</value></part><part><name>x3</name>=<value> This should detect glass windows and wire fences (since Arma v1.51.131920): &lt;code&gt;wirefence = \"Land_New_WiredFence_5m_F\" [[createVehicle]] [[position]] [[player]];\narrow = \"Sign_Arrow_F\" [[createVehicle]] [0,0,0];\n[[onEachFrame]] {\n\t_ins = [[lineIntersectsSurfaces]] [\n\t\t[[AGLToASL]] [[positionCameraToWorld]] [0,0,0], \n\t\t[[AGLToASL]] [[positionCameraToWorld]] [0,0,1000], \n\t\t[[player]],\n\t\t[[objNull]],\n\t\t[[true]],\n\t\t1,\n\t\t\"GEOM\",\n\t\t\"NONE\"\n\t];\n\t[[if]] ([[count]] _ins == 0) [[exitWith]] {arrow [[setPosASL]] [0,0,0]};\n\tarrow [[setPosASL]] (_ins [[select]] 0 [[select]] 0); \n\tarrow [[setVectorUp]] (_ins [[select]] 0 [[select]] 1);\n\t[[hintSilent]] [[str]] _ins;\n};&lt;/code&gt; </value></part><part><name>EXAMPLE3</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"6\"/><value> [[lineIntersectsWith]], [[lineIntersectsObjs]], [[terrainIntersect]], [[terrainIntersectASL]], [[terrainIntersectAtASL]], [[lineIntersects]], [[intersect]], [[cursorObject]], [[cursorTarget]], [[checkVisibility]] </value></part><part><name>SEEALSO</name>=<value>\n\n</value></part></template>\n\n&lt;h3 style=\"display:none\"&gt;Notes&lt;/h3&gt;\n&lt;dl class=\"command_description\"&gt;\n&lt;/dl&gt;\n\n&lt;h3 style=\"display:none\"&gt;Bottom Section&lt;/h3&gt;\n\n[[Category:Scripting Commands Arma 3|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n\n<comment>&lt;!-- CONTINUE Notes --&gt;\n</comment>&lt;dl class=\"command_description\"&gt;\n&lt;dd class=\"notedate\"&gt;Posted on August 27, 2015 - 12:44 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Killzone Kid|Killzone Kid]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nFast check if object is in a house:&lt;code&gt;KK_fnc_inHouse = {\n\t[[lineIntersectsSurfaces]] [\n\t\t[[getPosWorld]] _this, \n\t\t[[getPosWorld]] _this [[vectorAdd]] [0, 0, 50], \n\t\t_this, [[objNull]], [[true]], 1, \"GEOM\", \"NONE\"\n\t] [[select]] 0 [[params]] [\"\",\"\",\"\",\"_house\"];\n\t[[if]] (_house [[isKindOf]] \"House\") [[exitWith]] {[[true]]};\n\t[[false]]\n};\n[[onEachFrame]] {[[hintSilent]] [[str]] ([[player]] [[call]] KK_fnc_inHouse)};&lt;/code&gt;\n&lt;/dd&gt;\n&lt;/dl&gt;\n\n&lt;dl class=\"command_description\"&gt;\n&lt;dd class=\"notedate\"&gt;Posted on January 30, 2016 - 20:10 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Pierre MGI|Pierre MGI]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nThis command is useful to place weaponholder (and then spawned weapons) on floor of houses, correcting  the spawn position (can_collide) to intersect with floor:\n&lt;code&gt;\nMGI_fnc_setPosAGLS = {\n  [[params]] [\"_obj\", \"_pos\"];\n  _wh_pos = [[getPosASL]] _obj;\n\n  _pos [[set]] [2, ([[ATLtoASL]] _pos [[select]] 2)-10];\n_ins = [[lineIntersectsSurfaces]] [_wh_pos, _pos,_obj,[[objNull]], [[true]],1,\"VIEW\",\"FIRE\"];\n_surface_distance = [[if]] ([[count]] _ins &gt; 0) [[then]] [{(_ins [[select]] 0 [[select]] 0) [[distance]] _wh_pos},{0}];\n_wh_pos [[set]] [2, ([[getPosASL]] _obj [[select]] 2) - (_surface_distance)];\n_weaponholder [[setPosASL]] _wh_pos;\n};\n&lt;/code&gt;\nAfter the position (_pos) obtained in BIS_fnc_buidingPositions array:\n&lt;code&gt;\n_weaponholder = [[createVehicle]] [\"groundWeaponHolder\", _pos, [], 0, \"CAN_COLLIDE\"];\n[_weaponholder,_pos] [[call]] MGI_fnc_setPosAGLS;\nThen fill your weapon holder.\n&lt;/code&gt;\n&lt;/dd&gt;\n&lt;/dl&gt;\n\n<comment>&lt;!-- DISCONTINUE Notes --&gt;</comment></root>"}}}