{"parse":{"title":"try","pageid":2527,"parsetree":{"*":"<root><template><title>Command\n\n</title><part><name>game1</name>=<value> arma\n\n</value></part><part><name>version1</name>=<value> 1.00\n\n</value></part><part><name>gr1</name>=<value> Program Flow </value></part><part><name>GROUP1</name>=<value>\n\n</value></part><part><name>s1</name>=<value> Defines a try-catch structure. This sets up an [[Exception handling|exception handling]] block. Any thrown exception in a try block is caught in a [[catch]] block. The structured exception block has the following form:\n&lt;code&gt;[[try]]\n{ <template><title>codecomment</title><part><name index=\"1\"/><value>/* block that can throw exception */</value></part></template> }\n[[catch]]\n{ <template><title>codecomment</title><part><name index=\"1\"/><value>/* block that processes the exception. Exception is described in the ''_exception'' variable */</value></part></template> };&lt;/code&gt; </value></part><part><name>DESCRIPTION</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name index=\"1\"/><value> [[try]] code </value></part><part><name>SYNTAX</name>=<value>\n\n</value></part><part><name>p1</name>=<value> code: [[Code]] </value></part><part><name>PARAMETER1</name>=<value>\n\n</value></part><part><name index=\"2\"/><value> [[Exception handling|Exception Type]] </value></part><part><name>RETURNVALUE</name>=<value>\n____________________________________________________________________________________________\n\n</value></part><part><name> s2</name>=<value> args [[try]] code <template><title>since</title><part><name index=\"1\"/><value>arma3</value></part><part><name index=\"2\"/><value>1.53.133045</value></part><part><name index=\"3\"/><value>y</value></part></template> </value></part><part><name>SYNTAX2</name>=<value>\n\n</value></part><part><name>p21</name>=<value> args: [[Anything]] - passed arguments, will be put in ''_this'' variable inside the \"code\" </value></part><part><name>PARAMETER21</name>=<value>\n\n</value></part><part><name>p22</name>=<value> code: [[Code]] </value></part><part><name>PARAMETER22</name>=<value>\n\n</value></part><part><name> r2</name>=<value> [[Exception handling|Exception Type]] </value></part><part><name>RETURNVALUE2</name>=<value>\n\n\n</value></part><part><name>x1</name>=<value> &lt;code&gt;[[try]] {[[throw]] \"invalid argument\"} [[catch]] {[[hint]] [[str]] _exception};&lt;/code&gt; </value></part><part><name>EXAMPLE1</name>=<value>\n\n</value></part><part><name>x2</name>=<value> <template><title>since</title><part><name index=\"1\"/><value>arma3</value></part><part><name index=\"2\"/><value>1.53.133045</value></part></template>: &lt;code&gt;123 [[try]] {[[if]] (_this != 123) [[throw]] \"invalid argument\"} [[catch]] {[[hint]] [[str]] _exception};&lt;/code&gt; </value></part><part><name>EXAMPLE2</name>=<value>\n\n</value></part><part><name>x3</name>=<value> The correct usage of shorthand alt syntax: &lt;code&gt;[[try]] {\n\t[[if]] (a &gt; b) [[throw]] \"Error: some error\"; <template><title>cc</title><part><name index=\"1\"/><value>OK</value></part></template>\n\t<template><title>cc</title><part><name index=\"1\"/><value>The command argument is static</value></part></template>\n} [[catch]] {\n\t[[hint]] [[str]] _exception;\n};\n\n[[try]] {\n\t_someFunc = {\n\t\t.....\n\t};\n\t[[if]] (a &gt; b) [[throw]] ([[call]] _someFunc); <template><title>cc</title><part><name index=\"1\"/><value>NOT OK</value></part></template>\n\t<template><title>cc</title><part><name index=\"1\"/><value>The command argument is dynamic</value></part></template>\n\t<template><title>cc</title><part><name index=\"1\"/><value>_someFunc is called first to get the value regardless of (a &gt; b) outcome</value></part></template>\n} [[catch]] {\n\t[[hint]] [[str]] _exception;\n};\n\n[[try]] {\n\t_someFunc = {\n\t\t.....\n\t};\n\t[[if]] (a &gt; b) [[then]] {[[throw]] ([[call]] _someFunc)}; /// OK\n\t<template><title>cc</title><part><name index=\"1\"/><value>The command argument is dynamic</value></part></template>\n\t<template><title>cc</title><part><name index=\"1\"/><value>_someFunc is only called when (a &gt; b) is [[true]]</value></part></template>\n} [[catch]] {\n\t[[hint]] [[str]] _exception;\n};&lt;/code&gt; </value></part><part><name>EXAMPLE3</name>=<value>\n\n</value></part><part><name>seealso</name>=<value> [[Exception handling]], [[throw]], [[catch]]\n</value></part></template>\n\n&lt;h3 style=\"display:none\"&gt;Notes&lt;/h3&gt;\n&lt;dl class=\"command_description\"&gt;\n<comment>&lt;!-- Note Section BEGIN --&gt;\n</comment>\n<comment>&lt;!-- Note Section END --&gt;\n</comment>&lt;/dl&gt;\n\n&lt;h3 style=\"display:none\"&gt;Bottom Section&lt;/h3&gt;\n[[Category:Scripting Commands|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands Armed Assault|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands Arma 2|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands Arma 3|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n[[Category:Scripting Commands Take On Helicopters|<template><title>uc:<template><title>PAGENAME</title></template></title></template>]]\n\n\n<comment>&lt;!-- CONTINUE Notes --&gt;\n</comment>&lt;dl class=\"command_description\"&gt;\n&lt;dd class=\"notedate\"&gt;Posted on June 9, 2015 - 20:52 (UTC)&lt;/dd&gt;\n&lt;dt class=\"note\"&gt;[[User:Killzone Kid|Killzone Kid]]&lt;/dt&gt;\n&lt;dd class=\"note\"&gt;\nDo not expect this behave like Javascript try catch and ignore all errors. But it does have one useful behaviour. Normally when a runtime error occurs in SQF (unlike when there is compile error) it continues to execute till the end. But if the script is placed in [[try]] {} scope and [[throw]] is used upon error, the script immediately terminates, exits the [[try]] {} scope and enters [[catch]] {} scope. This way it is possible to process possible exceptions in civilised manner. \n&lt;/dd&gt;\n&lt;/dl&gt;\n<comment>&lt;!-- DISCONTINUE Notes --&gt;</comment></root>"}}}